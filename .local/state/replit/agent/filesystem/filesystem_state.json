{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Viral Views - Music Collaboration Platform\n\n## Overview\n\nViral Views is a **production-ready** live streaming platform specifically designed for rap battles and freestyle ciphers. The core focus is real-time audio streaming for live rap battles, with contestants battling each other through peer-to-peer audio connections. The platform enables live streaming rap battles, real-time voting, and collaborative music sessions using Web Audio API and WebRTC technology.\n\n**Current Status**: Production deployment ready with full live streaming functionality for rap battles and ciphers as the primary feature.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling and hot module replacement\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design tokens for a dark music platform theme\n- **Mobile Support**: Responsive design with dedicated mobile navigation component\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Build System**: ESBuild for production bundling with TypeScript compilation\n- **Development**: TSX for TypeScript execution in development with hot reloading\n- **API Design**: RESTful API structure with dedicated route handlers for different resources\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n\n### Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema**: Comprehensive data model covering users, tracks, battles, beats, collaborations, and votes\n- **Connection**: Neon Database serverless PostgreSQL with connection pooling\n- **Migrations**: Drizzle Kit for database schema migrations and management\n\n### Key Features Architecture\n- **Battle System**: Real-time voting mechanism with contestant tracking and vote aggregation\n- **Beat Marketplace**: License-based beat sales with genre categorization and producer profiles\n- **Collaborative Mixing**: Multi-user audio mixing interface with waveform visualization\n- **Live Streaming**: Live session support for freestyle battles and beat-making sessions\n- **Social Features**: User profiles with follower systems, track sharing, and engagement metrics\n\n### Authentication & Authorization\n- **User Management**: Role-based system supporting artists, producers, and fans\n- **Session Handling**: Cookie-based session management with PostgreSQL session store\n- **Security**: Password hashing and input validation with Zod schemas\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with automatic scaling\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL dialect support\n\n### UI & Design System\n- **Shadcn/ui**: Pre-built accessible component library\n- **Radix UI**: Headless UI primitives for complex components\n- **Tailwind CSS**: Utility-first CSS framework with custom color palette\n- **Lucide Icons**: Comprehensive icon library for UI elements\n\n### Development Tools\n- **Vite**: Frontend build tool with React plugin and development server\n- **TypeScript**: Type safety across frontend and backend code\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TanStack Query**: Server state management with caching and synchronization\n\n### Audio & Media\n- **Embla Carousel**: Touch-friendly carousel component for content display\n- **Custom Waveform Visualization**: Canvas-based audio waveform rendering\n- **Date-fns**: Date manipulation and formatting utilities\n\n### Validation & Forms\n- **Zod**: Schema validation for API inputs and form data\n- **React Hook Form**: Form state management with validation integration\n- **Drizzle-Zod**: Integration between Drizzle schemas and Zod validation","size_bytes":4025},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        dark: {\n          100: \"var(--dark-100)\",\n          200: \"var(--dark-200)\",\n          300: \"var(--dark-300)\",\n          400: \"var(--dark-400)\",\n        },\n        purple: {\n          500: \"var(--purple-500)\",\n          600: \"var(--purple-600)\",\n        },\n        electric: {\n          500: \"var(--electric-500)\",\n          600: \"var(--electric-600)\",\n        },\n        success: {\n          500: \"var(--success-500)\",\n        },\n        highlight: {\n          500: \"var(--highlight-500)\",\n        },\n        gold: {\n          500: \"var(--gold-500)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        waveform: {\n          \"0%, 100%\": { height: \"20%\" },\n          \"50%\": { height: \"100%\" },\n        },\n        \"beat-pulse\": {\n          \"0%, 100%\": { transform: \"scale(1)\" },\n          \"50%\": { transform: \"scale(1.05)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        waveform: \"waveform 2s ease-in-out infinite\",\n        \"beat-pulse\": \"beat-pulse 1s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3129},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport mimeTypes from \"mime-types\";\nimport { writeFile, mkdir } from \"fs/promises\";\nimport { join, extname } from \"path\";\nimport { existsSync } from \"fs\";\nimport express from \"express\";\nimport { \n  insertTrackSchema, \n  insertBattleSchema, \n  insertBeatSchema,\n  insertCollaborationSchema,\n  insertVoteSchema,\n  insertFileSchema\n} from \"@shared/schema\";\nimport { sendWelcomeEmail, reinitializeEmailService } from \"./emailService\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Replit Authentication\n  await setupAuth(app);\n\n  // Configure multer for file uploads\n  const upload = multer({ \n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 100 * 1024 * 1024, // 100MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      // Allow audio, video, and image files\n      const allowedMimes = [\n        'audio/mpeg', 'audio/wav', 'audio/mp3', 'audio/mp4', 'audio/aac', 'audio/ogg',\n        'video/mp4', 'video/mpeg', 'video/quicktime', 'video/webm',\n        'image/jpeg', 'image/png', 'image/gif', 'image/webp'\n      ];\n      \n      if (allowedMimes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Unsupported file type') as any);\n      }\n    }\n  });\n\n  // Ensure uploads directory exists\n  const uploadsDir = join(process.cwd(), 'uploads');\n  if (!existsSync(uploadsDir)) {\n    await mkdir(uploadsDir, { recursive: true });\n  }\n\n  // Serve uploaded files statically\n  app.use('/uploads', express.static(uploadsDir));\n\n  // Replit Auth routes (handled by setupAuth)\n  // /api/login, /api/logout, /api/callback are configured in replitAuth.ts\n\n  // Get current user for Replit Auth\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Legacy auth/me endpoint for compatibility\n  app.get(\"/api/auth/me\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user) {\n        const { password, ...userWithoutPassword } = user;\n        res.json({ user: userWithoutPassword });\n      } else {\n        res.status(404).json({ error: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Failed to get user info:\", error);\n      res.status(500).json({ error: \"Failed to get user info\" });\n    }\n  });\n\n  // File upload endpoints\n  app.post(\"/api/upload/audio\", isAuthenticated, upload.single('audio'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No audio file provided\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const file = req.file;\n      const fileExtension = extname(file.originalname);\n      const timestamp = Date.now();\n      const filename = `audio_${userId}_${timestamp}${fileExtension}`;\n      const filepath = join(uploadsDir, filename);\n\n      // Save file to local storage (uploads directory)\n      await writeFile(filepath, file.buffer);\n\n      // Create file record in database\n      const fileData = insertFileSchema.parse({\n        originalName: file.originalname,\n        fileName: filename,\n        filePath: `/uploads/${filename}`,\n        fileSize: file.size,\n        mimeType: file.mimetype,\n        fileType: 'audio',\n        directory: 'tracks',\n        uploadedBy: userId,\n        isPublic: true\n      });\n\n      const savedFile = await storage.createFile(fileData);\n      \n      res.json({\n        id: savedFile.id,\n        filename: filename,\n        url: `/uploads/${filename}`,\n        size: file.size,\n        type: file.mimetype\n      });\n    } catch (error) {\n      console.error(\"Audio upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload audio file\" });\n    }\n  });\n\n  app.post(\"/api/upload/video\", isAuthenticated, upload.single('video'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No video file provided\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const file = req.file;\n      const fileExtension = extname(file.originalname);\n      const timestamp = Date.now();\n      const filename = `video_${userId}_${timestamp}${fileExtension}`;\n      const filepath = join(uploadsDir, filename);\n\n      // Save file to local storage\n      await writeFile(filepath, file.buffer);\n\n      // Create file record in database\n      const fileData = insertFileSchema.parse({\n        originalName: file.originalname,\n        fileName: filename,\n        filePath: `/uploads/${filename}`,\n        fileSize: file.size,\n        mimeType: file.mimetype,\n        fileType: 'video',\n        directory: 'videos',\n        uploadedBy: userId,\n        isPublic: true\n      });\n\n      const savedFile = await storage.createFile(fileData);\n      \n      res.json({\n        id: savedFile.id,\n        filename: filename,\n        url: `/uploads/${filename}`,\n        size: file.size,\n        type: file.mimetype\n      });\n    } catch (error) {\n      console.error(\"Video upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload video file\" });\n    }\n  });\n\n  app.post(\"/api/upload/image\", isAuthenticated, upload.single('image'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const file = req.file;\n      const fileExtension = extname(file.originalname);\n      const timestamp = Date.now();\n      const filename = `image_${userId}_${timestamp}${fileExtension}`;\n      const filepath = join(uploadsDir, filename);\n\n      // Save file to local storage\n      await writeFile(filepath, file.buffer);\n\n      // Create file record in database\n      const fileData = insertFileSchema.parse({\n        originalName: file.originalname,\n        fileName: filename,\n        filePath: `/uploads/${filename}`,\n        fileSize: file.size,\n        mimeType: file.mimetype,\n        fileType: 'image',\n        directory: 'covers',\n        uploadedBy: userId,\n        isPublic: true\n      });\n\n      const savedFile = await storage.createFile(fileData);\n      \n      res.json({\n        id: savedFile.id,\n        filename: filename,\n        url: `/uploads/${filename}`,\n        size: file.size,\n        type: file.mimetype\n      });\n    } catch (error) {\n      console.error(\"Image upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload image file\" });\n    }\n  });\n\n  // User profile update\n  app.patch(\"/api/users/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const updatedUser = await storage.updateUser(userId, updates);\n      if (updatedUser) {\n        const { password, ...userWithoutPassword } = updatedUser;\n        res.json({ user: userWithoutPassword });\n      } else {\n        res.status(404).json({ error: \"User not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  // Admin middleware - now works with Replit auth\n  function requireAdmin(req: any, res: any, next: any) {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n    \n    const userId = req.user.claims.sub;\n    storage.getUser(userId).then(user => {\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ error: \"Admin privileges required\" });\n      }\n      req.user.dbUser = user;\n      next();\n    }).catch(() => {\n      res.status(500).json({ error: \"Failed to verify admin status\" });\n    });\n  }\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", requireAdmin, async (req, res) => {\n    try {\n      const [userCount, trackCount, battleCount, beatCount] = await Promise.all([\n        storage.getUserCount(),\n        storage.getTrackCount(),\n        storage.getBattleCount(),\n        storage.getBeatCount()\n      ]);\n      \n      res.json({\n        users: userCount,\n        tracks: trackCount,\n        battles: battleCount,\n        beats: beatCount\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteUser(id);\n      if (success) {\n        res.json({ message: \"User deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"User not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Track routes\n  app.get(\"/api/tracks\", async (req, res) => {\n    try {\n      const tracks = await storage.getTracks();\n      res.json(tracks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tracks\" });\n    }\n  });\n\n  app.get(\"/api/tracks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const track = await storage.getTrack(id);\n      if (track) {\n        res.json(track);\n      } else {\n        res.status(404).json({ error: \"Track not found\" });\n      }\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch track\" });\n    }\n  });\n\n  app.post(\"/api/tracks\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const trackData = insertTrackSchema.parse({\n        ...req.body,\n        artistId: userId,\n        artistName: user.displayName || user.firstName + ' ' + user.lastName\n      });\n      \n      const track = await storage.createTrack(trackData);\n      res.json(track);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid track data\" });\n    }\n  });\n\n  // Battle routes\n  app.get(\"/api/battles\", async (req, res) => {\n    try {\n      const battles = await storage.getBattles();\n      res.json(battles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch battles\" });\n    }\n  });\n\n  app.get(\"/api/battles/active\", async (req, res) => {\n    try {\n      const battles = await storage.getActiveBattles();\n      res.json(battles);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch active battles\" });\n    }\n  });\n\n  app.post(\"/api/battles\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const battleData = insertBattleSchema.parse({\n        ...req.body,\n        contestant1Id: userId,\n        contestant1Name: user.displayName || user.firstName + ' ' + user.lastName\n      });\n      \n      const battle = await storage.createBattle(battleData);\n      res.json(battle);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid battle data\" });\n    }\n  });\n\n  app.post(\"/api/battles/:id/vote\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { contestantId } = req.body;\n      const userId = req.user.claims.sub;\n      \n      const voteData = insertVoteSchema.parse({\n        battleId: id,\n        userId,\n        contestantId\n      });\n      \n      const vote = await storage.createVote(voteData);\n      res.json(vote);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid vote data\" });\n    }\n  });\n\n  // Beat routes\n  app.get(\"/api/beats\", async (req, res) => {\n    try {\n      const beats = await storage.getBeats();\n      res.json(beats);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch beats\" });\n    }\n  });\n\n  app.post(\"/api/beats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const beatData = insertBeatSchema.parse({\n        ...req.body,\n        producerId: userId,\n        producerName: user.displayName || user.firstName + ' ' + user.lastName\n      });\n      \n      const beat = await storage.createBeat(beatData);\n      res.json(beat);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid beat data\" });\n    }\n  });\n\n  // Setup WebSocket server for real-time features\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('Client connected to WebSocket');\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        // Handle different message types\n        switch (data.type) {\n          case 'join_battle':\n            // Broadcast to all clients about new battle participant\n            wss.clients.forEach((client) => {\n              if (client !== ws && client.readyState === WebSocket.OPEN) {\n                client.send(JSON.stringify({\n                  type: 'battle_update',\n                  battleId: data.battleId,\n                  action: 'participant_joined',\n                  userId: data.userId\n                }));\n              }\n            });\n            break;\n\n          case 'vote_cast':\n            // Broadcast vote updates\n            wss.clients.forEach((client) => {\n              if (client !== ws && client.readyState === WebSocket.OPEN) {\n                client.send(JSON.stringify({\n                  type: 'vote_update',\n                  battleId: data.battleId,\n                  contestantId: data.contestantId,\n                  voteCount: data.voteCount\n                }));\n              }\n            });\n            break;\n\n          default:\n            console.log('Unknown message type:', data.type);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  return httpServer;\n}","size_bytes":14941},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type UpsertUser,\n  type Track, type InsertTrack,\n  type Battle, type InsertBattle,\n  type Beat, type InsertBeat,\n  type Collaboration, type InsertCollaboration,\n  type Vote, type InsertVote,\n  type File, type InsertFile,\n  users, tracks, battles, beats, collaborations, votes, files\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, or, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  // Replit Auth operation\n  upsertUser(userData: UpsertUser): Promise<User>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  getUserCount(): Promise<number>;\n  getTrackCount(): Promise<number>;\n  getBattleCount(): Promise<number>;\n  getBeatCount(): Promise<number>;\n  getRecentActivity(): Promise<any[]>;\n  deleteUser(id: string): Promise<boolean>;\n  deleteTrack(id: string): Promise<boolean>;\n  deleteBattle(id: string): Promise<boolean>;\n  \n  // Authentication operations\n  authenticateUser(username: string, password: string): Promise<User | null>;\n  hashPassword(password: string): Promise<string>;\n  \n  // Track operations\n  getTracks(): Promise<Track[]>;\n  getTrack(id: string): Promise<Track | undefined>;\n  getTracksByArtist(artistId: string): Promise<Track[]>;\n  createTrack(track: InsertTrack): Promise<Track>;\n  updateTrack(id: string, updates: Partial<Track>): Promise<Track | undefined>;\n  \n  // Battle operations\n  getBattles(): Promise<Battle[]>;\n  getActiveBattles(): Promise<Battle[]>;\n  getBattle(id: string): Promise<Battle | undefined>;\n  getBattlesByUser(userId: string): Promise<Battle[]>;\n  createBattle(battle: InsertBattle): Promise<Battle>;\n  updateBattle(id: string, updates: Partial<Battle>): Promise<Battle | undefined>;\n  \n  // Beat operations\n  getBeats(): Promise<Beat[]>;\n  getBeat(id: string): Promise<Beat | undefined>;\n  getBeatsByProducer(producerId: string): Promise<Beat[]>;\n  getBeatsByGenre(genre: string): Promise<Beat[]>;\n  createBeat(beat: InsertBeat): Promise<Beat>;\n  updateBeat(id: string, updates: Partial<Beat>): Promise<Beat | undefined>;\n  \n  // Collaboration operations\n  getCollaborations(): Promise<Collaboration[]>;\n  getCollaborationsByTrack(trackId: string): Promise<Collaboration[]>;\n  getCollaborationsByUser(userId: string): Promise<Collaboration[]>;\n  createCollaboration(collaboration: InsertCollaboration): Promise<Collaboration>;\n  updateCollaboration(id: string, updates: Partial<Collaboration>): Promise<Collaboration | undefined>;\n  \n  // Vote operations\n  getVotesByBattle(battleId: string): Promise<Vote[]>;\n  getUserVoteForBattle(battleId: string, userId: string): Promise<Vote | undefined>;\n  createVote(vote: InsertVote): Promise<Vote>;\n  \n  // File operations\n  getFiles(): Promise<File[]>;\n  getFile(id: string): Promise<File | undefined>;\n  getFilesByDirectory(directory: string): Promise<File[]>;\n  getFilesByType(fileType: string): Promise<File[]>;\n  getFilesByUser(userId: string): Promise<File[]>;\n  getFilesByEntity(entityType: string, entityId: string): Promise<File[]>;\n  createFile(file: InsertFile): Promise<File>;\n  updateFile(id: string, updates: Partial<File>): Promise<File | undefined>;\n  deleteFile(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private tracks: Map<string, Track>;\n  private battles: Map<string, Battle>;\n  private beats: Map<string, Beat>;\n  private collaborations: Map<string, Collaboration>;\n  private votes: Map<string, Vote>;\n  private files: Map<string, File>;\n\n  constructor() {\n    this.users = new Map();\n    this.tracks = new Map();\n    this.battles = new Map();\n    this.beats = new Map();\n    this.collaborations = new Map();\n    this.votes = new Map();\n    this.files = new Map();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = insertUser.password ? await this.hashPassword(insertUser.password) : null;\n    const user: User = { \n      ...insertUser,\n      username: insertUser.username || null,\n      email: insertUser.email || null,\n      password: hashedPassword,\n      id,\n      role: insertUser.role || \"fan\",\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      profileImageUrl: insertUser.profileImageUrl || null,\n      displayName: insertUser.displayName || 'User',\n      bio: insertUser.bio || null,\n      avatar: insertUser.avatar || null,\n      followers: 0,\n      following: 0,\n      isAdult: insertUser.isAdult || true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Replit Auth upsert operation for MemStorage\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (!userData.id) {\n      throw new Error('User ID is required for upsert operation');\n    }\n    \n    const displayName = userData.firstName && userData.lastName \n      ? `${userData.firstName} ${userData.lastName}` \n      : userData.firstName || userData.email?.split('@')[0] || 'User';\n    \n    try {\n      // First try to find existing user by ID (primary) or email (secondary)\n      let existingUser = this.users.get(userData.id);\n      \n      // If not found by ID, check by email for account linking\n      if (!existingUser && userData.email) {\n        existingUser = Array.from(this.users.values()).find(user => user.email === userData.email);\n      }\n      \n      if (existingUser) {\n        // Update existing user while preserving important fields\n        console.log(`Updating existing user: ${existingUser.id} (${existingUser.displayName})`);\n        \n        const updatedUser = { \n          ...existingUser,\n          // Update profile information from Replit\n          email: userData.email || existingUser.email,\n          firstName: userData.firstName || existingUser.firstName,\n          lastName: userData.lastName || existingUser.lastName,\n          profileImageUrl: userData.profileImageUrl || existingUser.profileImageUrl,\n          displayName,\n          updatedAt: new Date(),\n          // Preserve existing user data\n          role: existingUser.role, // Don't change existing role\n          username: existingUser.username, // Preserve username if set\n          bio: existingUser.bio, // Preserve bio\n          followers: existingUser.followers,\n          following: existingUser.following,\n        };\n        this.users.set(existingUser.id, updatedUser);\n        return updatedUser;\n      } else {\n        // Create new user with default settings\n        console.log(`Creating new user: ${userData.id} (${displayName})`);\n        \n        const user: User = {\n          id: userData.id,\n          username: null, // Will be set later by user\n          email: userData.email || null,\n          password: null, // Not used with Replit auth\n          firstName: userData.firstName || null,\n          lastName: userData.lastName || null,\n          profileImageUrl: userData.profileImageUrl || null,\n          role: \"fan\", // Default role for new users\n          displayName,\n          bio: null,\n          avatar: null,\n          followers: 0,\n          following: 0,\n          isAdult: true,\n          createdAt: new Date(),\n          updatedAt: userData.updatedAt || new Date()\n        };\n        this.users.set(userData.id, user);\n        return user;\n      }\n    } catch (error) {\n      console.error('Error in upsertUser (MemStorage):', error);\n      throw error;\n    }\n  }\n\n  // Authentication operations\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username) || await this.getUserByEmail(username);\n    if (!user || !user.password) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return await bcrypt.hash(password, 10);\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Track operations\n  async getTracks(): Promise<Track[]> {\n    return Array.from(this.tracks.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getTrack(id: string): Promise<Track | undefined> {\n    return this.tracks.get(id);\n  }\n\n  async getTracksByArtist(artistId: string): Promise<Track[]> {\n    return Array.from(this.tracks.values()).filter(track => track.artistId === artistId);\n  }\n\n  async createTrack(insertTrack: InsertTrack): Promise<Track> {\n    const id = randomUUID();\n    const track: Track = { \n      ...insertTrack, \n      id,\n      duration: insertTrack.duration || null,\n      coverImage: insertTrack.coverImage || null,\n      genre: insertTrack.genre || null,\n      bpm: insertTrack.bpm || null,\n      plays: 0,\n      likes: 0,\n      isCollaborative: insertTrack.isCollaborative || false,\n      collaborators: insertTrack.collaborators || null,\n      createdAt: new Date()\n    };\n    this.tracks.set(id, track);\n    return track;\n  }\n\n  async updateTrack(id: string, updates: Partial<Track>): Promise<Track | undefined> {\n    const track = this.tracks.get(id);\n    if (!track) return undefined;\n    const updatedTrack = { ...track, ...updates };\n    this.tracks.set(id, updatedTrack);\n    return updatedTrack;\n  }\n\n  // Battle operations\n  async getBattles(): Promise<Battle[]> {\n    return Array.from(this.battles.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getActiveBattles(): Promise<Battle[]> {\n    return Array.from(this.battles.values()).filter(battle => battle.status === 'active');\n  }\n\n  async getBattlesByUser(userId: string): Promise<Battle[]> {\n    return Array.from(this.battles.values())\n      .filter(battle => battle.contestant1Id === userId || battle.contestant2Id === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getBattle(id: string): Promise<Battle | undefined> {\n    return this.battles.get(id);\n  }\n\n  async createBattle(insertBattle: InsertBattle): Promise<Battle> {\n    const id = randomUUID();\n    const battle: Battle = { \n      ...insertBattle, \n      id,\n      contestant1Track: null,\n      contestant2Track: null,\n      contestant1Votes: 0,\n      contestant2Votes: 0,\n      status: \"active\",\n      totalVotes: 0,\n      views: 0,\n      endTime: insertBattle.endTime || null,\n      createdAt: new Date()\n    };\n    this.battles.set(id, battle);\n    return battle;\n  }\n\n  async updateBattle(id: string, updates: Partial<Battle>): Promise<Battle | undefined> {\n    const battle = this.battles.get(id);\n    if (!battle) return undefined;\n    const updatedBattle = { ...battle, ...updates };\n    this.battles.set(id, updatedBattle);\n    return updatedBattle;\n  }\n\n  // Beat operations\n  async getBeats(): Promise<Beat[]> {\n    return Array.from(this.beats.values()).filter(beat => beat.isAvailable);\n  }\n\n  async getBeat(id: string): Promise<Beat | undefined> {\n    return this.beats.get(id);\n  }\n\n  async getBeatsByProducer(producerId: string): Promise<Beat[]> {\n    return Array.from(this.beats.values()).filter(beat => beat.producerId === producerId);\n  }\n\n  async getBeatsByGenre(genre: string): Promise<Beat[]> {\n    return Array.from(this.beats.values()).filter(beat => beat.genre === genre);\n  }\n\n  async createBeat(insertBeat: InsertBeat): Promise<Beat> {\n    const id = randomUUID();\n    const beat: Beat = { \n      ...insertBeat, \n      id,\n      coverImage: insertBeat.coverImage || null,\n      tags: insertBeat.tags || null,\n      plays: 0,\n      likes: 0,\n      purchases: 0,\n      isAvailable: true,\n      createdAt: new Date()\n    };\n    this.beats.set(id, beat);\n    return beat;\n  }\n\n  async updateBeat(id: string, updates: Partial<Beat>): Promise<Beat | undefined> {\n    const beat = this.beats.get(id);\n    if (!beat) return undefined;\n    const updatedBeat = { ...beat, ...updates };\n    this.beats.set(id, updatedBeat);\n    return updatedBeat;\n  }\n\n  // Collaboration operations\n  async getCollaborations(): Promise<Collaboration[]> {\n    return Array.from(this.collaborations.values());\n  }\n\n  async getCollaborationsByTrack(trackId: string): Promise<Collaboration[]> {\n    return Array.from(this.collaborations.values()).filter(collab => collab.trackId === trackId);\n  }\n\n  async getCollaborationsByUser(userId: string): Promise<Collaboration[]> {\n    return Array.from(this.collaborations.values()).filter(\n      collab => collab.initiatorId === userId || collab.collaboratorId === userId\n    );\n  }\n\n  async createCollaboration(insertCollaboration: InsertCollaboration): Promise<Collaboration> {\n    const id = randomUUID();\n    const collaboration: Collaboration = { \n      ...insertCollaboration, \n      id,\n      trackId: insertCollaboration.trackId || null,\n      description: insertCollaboration.description || null,\n      status: \"pending\",\n      createdAt: new Date()\n    };\n    this.collaborations.set(id, collaboration);\n    return collaboration;\n  }\n\n  async updateCollaboration(id: string, updates: Partial<Collaboration>): Promise<Collaboration | undefined> {\n    const collaboration = this.collaborations.get(id);\n    if (!collaboration) return undefined;\n    const updatedCollaboration = { ...collaboration, ...updates };\n    this.collaborations.set(id, updatedCollaboration);\n    return updatedCollaboration;\n  }\n\n  // Vote operations\n  async getVotesByBattle(battleId: string): Promise<Vote[]> {\n    return Array.from(this.votes.values()).filter(vote => vote.battleId === battleId);\n  }\n\n  async getUserVoteForBattle(battleId: string, userId: string): Promise<Vote | undefined> {\n    return Array.from(this.votes.values()).find(\n      vote => vote.battleId === battleId && vote.userId === userId\n    );\n  }\n\n  async createVote(insertVote: InsertVote): Promise<Vote> {\n    const id = randomUUID();\n    const vote: Vote = { \n      ...insertVote, \n      id,\n      createdAt: new Date()\n    };\n    this.votes.set(id, vote);\n    return vote;\n  }\n\n  // File operations\n  async getFiles(): Promise<File[]> {\n    return Array.from(this.files.values()).filter(file => file.status === 'active')\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getFile(id: string): Promise<File | undefined> {\n    const file = this.files.get(id);\n    return file?.status === 'active' ? file : undefined;\n  }\n\n  async getFilesByDirectory(directory: string): Promise<File[]> {\n    return Array.from(this.files.values()).filter(\n      file => file.directory === directory && file.status === 'active'\n    );\n  }\n\n  async getFilesByType(fileType: string): Promise<File[]> {\n    return Array.from(this.files.values()).filter(\n      file => file.fileType === fileType && file.status === 'active'\n    );\n  }\n\n  async getFilesByUser(userId: string): Promise<File[]> {\n    return Array.from(this.files.values()).filter(\n      file => file.uploadedBy === userId && file.status === 'active'\n    );\n  }\n\n  async getFilesByEntity(entityType: string, entityId: string): Promise<File[]> {\n    return Array.from(this.files.values()).filter(\n      file => file.relatedEntityType === entityType && \n              file.relatedEntityId === entityId && \n              file.status === 'active'\n    );\n  }\n\n  async createFile(insertFile: InsertFile): Promise<File> {\n    const id = randomUUID();\n    const file: File = { \n      ...insertFile,\n      isPublic: insertFile.isPublic || false,\n      id,\n      metadata: insertFile.metadata || null,\n      relatedEntityType: insertFile.relatedEntityType || null,\n      relatedEntityId: insertFile.relatedEntityId || null,\n      checksum: insertFile.checksum || null,\n      status: \"active\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.files.set(id, file);\n    return file;\n  }\n\n  async updateFile(id: string, updates: Partial<File>): Promise<File | undefined> {\n    const file = this.files.get(id);\n    if (!file || file.status !== 'active') return undefined;\n    const updatedFile = { ...file, ...updates, updatedAt: new Date() };\n    this.files.set(id, updatedFile);\n    return updatedFile;\n  }\n\n  async deleteFile(id: string): Promise<boolean> {\n    const file = this.files.get(id);\n    if (!file) return false;\n    const deletedFile = { ...file, status: \"deleted\", updatedAt: new Date() };\n    this.files.set(id, deletedFile);\n    return true;\n  }\n\n  // Admin operations for MemStorage\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async getUserCount(): Promise<number> {\n    return this.users.size;\n  }\n\n  async getTrackCount(): Promise<number> {\n    return this.tracks.size;\n  }\n\n  async getBattleCount(): Promise<number> {\n    return this.battles.size;\n  }\n\n  async getBeatCount(): Promise<number> {\n    return this.beats.size;\n  }\n\n  async getRecentActivity(): Promise<any[]> {\n    const recentTracks = Array.from(this.tracks.values()).slice(-5);\n    const recentBattles = Array.from(this.battles.values()).slice(-5);\n    return [\n      ...recentTracks.map(track => ({ type: 'track', data: track })),\n      ...recentBattles.map(battle => ({ type: 'battle', data: battle }))\n    ];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    return this.users.delete(id);\n  }\n\n  async deleteTrack(id: string): Promise<boolean> {\n    return this.tracks.delete(id);\n  }\n\n  async deleteBattle(id: string): Promise<boolean> {\n    return this.battles.delete(id);\n  }\n}\n\n// DatabaseStorage implementation using PostgreSQL\nexport class DatabaseStorage implements IStorage {\n  // Authentication operations\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username) || await this.getUserByEmail(username);\n    if (!user || !user.password) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    return await bcrypt.hash(password, 10);\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = insertUser.password ? await this.hashPassword(insertUser.password) : null;\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        password: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Replit Auth upsert operation\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (!userData.id) {\n      throw new Error('User ID is required for upsert operation');\n    }\n    \n    const displayName = userData.firstName && userData.lastName \n      ? `${userData.firstName} ${userData.lastName}` \n      : userData.firstName || userData.email?.split('@')[0] || 'User';\n    \n    try {\n      // First, try to find existing user by ID (primary) or email (secondary)\n      let existingUser: User | undefined;\n      \n      // Check by ID first as it's more reliable\n      if (userData.id) {\n        existingUser = await this.getUser(userData.id);\n      }\n      \n      // If not found by ID, check by email for account linking\n      if (!existingUser && userData.email) {\n        existingUser = await this.getUserByEmail(userData.email);\n      }\n      \n      if (existingUser) {\n        // Update existing user while preserving important fields\n        console.log(`Updating existing user: ${existingUser.id} (${existingUser.displayName})`);\n        \n        const [user] = await db\n          .update(users)\n          .set({\n            // Update profile information from Replit\n            email: userData.email || existingUser.email,\n            firstName: userData.firstName || existingUser.firstName,\n            lastName: userData.lastName || existingUser.lastName,\n            profileImageUrl: userData.profileImageUrl || existingUser.profileImageUrl,\n            displayName,\n            updatedAt: new Date(),\n            // Preserve existing user data\n            role: existingUser.role, // Don't change existing role\n            username: existingUser.username, // Preserve username if set\n            bio: existingUser.bio, // Preserve bio\n            followers: existingUser.followers,\n            following: existingUser.following,\n          })\n          .where(eq(users.id, existingUser.id))\n          .returning();\n        return user;\n      } else {\n        // Create new user with default settings\n        console.log(`Creating new user: ${userData.id} (${displayName})`);\n        \n        const [user] = await db\n          .insert(users)\n          .values({\n            id: userData.id,\n            email: userData.email,\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            profileImageUrl: userData.profileImageUrl,\n            displayName,\n            username: null, // Will be set later by user\n            password: null, // Not used with Replit auth\n            role: 'fan', // Default role for new users\n            bio: null,\n            avatar: null,\n            followers: 0,\n            following: 0,\n            isAdult: true,\n            createdAt: new Date(),\n            updatedAt: userData.updatedAt || new Date(),\n          })\n          .returning();\n        return user;\n      }\n    } catch (error) {\n      console.error('Error in upsertUser:', error);\n      throw error;\n    }\n  }\n\n  // Track operations\n  async getTracks(): Promise<Track[]> {\n    return await db.select().from(tracks);\n  }\n\n  async getTrack(id: string): Promise<Track | undefined> {\n    const [track] = await db.select().from(tracks).where(eq(tracks.id, id));\n    return track || undefined;\n  }\n\n  async getTracksByArtist(artistId: string): Promise<Track[]> {\n    return await db.select().from(tracks).where(eq(tracks.artistId, artistId));\n  }\n\n  async createTrack(track: InsertTrack): Promise<Track> {\n    const [newTrack] = await db.insert(tracks).values(track).returning();\n    return newTrack;\n  }\n\n  async updateTrack(id: string, updates: Partial<Track>): Promise<Track | undefined> {\n    const [track] = await db\n      .update(tracks)\n      .set(updates)\n      .where(eq(tracks.id, id))\n      .returning();\n    return track || undefined;\n  }\n\n  // Battle operations\n  async getBattles(): Promise<Battle[]> {\n    return await db.select().from(battles);\n  }\n\n  async getActiveBattles(): Promise<Battle[]> {\n    return await db.select().from(battles).where(eq(battles.status, 'active'));\n  }\n\n  async getBattle(id: string): Promise<Battle | undefined> {\n    const [battle] = await db.select().from(battles).where(eq(battles.id, id));\n    return battle || undefined;\n  }\n\n  async getBattlesByUser(userId: string): Promise<Battle[]> {\n    return await db.select().from(battles).where(\n      or(eq(battles.contestant1Id, userId), eq(battles.contestant2Id, userId))\n    );\n  }\n\n  async createBattle(battle: InsertBattle): Promise<Battle> {\n    const [newBattle] = await db.insert(battles).values(battle).returning();\n    return newBattle;\n  }\n\n  async updateBattle(id: string, updates: Partial<Battle>): Promise<Battle | undefined> {\n    const [battle] = await db\n      .update(battles)\n      .set(updates)\n      .where(eq(battles.id, id))\n      .returning();\n    return battle || undefined;\n  }\n\n  // Beat operations\n  async getBeats(): Promise<Beat[]> {\n    return await db.select().from(beats);\n  }\n\n  async getBeat(id: string): Promise<Beat | undefined> {\n    const [beat] = await db.select().from(beats).where(eq(beats.id, id));\n    return beat || undefined;\n  }\n\n  async getBeatsByProducer(producerId: string): Promise<Beat[]> {\n    return await db.select().from(beats).where(eq(beats.producerId, producerId));\n  }\n\n  async getBeatsByGenre(genre: string): Promise<Beat[]> {\n    return await db.select().from(beats).where(eq(beats.genre, genre));\n  }\n\n  async createBeat(beat: InsertBeat): Promise<Beat> {\n    const [newBeat] = await db.insert(beats).values(beat).returning();\n    return newBeat;\n  }\n\n  async updateBeat(id: string, updates: Partial<Beat>): Promise<Beat | undefined> {\n    const [beat] = await db\n      .update(beats)\n      .set(updates)\n      .where(eq(beats.id, id))\n      .returning();\n    return beat || undefined;\n  }\n\n  // Collaboration operations\n  async getCollaborations(): Promise<Collaboration[]> {\n    return await db.select().from(collaborations);\n  }\n\n  async getCollaborationsByTrack(trackId: string): Promise<Collaboration[]> {\n    return await db.select().from(collaborations).where(eq(collaborations.trackId, trackId));\n  }\n\n  async getCollaborationsByUser(userId: string): Promise<Collaboration[]> {\n    return await db.select().from(collaborations).where(\n      or(eq(collaborations.initiatorId, userId), eq(collaborations.collaboratorId, userId))\n    );\n  }\n\n  async createCollaboration(collaboration: InsertCollaboration): Promise<Collaboration> {\n    const [newCollaboration] = await db.insert(collaborations).values(collaboration).returning();\n    return newCollaboration;\n  }\n\n  async updateCollaboration(id: string, updates: Partial<Collaboration>): Promise<Collaboration | undefined> {\n    const [collaboration] = await db\n      .update(collaborations)\n      .set(updates)\n      .where(eq(collaborations.id, id))\n      .returning();\n    return collaboration || undefined;\n  }\n\n  // Vote operations\n  async getVotesByBattle(battleId: string): Promise<Vote[]> {\n    return await db.select().from(votes).where(eq(votes.battleId, battleId));\n  }\n\n  async getUserVoteForBattle(battleId: string, userId: string): Promise<Vote | undefined> {\n    const [vote] = await db.select().from(votes).where(\n      and(eq(votes.battleId, battleId), eq(votes.userId, userId))\n    );\n    return vote || undefined;\n  }\n\n  async createVote(vote: InsertVote): Promise<Vote> {\n    const [newVote] = await db.insert(votes).values(vote).returning();\n    return newVote;\n  }\n\n  // File operations  \n  async getFiles(): Promise<File[]> {\n    return await db.select().from(files);\n  }\n\n  async getFile(id: string): Promise<File | undefined> {\n    const [file] = await db.select().from(files).where(eq(files.id, id));\n    return file || undefined;\n  }\n\n  async getFilesByDirectory(directory: string): Promise<File[]> {\n    return await db.select().from(files).where(eq(files.directory, directory));\n  }\n\n  async getFilesByType(fileType: string): Promise<File[]> {\n    return await db.select().from(files).where(eq(files.fileType, fileType));\n  }\n\n  async getFilesByUser(userId: string): Promise<File[]> {\n    return await db.select().from(files).where(eq(files.uploadedBy, userId));\n  }\n\n  async getFilesByEntity(entityType: string, entityId: string): Promise<File[]> {\n    return await db.select().from(files).where(\n      and(eq(files.relatedEntityType, entityType), eq(files.relatedEntityId, entityId))\n    );\n  }\n\n  async createFile(file: InsertFile): Promise<File> {\n    const [newFile] = await db.insert(files).values({\n      ...file,\n      isPublic: file.isPublic || false\n    }).returning();\n    return newFile;\n  }\n\n  async updateFile(id: string, updates: Partial<File>): Promise<File | undefined> {\n    const [file] = await db\n      .update(files)\n      .set(updates)\n      .where(eq(files.id, id))\n      .returning();\n    return file || undefined;\n  }\n\n  async deleteFile(id: string): Promise<boolean> {\n    const result = await db\n      .update(files)\n      .set({ status: \"deleted\", updatedAt: new Date() })\n      .where(eq(files.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Admin operations for DatabaseStorage\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUserCount(): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(users);\n    return result[0].count;\n  }\n\n  async getTrackCount(): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(tracks);\n    return result[0].count;\n  }\n\n  async getBattleCount(): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(battles);\n    return result[0].count;\n  }\n\n  async getBeatCount(): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(beats);\n    return result[0].count;\n  }\n\n  async getRecentActivity(): Promise<any[]> {\n    const recentTracks = await db.select().from(tracks).limit(5);\n    const recentBattles = await db.select().from(battles).limit(5);\n    return [\n      ...recentTracks.map(track => ({ type: 'track', data: track })),\n      ...recentBattles.map(battle => ({ type: 'battle', data: battle }))\n    ];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async deleteTrack(id: string): Promise<boolean> {\n    const result = await db.delete(tracks).where(eq(tracks.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async deleteBattle(id: string): Promise<boolean> {\n    const result = await db.delete(battles).where(eq(battles.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n}\n\n// Use DatabaseStorage for production\nexport const storage = new DatabaseStorage();\n","size_bytes":30977},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\"sessions\", {\n  sid: varchar(\"sid\").primaryKey(),\n  sess: jsonb(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n\n// User storage table - compatible with both custom auth and Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`), // Works for both UUIDs and Replit IDs\n  username: text(\"username\").unique(), // Keep for existing users, optional for Replit users\n  email: text(\"email\").unique(),\n  password: text(\"password\"), // Make optional - not needed for Replit users\n  firstName: text(\"first_name\"), // From Replit profile\n  lastName: text(\"last_name\"), // From Replit profile\n  profileImageUrl: text(\"profile_image_url\"), // From Replit profile\n  role: text(\"role\").notNull().default(\"fan\"), // \"artist\", \"producer\", \"fan\", \"admin\"\n  displayName: text(\"display_name\").notNull(),\n  bio: text(\"bio\"),\n  avatar: text(\"avatar\"), // Keep for backward compatibility\n  followers: integer(\"followers\").default(0),\n  following: integer(\"following\").default(0),\n  isAdult: boolean(\"is_adult\").notNull().default(true), // Replit users are verified adults\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const tracks = pgTable(\"tracks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  artistId: varchar(\"artist_id\").references(() => users.id).notNull(),\n  artistName: text(\"artist_name\").notNull(),\n  audioUrl: text(\"audio_url\").notNull(),\n  coverImage: text(\"cover_image\"),\n  duration: integer(\"duration\"), // in seconds\n  genre: text(\"genre\"),\n  bpm: integer(\"bpm\"),\n  plays: integer(\"plays\").default(0),\n  likes: integer(\"likes\").default(0),\n  isCollaborative: boolean(\"is_collaborative\").default(false),\n  collaborators: text(\"collaborators\").array(), // array of user IDs\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const battles = pgTable(\"battles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  contestant1Id: varchar(\"contestant1_id\").references(() => users.id).notNull(),\n  contestant2Id: varchar(\"contestant2_id\").references(() => users.id).notNull(),\n  contestant1Name: text(\"contestant1_name\").notNull(),\n  contestant2Name: text(\"contestant2_name\").notNull(),\n  contestant1Track: text(\"contestant1_track\"),\n  contestant2Track: text(\"contestant2_track\"),\n  contestant1Votes: integer(\"contestant1_votes\").default(0),\n  contestant2Votes: integer(\"contestant2_votes\").default(0),\n  status: text(\"status\").default(\"active\"), // \"active\", \"completed\", \"pending\"\n  category: text(\"category\").notNull(), // \"freestyle\", \"championship\", \"team\", \"open_mic\"\n  totalVotes: integer(\"total_votes\").default(0),\n  views: integer(\"views\").default(0),\n  endTime: timestamp(\"end_time\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const beats = pgTable(\"beats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  producerId: varchar(\"producer_id\").references(() => users.id).notNull(),\n  producerName: text(\"producer_name\").notNull(),\n  audioUrl: text(\"audio_url\").notNull(),\n  coverImage: text(\"cover_image\"),\n  genre: text(\"genre\").notNull(),\n  bpm: integer(\"bpm\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  licenseType: text(\"license_type\").notNull(), // \"basic\", \"premium\", \"exclusive\"\n  plays: integer(\"plays\").default(0),\n  likes: integer(\"likes\").default(0),\n  purchases: integer(\"purchases\").default(0),\n  tags: text(\"tags\").array(),\n  isAvailable: boolean(\"is_available\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const collaborations = pgTable(\"collaborations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  trackId: varchar(\"track_id\").references(() => tracks.id),\n  trackTitle: text(\"track_title\").notNull(),\n  initiatorId: varchar(\"initiator_id\").references(() => users.id).notNull(),\n  initiatorName: text(\"initiator_name\").notNull(),\n  collaboratorId: varchar(\"collaborator_id\").references(() => users.id).notNull(),\n  collaboratorName: text(\"collaborator_name\").notNull(),\n  role: text(\"role\").notNull(), // \"lead\", \"featured\", \"producer\", \"writer\"\n  description: text(\"description\"),\n  status: text(\"status\").default(\"pending\"), // \"pending\", \"active\", \"completed\", \"declined\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const votes = pgTable(\"votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  battleId: varchar(\"battle_id\").references(() => battles.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  contestantId: varchar(\"contestant_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const files = pgTable(\"files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  originalName: text(\"original_name\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(), // in bytes\n  mimeType: text(\"mime_type\").notNull(),\n  fileType: text(\"file_type\").notNull(), // \"audio\", \"image\", \"video\", \"document\"\n  directory: text(\"directory\").notNull(), // \"tracks\", \"beats\", \"avatars\", \"covers\", \"videos\", \"samples\", \"stems\"\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  isPublic: boolean(\"is_public\").default(false),\n  metadata: jsonb(\"metadata\"), // stores additional file info like duration, dimensions, etc.\n  relatedEntityType: text(\"related_entity_type\"), // \"track\", \"beat\", \"battle\", \"user\", \"collaboration\"\n  relatedEntityId: varchar(\"related_entity_id\"),\n  checksum: text(\"checksum\"), // for file integrity verification\n  status: text(\"status\").default(\"active\"), // \"active\", \"deleted\", \"archived\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// UpsertUser type for Replit Auth - used to create/update users from Replit claims\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  updatedAt: true,\n}).extend({\n  id: z.string(), // Make id required for upsert operations\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  role: true,\n  displayName: true,\n  bio: true,\n  avatar: true,\n  isAdult: true,\n}).extend({\n  role: z.enum([\"artist\", \"producer\", \"fan\", \"admin\"]).optional(),\n  password: z.string().optional(), // Optional for Replit users\n  username: z.string().optional(), // Optional for Replit users\n});\n\nexport const insertTrackSchema = createInsertSchema(tracks).pick({\n  title: true,\n  artistId: true,\n  artistName: true,\n  audioUrl: true,\n  coverImage: true,\n  duration: true,\n  genre: true,\n  bpm: true,\n  isCollaborative: true,\n  collaborators: true,\n});\n\nexport const insertBattleSchema = createInsertSchema(battles).pick({\n  title: true,\n  contestant1Id: true,\n  contestant2Id: true,\n  contestant1Name: true,\n  contestant2Name: true,\n  category: true,\n  endTime: true,\n});\n\nexport const insertBeatSchema = createInsertSchema(beats).pick({\n  title: true,\n  producerId: true,\n  producerName: true,\n  audioUrl: true,\n  coverImage: true,\n  genre: true,\n  bpm: true,\n  price: true,\n  licenseType: true,\n  tags: true,\n});\n\nexport const insertCollaborationSchema = createInsertSchema(collaborations).pick({\n  trackId: true,\n  trackTitle: true,\n  initiatorId: true,\n  initiatorName: true,\n  collaboratorId: true,\n  collaboratorName: true,\n  role: true,\n  description: true,\n});\n\nexport const insertVoteSchema = createInsertSchema(votes).pick({\n  battleId: true,\n  userId: true,\n  contestantId: true,\n});\n\nexport const insertFileSchema = createInsertSchema(files).pick({\n  originalName: true,\n  fileName: true,\n  filePath: true,\n  fileSize: true,\n  mimeType: true,\n  fileType: true,\n  directory: true,\n  uploadedBy: true,\n  isPublic: true,\n  metadata: true,\n  relatedEntityType: true,\n  relatedEntityId: true,\n  checksum: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertTrack = z.infer<typeof insertTrackSchema>;\nexport type InsertBattle = z.infer<typeof insertBattleSchema>;\nexport type InsertBeat = z.infer<typeof insertBeatSchema>;\nexport type InsertCollaboration = z.infer<typeof insertCollaborationSchema>;\nexport type InsertVote = z.infer<typeof insertVoteSchema>;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type Track = typeof tracks.$inferSelect;\nexport type Battle = typeof battles.$inferSelect;\nexport type Beat = typeof beats.$inferSelect;\nexport type Collaboration = typeof collaborations.$inferSelect;\nexport type Vote = typeof votes.$inferSelect;\nexport type File = typeof files.$inferSelect;\n","size_bytes":9381},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Battles from \"@/pages/battles\";\nimport Mixing from \"@/pages/mixing\";\nimport Beats from \"@/pages/beats\";\nimport Live from \"@/pages/live\";\nimport Profile from \"@/pages/profile\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Collaborations from \"@/pages/collaborations\";\nimport Admin from \"@/pages/admin\";\nimport Navigation from \"@/components/navigation\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport FloatingLogin from \"@/components/floating-login\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nfunction Router() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  // Show loading screen while checking authentication (but only briefly)\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-dark-100 text-white\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-purple-500\"></div>\n      </div>\n    );\n  }\n\n  // Determine if we should show the floating login\n  const shouldShowFloatingLogin = !isAuthenticated;\n\n  // Always show the main app, but overlay login widget if needed\n  return (\n    <div className=\"min-h-screen bg-dark-100 text-white\">\n      {/* Main App - Always Visible */}\n      <Navigation />\n      <main className=\"pb-20 md:pb-0\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/battles\" component={Battles} />\n          <Route path=\"/collaborations\" component={Collaborations} />\n          <Route path=\"/beats\" component={Beats} />\n          <Route path=\"/mixing\" component={Mixing} />\n          <Route path=\"/live\" component={Live} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <MobileNav />\n\n      {/* Floating Login Overlay - Show when not authenticated */}\n      {shouldShowFloatingLogin && (\n        <FloatingLogin\n          onSuccess={() => {\n            // The floating login component handles auth refresh - just force a re-render\n            queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    // Apply dark theme by default\n    document.documentElement.classList.add(\"dark\");\n    document.body.className = \"bg-dark-100 text-white font-inter\";\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Router />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2976},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(222.2, 47.4%, 11.2%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(222.2, 84%, 4.9%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n  \n  /* Music Platform Colors */\n  --dark-100: hsl(220, 13%, 8%);\n  --dark-200: hsl(220, 15%, 12%);\n  --dark-300: hsl(220, 14%, 17%);\n  --dark-400: hsl(220, 12%, 22%);\n  --purple-500: hsl(258, 89%, 66%);\n  --purple-600: hsl(262, 83%, 58%);\n  --electric-500: hsl(217, 91%, 60%);\n  --electric-600: hsl(221, 83%, 53%);\n  --success-500: hsl(158, 64%, 52%);\n  --highlight-500: hsl(43, 96%, 56%);\n  --gold-500: hsl(48, 96%, 65%);\n}\n\n.dark {\n  --background: hsl(220, 13%, 8%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(220, 15%, 12%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(220, 15%, 12%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(258, 89%, 66%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(220, 14%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(220, 12%, 22%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(220, 14%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(220, 12%, 22%);\n  --input: hsl(220, 12%, 22%);\n  --ring: hsl(258, 89%, 66%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', sans-serif;\n  }\n  \n  .bg-dark-100 { background-color: var(--dark-100); }\n  .bg-dark-200 { background-color: var(--dark-200); }\n  .bg-dark-300 { background-color: var(--dark-300); }\n  .bg-dark-400 { background-color: var(--dark-400); }\n  .bg-purple-500 { background-color: var(--purple-500); }\n  .bg-purple-600 { background-color: var(--purple-600); }\n  .bg-electric-500 { background-color: var(--electric-500); }\n  .bg-electric-600 { background-color: var(--electric-600); }\n  .bg-success-500 { background-color: var(--success-500); }\n  .bg-highlight-500 { background-color: var(--highlight-500); }\n  .bg-gold-500 { background-color: var(--gold-500); }\n  \n  .text-purple-500 { color: var(--purple-500); }\n  .text-electric-500 { color: var(--electric-500); }\n  .text-success-500 { color: var(--success-500); }\n  .text-highlight-500 { color: var(--highlight-500); }\n  .text-gold-500 { color: var(--gold-500); }\n  \n  .border-purple-500 { border-color: var(--purple-500); }\n  .border-electric-500 { border-color: var(--electric-500); }\n  .border-dark-400 { border-color: var(--dark-400); }\n  \n  .hover\\:bg-purple-600:hover { background-color: var(--purple-600); }\n  .hover\\:bg-electric-600:hover { background-color: var(--electric-600); }\n  .hover\\:bg-dark-300:hover { background-color: var(--dark-300); }\n  .hover\\:bg-dark-400:hover { background-color: var(--dark-400); }\n  \n  .hover\\:text-purple-500:hover { color: var(--purple-500); }\n  .hover\\:text-white:hover { color: white; }\n  \n  .from-purple-500 { --tw-gradient-from: var(--purple-500); }\n  .to-electric-500 { --tw-gradient-to: var(--electric-500); }\n  .via-electric-500 { --tw-gradient-via: var(--electric-500); }\n  .to-success-500 { --tw-gradient-to: var(--success-500); }\n  .from-purple-600 { --tw-gradient-from: var(--purple-600); }\n  .to-electric-600 { --tw-gradient-to: var(--electric-600); }\n  .from-highlight-500 { --tw-gradient-from: var(--highlight-500); }\n  .to-gold-500 { --tw-gradient-to: var(--gold-500); }\n}\n\n@layer components {\n  .music-gradient {\n    @apply bg-gradient-to-r from-purple-500 via-electric-500 to-success-500;\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background-color: rgba(0, 0, 0, 0.2);\n  }\n  \n  .waveform-bar {\n    @apply bg-current;\n    animation: waveform 2s ease-in-out infinite;\n  }\n  \n  @keyframes waveform {\n    0%, 100% { height: 20%; }\n    50% { height: 100%; }\n  }\n  \n  .beat-pulse {\n    animation: beat-pulse 1s ease-in-out infinite;\n  }\n  \n  @keyframes beat-pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n  }\n}\n","size_bytes":4841},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/battle-card.tsx":{"content":"import { type Battle } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users } from \"lucide-react\";\n\ninterface BattleCardProps {\n  battle: Battle;\n  featured?: boolean;\n  onVote?: (battleId: string, contestantId: string) => void;\n  isVoting?: boolean;\n}\n\nexport default function BattleCard({ battle, featured = false, onVote, isVoting = false }: BattleCardProps) {\n  const getPercentages = () => {\n    const total = battle.totalVotes || 0;\n    if (total === 0) return { contestant1: 50, contestant2: 50 };\n    \n    const contestant1Percent = Math.round(((battle.contestant1Votes || 0) / total) * 100);\n    const contestant2Percent = 100 - contestant1Percent;\n    \n    return { contestant1: contestant1Percent, contestant2: contestant2Percent };\n  };\n\n  const percentages = getPercentages();\n\n  const getStatusColor = () => {\n    switch (battle.status) {\n      case 'active': return 'bg-success-500';\n      case 'completed': return 'bg-gray-500';\n      default: return 'bg-highlight-500';\n    }\n  };\n\n  const getCategoryColor = () => {\n    switch (battle.category) {\n      case 'freestyle': return 'text-highlight-500';\n      case 'championship': return 'text-gold-500';\n      case 'team': return 'text-success-500';\n      case 'open_mic': return 'text-purple-500';\n      default: return 'text-purple-500';\n    }\n  };\n\n  return (\n    <Card className={`bg-dark-200 border-dark-400 ${featured ? 'p-8' : ''}`} data-testid={`battle-card-${battle.id}`}>\n      <CardContent className={featured ? 'p-0' : 'p-6'}>\n        {featured && (\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-white mb-4\" data-testid={`battle-title-${battle.id}`}>\n              {battle.title}\n            </h3>\n            <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-400 mb-4\">\n              <Badge className={`${getCategoryColor()} bg-transparent border`} data-testid={`battle-category-${battle.id}`}>\n                {battle.category.replace('_', ' ').toUpperCase()}\n              </Badge>\n              <span className=\"flex items-center\">\n                <Users className=\"w-4 h-4 mr-1\" />\n                {battle.totalVotes?.toLocaleString() || 0} votes\n              </span>\n              {battle.endTime && (\n                <span className=\"flex items-center\">\n                  <Clock className=\"w-4 h-4 mr-1\" />\n                  Ends {new Date(battle.endTime).toLocaleDateString()}\n                </span>\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className={`grid ${featured ? 'grid-cols-3' : 'grid-cols-1 md:grid-cols-3'} gap-8 items-center`}>\n          {/* Contestant 1 */}\n          <div className=\"text-center lg:text-right\">\n            <div className=\"inline-block mb-4\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-purple-500 to-purple-600 rounded-full border-4 border-purple-500 flex items-center justify-center text-xl font-bold text-white\">\n                {battle.contestant1Name.split(' ').map(n => n[0]).join('')}\n              </div>\n            </div>\n            <h4 className=\"text-2xl font-bold mb-2 text-white\" data-testid={`contestant1-name-${battle.id}`}>\n              {battle.contestant1Name}\n            </h4>\n            <p className=\"text-gray-400 mb-4\">The Lightning Strike</p>\n            <div className=\"bg-purple-500 rounded-lg p-4\">\n              <div className=\"text-3xl font-black mb-2 text-white\" data-testid={`contestant1-percentage-${battle.id}`}>\n                {percentages.contestant1}%\n              </div>\n              {onVote && battle.status === 'active' && (\n                <Button \n                  onClick={() => onVote(battle.id, battle.contestant1Id)}\n                  disabled={isVoting}\n                  className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white font-medium transition-all\"\n                  data-testid={`button-vote-contestant1-${battle.id}`}\n                >\n                  {isVoting ? 'Voting...' : `Vote ${battle.contestant1Name.split(' ')[0]}`}\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* VS Section */}\n          <div className=\"text-center\">\n            <div className=\"text-6xl font-black text-gray-600 mb-4\">VS</div>\n            <div className=\"bg-dark-300 rounded-lg p-4\">\n              <div className=\"text-sm text-gray-400 mb-2\">Battle Status</div>\n              <div className={`font-bold ${getCategoryColor()}`} data-testid={`battle-status-${battle.id}`}>\n                {battle.status === 'active' ? 'ACTIVE' : (battle.status || 'active').toUpperCase()}\n              </div>\n              {battle.endTime && battle.status === 'active' && (\n                <div className=\"text-sm text-gray-400 mt-2\">\n                  Ends {new Date(battle.endTime).toLocaleDateString()}\n                </div>\n              )}\n            </div>\n            <Button \n              className=\"mt-4 bg-gradient-to-r from-purple-500 to-electric-500 text-white font-bold hover:from-purple-600 hover:to-electric-600 transition-all\"\n              data-testid={`button-watch-battle-${battle.id}`}\n            >\n              Watch Battle\n            </Button>\n          </div>\n\n          {/* Contestant 2 */}\n          <div className=\"text-center lg:text-left\">\n            <div className=\"inline-block mb-4\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-electric-500 to-electric-600 rounded-full border-4 border-electric-500 flex items-center justify-center text-xl font-bold text-white\">\n                {battle.contestant2Name.split(' ').map(n => n[0]).join('')}\n              </div>\n            </div>\n            <h4 className=\"text-2xl font-bold mb-2 text-white\" data-testid={`contestant2-name-${battle.id}`}>\n              {battle.contestant2Name}\n            </h4>\n            <p className=\"text-gray-400 mb-4\">Wordplay Royalty</p>\n            <div className=\"bg-electric-500 rounded-lg p-4\">\n              <div className=\"text-3xl font-black mb-2 text-white\" data-testid={`contestant2-percentage-${battle.id}`}>\n                {percentages.contestant2}%\n              </div>\n              {onVote && battle.status === 'active' && (\n                <Button \n                  onClick={() => onVote(battle.id, battle.contestant2Id)}\n                  disabled={isVoting}\n                  className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white font-medium transition-all\"\n                  data-testid={`button-vote-contestant2-${battle.id}`}\n                >\n                  {isVoting ? 'Voting...' : `Vote ${battle.contestant2Name.split(' ')[0]}`}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {!featured && (\n          <div className=\"mt-6 pt-4 border-t border-dark-400\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center space-x-4 text-gray-400\">\n                <span data-testid={`battle-votes-${battle.id}`}>\n                  {battle.totalVotes?.toLocaleString() || 0} votes\n                </span>\n                <span data-testid={`battle-views-${battle.id}`}>\n                  {battle.views?.toLocaleString() || 0} views\n                </span>\n              </div>\n              <Badge \n                className={`${getStatusColor()} text-white`}\n                data-testid={`battle-status-badge-${battle.id}`}\n              >\n                {battle.status?.toUpperCase()}\n              </Badge>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7768},"client/src/components/beat-card.tsx":{"content":"import { type Beat } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Heart, ShoppingCart, Eye } from \"lucide-react\";\n\ninterface BeatCardProps {\n  beat: Beat;\n  onPlay?: () => void;\n  onLike?: () => void;\n  onPurchase?: () => void;\n  isPlaying?: boolean;\n  isPurchasing?: boolean;\n}\n\nexport default function BeatCard({ \n  beat, \n  onPlay, \n  onLike, \n  onPurchase, \n  isPlaying = false, \n  isPurchasing = false \n}: BeatCardProps) {\n  \n  const getGenreColor = () => {\n    switch (beat.genre?.toLowerCase()) {\n      case 'trap': return 'bg-highlight-500';\n      case 'boom bap': return 'bg-purple-500';\n      case 'drill': return 'bg-electric-500';\n      case 'r&b': return 'bg-success-500';\n      case 'lo-fi': return 'bg-gray-500';\n      default: return 'bg-purple-500';\n    }\n  };\n\n  const getLicenseColor = () => {\n    switch (beat.licenseType?.toLowerCase()) {\n      case 'basic': return 'text-gray-400';\n      case 'premium': return 'text-highlight-500';\n      case 'exclusive': return 'text-gold-500';\n      default: return 'text-gray-400';\n    }\n  };\n\n  return (\n    <Card className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors group\" data-testid={`beat-card-${beat.id}`}>\n      <CardContent className=\"p-0\">\n        {/* Cover Image / Thumbnail */}\n        <div className=\"aspect-video bg-gradient-to-br from-purple-500 to-electric-500 relative overflow-hidden\">\n          {beat.coverImage ? (\n            <img \n              src={beat.coverImage} \n              alt={beat.title}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full bg-gradient-to-br from-purple-500 to-electric-500 flex items-center justify-center\">\n              <Play className=\"h-16 w-16 text-white opacity-50\" />\n            </div>\n          )}\n          \n          <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n          \n          <div className=\"absolute top-4 left-4\">\n            <Badge className={`${getGenreColor()} text-white font-medium`} data-testid={`beat-genre-${beat.id}`}>\n              {beat.genre?.toUpperCase()}\n            </Badge>\n          </div>\n          \n          <div className=\"absolute top-4 right-4\">\n            <Badge variant=\"secondary\" className=\"bg-black bg-opacity-60 text-white\" data-testid={`beat-bpm-${beat.id}`}>\n              {beat.bpm} BPM\n            </Badge>\n          </div>\n          \n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <Button\n              onClick={onPlay}\n              className={`w-16 h-16 ${getGenreColor()} bg-opacity-80 rounded-full flex items-center justify-center hover:bg-opacity-90 transition-all ${isPlaying ? 'animate-pulse' : ''}`}\n              data-testid={`button-play-beat-${beat.id}`}\n            >\n              <Play className=\"text-white text-xl ml-1\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Beat Information */}\n        <div className=\"p-4\">\n          <h3 className=\"font-bold text-lg text-white mb-2\" data-testid={`beat-title-${beat.id}`}>\n            {beat.title}\n          </h3>\n          <p className=\"text-gray-400 text-sm mb-3\" data-testid={`beat-producer-${beat.id}`}>\n            by @{beat.producerName}\n          </p>\n          \n          {/* Stats */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4 text-gray-400 text-sm\">\n              <span className=\"flex items-center\" data-testid={`beat-plays-${beat.id}`}>\n                <Play className=\"w-4 h-4 mr-1\" />\n                {beat.plays?.toLocaleString() || '0'}\n              </span>\n              <button \n                onClick={onLike}\n                className=\"flex items-center hover:text-red-500 transition-colors\"\n                data-testid={`button-like-beat-${beat.id}`}\n              >\n                <Heart className=\"w-4 h-4 mr-1\" />\n                {beat.likes?.toLocaleString() || '0'}\n              </button>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-xl font-bold text-success-500\" data-testid={`beat-price-${beat.id}`}>\n                ${beat.price}\n              </div>\n              <div className={`text-xs ${getLicenseColor()}`} data-testid={`beat-license-${beat.id}`}>\n                {beat.licenseType?.charAt(0).toUpperCase()}{beat.licenseType?.slice(1)} License\n              </div>\n            </div>\n          </div>\n\n          {/* Tags */}\n          {beat.tags && beat.tags.length > 0 && (\n            <div className=\"flex flex-wrap gap-1 mb-4\">\n              {beat.tags.slice(0, 3).map((tag, index) => (\n                <Badge \n                  key={index} \n                  variant=\"outline\" \n                  className=\"border-dark-400 text-gray-400 text-xs\"\n                  data-testid={`beat-tag-${beat.id}-${index}`}\n                >\n                  #{tag}\n                </Badge>\n              ))}\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=\"flex space-x-2\">\n            <Button \n              onClick={onPurchase}\n              disabled={isPurchasing || !beat.isAvailable}\n              className=\"flex-1 bg-success-500 hover:bg-success-600 text-white font-medium transition-colors disabled:opacity-50\"\n              data-testid={`button-purchase-beat-${beat.id}`}\n            >\n              {isPurchasing ? 'Processing...' : beat.isAvailable ? 'Buy License' : 'Sold Out'}\n            </Button>\n            <Button \n              variant=\"outline\"\n              className=\"bg-dark-300 hover:bg-dark-400 text-gray-300 border-dark-400 px-3 transition-colors\"\n              data-testid={`button-cart-beat-${beat.id}`}\n            >\n              <ShoppingCart className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Purchase count */}\n          {beat.purchases && beat.purchases > 0 && (\n            <div className=\"mt-3 text-xs text-gray-400 text-center\" data-testid={`beat-purchases-${beat.id}`}>\n              {beat.purchases} license{beat.purchases !== 1 ? 's' : ''} sold\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6349},"client/src/components/mixing-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { type Track, type Collaboration } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft, \n  Play, \n  Pause, \n  Square, \n  Volume2, \n  Mic, \n  Music, \n  Plus, \n  Undo, \n  Redo, \n  Save,\n  Download,\n  Share2,\n  Users\n} from \"lucide-react\";\nimport WaveformVisualizer from \"./waveform-visualizer\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MixingInterfaceProps {\n  projectId: string;\n  onBack: () => void;\n}\n\ninterface MixingTrack {\n  id: string;\n  name: string;\n  artist: string;\n  type: 'beat' | 'vocals' | 'instrument';\n  volume: number;\n  pan: number;\n  muted: boolean;\n  solo: boolean;\n  effects: string[];\n  audioUrl?: string;\n  waveformData: number[];\n}\n\nexport default function MixingInterface({ projectId, onBack }: MixingInterfaceProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [masterVolume, setMasterVolume] = useState([75]);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(180); // 3 minutes default\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock mixing tracks - in real app, fetch from project data\n  const [tracks, setTracks] = useState<MixingTrack[]>([\n    {\n      id: '1',\n      name: 'Hip Hop Beat 120 BPM',\n      artist: '@BeatMaster',\n      type: 'beat',\n      volume: 80,\n      pan: 0,\n      muted: false,\n      solo: false,\n      effects: [],\n      waveformData: Array.from({length: 200}, () => Math.random() * 100)\n    },\n    {\n      id: '2',\n      name: 'Main Vocals - Verse 1',\n      artist: '@MCThunder',\n      type: 'vocals',\n      volume: 75,\n      pan: 0,\n      muted: false,\n      solo: false,\n      effects: ['Reverb'],\n      waveformData: Array.from({length: 200}, () => Math.random() * 80)\n    }\n  ]);\n\n  const [selectedEffects, setSelectedEffects] = useState<string[]>(['Reverb']);\n  const availableEffects = ['Reverb', 'Delay', 'Chorus', 'Auto-Tune', 'Distortion', 'EQ'];\n\n  const { data: collaborations } = useQuery<Collaboration[]>({\n    queryKey: [\"/api/collaborations\", { trackId: projectId }],\n  });\n\n  const saveMutation = useMutation({\n    mutationFn: async () => {\n      // In real implementation, save mixing state\n      return new Promise(resolve => setTimeout(resolve, 1000));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Project saved!\",\n        description: \"Your mixing session has been saved.\",\n      });\n    },\n  });\n\n  const exportMutation = useMutation({\n    mutationFn: async () => {\n      // In real implementation, export mixed audio\n      return new Promise(resolve => setTimeout(resolve, 2000));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export complete!\",\n        description: \"Your mixed track is ready for download.\",\n      });\n    },\n  });\n\n  const updateTrack = (trackId: string, updates: Partial<MixingTrack>) => {\n    setTracks(prev => prev.map(track => \n      track.id === trackId ? { ...track, ...updates } : track\n    ));\n  };\n\n  const toggleEffect = (effect: string) => {\n    setSelectedEffects(prev => \n      prev.includes(effect) \n        ? prev.filter(e => e !== effect)\n        : [...prev, effect]\n    );\n  };\n\n  const addNewTrack = () => {\n    const newTrack: MixingTrack = {\n      id: Date.now().toString(),\n      name: 'New Layer',\n      artist: '@You',\n      type: 'vocals',\n      volume: 75,\n      pan: 0,\n      muted: false,\n      solo: false,\n      effects: [],\n      waveformData: Array.from({length: 200}, () => Math.random() * 60)\n    };\n    setTracks(prev => [...prev, newTrack]);\n  };\n\n  const getTrackIcon = (type: string) => {\n    switch (type) {\n      case 'beat': return Music;\n      case 'vocals': return Mic;\n      case 'instrument': return Music;\n      default: return Music;\n    }\n  };\n\n  const getTrackColor = (type: string) => {\n    switch (type) {\n      case 'beat': return 'bg-highlight-500';\n      case 'vocals': return 'bg-purple-500';\n      case 'instrument': return 'bg-electric-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  // Simulate playback timer\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isPlaying) {\n      interval = setInterval(() => {\n        setCurrentTime(prev => {\n          if (prev >= duration) {\n            setIsPlaying(false);\n            return 0;\n          }\n          return prev + 0.1;\n        });\n      }, 100);\n    }\n    return () => clearInterval(interval);\n  }, [isPlaying, duration]);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark-100\">\n      {/* Header */}\n      <div className=\"bg-dark-200 border-b border-dark-400 p-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              onClick={onBack}\n              className=\"text-gray-400 hover:text-white\"\n              data-testid=\"button-back-to-mixing\"\n            >\n              <ArrowLeft className=\"w-5 h-5 mr-2\" />\n              Back to Studio\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\" data-testid=\"project-title\">\n                {projectId === 'community-cypher' ? 'City Lights Cypher' : 'Street Symphony'}\n              </h1>\n              <p className=\"text-gray-400 text-sm\">Collaborative Mix Session</p>\n            </div>\n          </div>\n\n          {/* Transport Controls */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-sm text-gray-400 font-mono\" data-testid=\"playback-time\">\n              {formatTime(currentTime)} / {formatTime(duration)}\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsPlaying(!isPlaying)}\n              className=\"border-success-500 text-success-500 hover:bg-success-500 hover:text-white\"\n              data-testid=\"button-play-pause\"\n            >\n              {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => {\n                setIsPlaying(false);\n                setCurrentTime(0);\n              }}\n              className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n              data-testid=\"button-stop\"\n            >\n              <Square className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Track Layers - Main Area */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between text-white\">\n                  <span>Track Layers</span>\n                  <Button\n                    onClick={addNewTrack}\n                    className=\"bg-success-500 hover:bg-success-600 text-white\"\n                    data-testid=\"button-add-track\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Layer\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {tracks.map((track) => {\n                  const TrackIcon = getTrackIcon(track.type);\n                  \n                  return (\n                    <div key={track.id} className=\"bg-dark-300 rounded-lg p-4\" data-testid={`track-${track.id}`}>\n                      {/* Track Header */}\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-8 h-8 ${getTrackColor(track.type)} rounded-full flex items-center justify-center`}>\n                            <TrackIcon className=\"text-sm text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-white\" data-testid={`track-name-${track.id}`}>\n                              {track.name}\n                            </div>\n                            <div className=\"text-sm text-gray-400\" data-testid={`track-artist-${track.id}`}>\n                              {track.artist}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => updateTrack(track.id, { muted: !track.muted })}\n                            className={track.muted ? \"text-red-500\" : \"text-gray-400 hover:text-white\"}\n                            data-testid={`button-mute-${track.id}`}\n                          >\n                            M\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => updateTrack(track.id, { solo: !track.solo })}\n                            className={track.solo ? \"text-yellow-500\" : \"text-gray-400 hover:text-white\"}\n                            data-testid={`button-solo-${track.id}`}\n                          >\n                            S\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-success-500 hover:text-success-400\"\n                            data-testid={`button-play-track-${track.id}`}\n                          >\n                            <Play className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Waveform */}\n                      <div className=\"mb-4\">\n                        <WaveformVisualizer \n                          data={track.waveformData} \n                          color={getTrackColor(track.type).replace('bg-', '')}\n                          isPlaying={isPlaying}\n                          currentTime={currentTime}\n                          duration={duration}\n                        />\n                      </div>\n\n                      {/* Track Controls */}\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-xs text-gray-400 mb-2 block\">Volume</label>\n                          <div className=\"flex items-center space-x-2\">\n                            <Volume2 className=\"w-4 h-4 text-gray-400\" />\n                            <Slider\n                              value={[track.volume]}\n                              onValueChange={([value]) => updateTrack(track.id, { volume: value })}\n                              max={100}\n                              step={1}\n                              className=\"flex-1\"\n                              data-testid={`slider-volume-${track.id}`}\n                            />\n                            <span className=\"text-xs text-gray-400 w-8\">{track.volume}</span>\n                          </div>\n                        </div>\n                        <div>\n                          <label className=\"text-xs text-gray-400 mb-2 block\">Pan</label>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-xs text-gray-400\">L</span>\n                            <Slider\n                              value={[track.pan + 50]}\n                              onValueChange={([value]) => updateTrack(track.id, { pan: value - 50 })}\n                              max={100}\n                              step={1}\n                              className=\"flex-1\"\n                              data-testid={`slider-pan-${track.id}`}\n                            />\n                            <span className=\"text-xs text-gray-400\">R</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n\n                {/* Add Track Placeholder */}\n                <div className=\"bg-dark-300 border-2 border-dashed border-gray-600 rounded-lg p-8\">\n                  <div className=\"text-center\">\n                    <Plus className=\"w-8 h-8 text-gray-500 mx-auto mb-3\" />\n                    <div className=\"text-gray-400 mb-3\">Add your layer to this track</div>\n                    <Button \n                      onClick={addNewTrack}\n                      className=\"bg-success-500 hover:bg-success-600 text-white\"\n                      data-testid=\"button-record-vocals\"\n                    >\n                      <Mic className=\"w-4 h-4 mr-2\" />\n                      Record Vocals\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Mixing Controls - Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Master Controls */}\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Master Controls</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Master Volume */}\n                <div>\n                  <label className=\"text-sm text-gray-400 mb-2 block\">Master Volume</label>\n                  <div className=\"flex items-center space-x-3\">\n                    <Volume2 className=\"w-4 h-4 text-gray-400\" />\n                    <Slider\n                      value={masterVolume}\n                      onValueChange={setMasterVolume}\n                      max={100}\n                      step={1}\n                      className=\"flex-1\"\n                      data-testid=\"slider-master-volume\"\n                    />\n                    <span className=\"text-xs text-gray-400 w-8\">{masterVolume[0]}</span>\n                  </div>\n                </div>\n\n                {/* Effects */}\n                <div>\n                  <label className=\"text-sm text-gray-400 mb-3 block\">Audio Effects</label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {availableEffects.map((effect) => (\n                      <Button\n                        key={effect}\n                        variant={selectedEffects.includes(effect) ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => toggleEffect(effect)}\n                        className={selectedEffects.includes(effect) \n                          ? \"bg-purple-500 text-white\" \n                          : \"bg-dark-300 text-gray-400 border-dark-400 hover:text-white\"\n                        }\n                        data-testid={`button-effect-${effect.toLowerCase()}`}\n                      >\n                        {effect}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Active Collaborators */}\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-white\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  Active Collaborators\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {/* Mock collaborators */}\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-highlight-500 rounded-full flex items-center justify-center text-sm font-bold text-white\">\n                    B\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm text-white\">BeatMaster</div>\n                    <Badge variant=\"outline\" className=\"border-success-500 text-success-500 text-xs\">\n                      Online\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-sm font-bold text-white\">\n                    M\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm text-white\">MCThunder</div>\n                    <Badge variant=\"outline\" className=\"border-success-500 text-success-500 text-xs\">\n                      Online\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gray-500 rounded-full flex items-center justify-center text-sm font-bold text-white\">\n                    Y\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm text-white\">You</div>\n                    <Badge variant=\"outline\" className=\"border-success-500 text-success-500 text-xs\">\n                      Online\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Project Actions */}\n        <Card className=\"bg-dark-200 border-dark-400 mt-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"ghost\"\n                  className=\"text-gray-400 hover:text-white\"\n                  data-testid=\"button-undo\"\n                >\n                  <Undo className=\"w-4 h-4 mr-2\" />\n                  Undo\n                </Button>\n                <Button \n                  variant=\"ghost\"\n                  className=\"text-gray-400 hover:text-white\"\n                  data-testid=\"button-redo\"\n                >\n                  <Redo className=\"w-4 h-4 mr-2\" />\n                  Redo\n                </Button>\n                <Button \n                  onClick={() => saveMutation.mutate()}\n                  disabled={saveMutation.isPending}\n                  className=\"bg-dark-400 hover:bg-dark-300 text-white\"\n                  data-testid=\"button-save-project\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {saveMutation.isPending ? 'Saving...' : 'Save'}\n                </Button>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => exportMutation.mutate()}\n                  disabled={exportMutation.isPending}\n                  className=\"border-dark-400 text-gray-300 hover:text-white\"\n                  data-testid=\"button-export-mix\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  {exportMutation.isPending ? 'Exporting...' : 'Export Mix'}\n                </Button>\n                <Button \n                  className=\"bg-gradient-to-r from-purple-500 to-electric-500 hover:from-purple-600 hover:to-electric-600 text-white font-medium\"\n                  data-testid=\"button-publish-track\"\n                >\n                  <Share2 className=\"w-4 h-4 mr-2\" />\n                  Publish Track\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20290},"client/src/components/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Zap, Plus, Music, User } from \"lucide-react\";\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-dark-200 border-t border-dark-400 md:hidden z-40\">\n      <div className=\"flex items-center justify-around py-2\">\n        <Link href=\"/\">\n          <div className=\"flex flex-col items-center py-2 px-1\" data-testid=\"mobile-nav-feed\">\n            <Home className={`text-lg mb-1 ${location === \"/\" ? \"text-purple-500\" : \"text-gray-400\"}`} />\n            <span className={`text-xs ${location === \"/\" ? \"text-purple-500\" : \"text-gray-400\"}`}>Feed</span>\n          </div>\n        </Link>\n        \n        <Link href=\"/battles\">\n          <div className=\"flex flex-col items-center py-2 px-1\" data-testid=\"mobile-nav-battles\">\n            <Zap className={`text-lg mb-1 ${location === \"/battles\" ? \"text-red-500\" : \"text-gray-400\"}`} />\n            <span className={`text-xs ${location === \"/battles\" ? \"text-red-500\" : \"text-gray-400\"}`}>Battles</span>\n          </div>\n        </Link>\n        \n        <Link href=\"/live\">\n          <div className=\"flex flex-col items-center py-2 px-1\" data-testid=\"mobile-nav-live\">\n            <div className=\"w-8 h-8 bg-red-500 rounded-full flex items-center justify-center mb-1 animate-pulse relative\">\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-400 rounded-full animate-ping\"></div>\n              <span className=\"text-white text-xs font-bold\">🔴</span>\n            </div>\n            <span className=\"text-xs text-red-500 font-bold\">LIVE</span>\n          </div>\n        </Link>\n        \n        <Link href=\"/beats\">\n          <div className=\"flex flex-col items-center py-2 px-1\" data-testid=\"mobile-nav-beats\">\n            <Music className={`text-lg mb-1 ${location === \"/beats\" ? \"text-purple-500\" : \"text-gray-400\"}`} />\n            <span className={`text-xs ${location === \"/beats\" ? \"text-purple-500\" : \"text-gray-400\"}`}>Beats</span>\n          </div>\n        </Link>\n        \n        <Link href=\"/collaborations\">\n          <div className=\"flex flex-col items-center py-2 px-1\" data-testid=\"mobile-nav-collaborations\">\n            <User className={`text-lg mb-1 ${location === \"/collaborations\" ? \"text-purple-500\" : \"text-gray-400\"}`} />\n            <span className={`text-xs ${location === \"/collaborations\" ? \"text-purple-500\" : \"text-gray-400\"}`}>Collabs</span>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2542},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Music, Plus, LogOut, User, Shield } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  return (\n    <header className=\"bg-dark-200 border-b border-dark-400 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" data-testid=\"link-home\">\n            <div className=\"flex items-center space-x-3 hover:opacity-80 transition-opacity\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-electric-500 rounded-xl flex items-center justify-center\">\n                <Music className=\"text-white text-lg\" />\n              </div>\n              <span className=\"text-xl font-bold bg-gradient-to-r from-purple-500 to-electric-500 bg-clip-text text-transparent\">\n                Viral Views\n              </span>\n            </div>\n          </Link>\n\n          {/* Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\" className={`font-medium transition-colors ${\n              location === \"/\" ? \"text-white\" : \"text-gray-400 hover:text-purple-500\"\n            }`} data-testid=\"nav-feed\">\n              Feed\n            </Link>\n            <Link href=\"/battles\" className={`font-medium transition-colors ${\n              location === \"/battles\" ? \"text-white\" : \"text-gray-400 hover:text-purple-500\"\n            }`} data-testid=\"nav-battles\">\n              Battles\n            </Link>\n            <Link href=\"/mixing\" className={`font-medium transition-colors ${\n              location === \"/mixing\" ? \"text-white\" : \"text-gray-400 hover:text-purple-500\"\n            }`} data-testid=\"nav-mixing\">\n              Mix\n            </Link>\n            <Link href=\"/beats\" className={`font-medium transition-colors ${\n              location === \"/beats\" ? \"text-white\" : \"text-gray-400 hover:text-purple-500\"\n            }`} data-testid=\"nav-beats\">\n              Beats\n            </Link>\n            <Link href=\"/collaborations\" className={`font-medium transition-colors ${\n              location === \"/collaborations\" ? \"text-white\" : \"text-gray-400 hover:text-purple-500\"\n            }`} data-testid=\"nav-collaborations\">\n              Collabs\n            </Link>\n            <Link href=\"/live\" className={`font-medium transition-colors ${\n              location === \"/live\" ? \"text-white\" : \"text-gray-400 hover:text-purple-500\"\n            }`} data-testid=\"nav-live\">\n              Live\n            </Link>\n            {user?.role === 'admin' && (\n              <Link href=\"/admin\" className={`font-medium transition-colors ${\n                location === \"/admin\" ? \"text-red-500\" : \"text-gray-400 hover:text-red-500\"\n              }`} data-testid=\"nav-admin\">\n                Admin\n              </Link>\n            )}\n          </nav>\n\n          {/* User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              className=\"bg-purple-500 hover:bg-purple-600 text-white font-medium\"\n              data-testid=\"button-create\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create\n            </Button>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"flex items-center space-x-2 hover:bg-dark-300\"\n                  data-testid=\"button-user-menu\"\n                >\n                  {user?.avatar ? (\n                    <img\n                      src={user.avatar}\n                      alt={user.displayName}\n                      className=\"w-8 h-8 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-highlight-500 to-gold-500 rounded-full flex items-center justify-center\">\n                      <User className=\"w-4 h-4 text-white\" />\n                    </div>\n                  )}\n                  <span className=\"hidden md:block text-sm font-medium\">{user?.displayName}</span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuLabel>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\">{user?.displayName}</p>\n                    <p className=\"text-xs leading-none text-muted-foreground\">\n                      @{user?.username} • {user?.role}\n                    </p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <Link href=\"/profile\">\n                  <DropdownMenuItem data-testid=\"menu-profile\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    <span>Profile</span>\n                  </DropdownMenuItem>\n                </Link>\n                {user?.role === 'admin' && (\n                  <Link href=\"/admin\">\n                    <DropdownMenuItem data-testid=\"menu-admin\">\n                      <Shield className=\"mr-2 h-4 w-4 text-red-500\" />\n                      <span className=\"text-red-500\">Admin Panel</span>\n                    </DropdownMenuItem>\n                  </Link>\n                )}\n                <DropdownMenuSeparator />\n                <DropdownMenuItem \n                  onClick={() => logout()}\n                  className=\"text-red-400 focus:text-red-400\"\n                  data-testid=\"menu-logout\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6211},"client/src/components/video-card.tsx":{"content":"import { useState } from \"react\";\nimport { type Track } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Heart, Eye, Users } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface VideoCardProps {\n  track: Track;\n}\n\nexport default function VideoCard({ track }: VideoCardProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const queryClient = useQueryClient();\n\n  const playMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"PATCH\", `/api/tracks/${track.id}/play`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tracks\"] });\n    },\n  });\n\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"PATCH\", `/api/tracks/${track.id}/like`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tracks\"] });\n    },\n  });\n\n  const handlePlay = () => {\n    setIsPlaying(!isPlaying);\n    if (!isPlaying) {\n      playMutation.mutate();\n    }\n  };\n\n  const handleLike = () => {\n    likeMutation.mutate();\n  };\n\n  const getBadgeInfo = () => {\n    if (track.isCollaborative) {\n      return { label: \"COLLAB\", color: \"bg-success-500\" };\n    }\n    if (track.genre) {\n      return { label: track.genre.toUpperCase(), color: \"bg-purple-500\" };\n    }\n    return { label: \"TRACK\", color: \"bg-electric-500\" };\n  };\n\n  const badgeInfo = getBadgeInfo();\n\n  return (\n    <div className=\"bg-dark-300 rounded-xl overflow-hidden hover:bg-dark-400 transition-colors group cursor-pointer\" data-testid={`video-card-${track.id}`}>\n      {/* Thumbnail */}\n      <div className=\"aspect-video bg-gradient-to-br from-purple-500 to-electric-500 relative overflow-hidden\">\n        {track.coverImage ? (\n          <img \n            src={track.coverImage} \n            alt={track.title}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full bg-gradient-to-br from-purple-500 to-electric-500 flex items-center justify-center\">\n            <Play className=\"h-16 w-16 text-white opacity-50\" />\n          </div>\n        )}\n        \n        <div className=\"absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-20 transition-all\"></div>\n        \n        <div className=\"absolute top-4 left-4\">\n          <Badge className={`${badgeInfo.color} text-white`} data-testid={`track-badge-${track.id}`}>\n            {badgeInfo.label}\n          </Badge>\n        </div>\n        \n        {track.duration && (\n          <div className=\"absolute bottom-4 right-4\">\n            <Badge variant=\"secondary\" className=\"bg-black bg-opacity-60 text-white\" data-testid={`track-duration-${track.id}`}>\n              {Math.floor(track.duration / 60)}:{(track.duration % 60).toString().padStart(2, '0')}\n            </Badge>\n          </div>\n        )}\n        \n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <Button\n            onClick={handlePlay}\n            className={`w-16 h-16 ${isPlaying ? 'bg-red-500 hover:bg-red-600' : 'bg-white bg-opacity-20 hover:bg-opacity-30'} rounded-full flex items-center justify-center transition-all`}\n            data-testid={`button-play-${track.id}`}\n          >\n            <Play className={`text-white text-xl ${isPlaying ? '' : 'ml-1'}`} />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"p-4\">\n        <h3 className=\"font-bold text-lg mb-2 text-white\" data-testid={`track-title-${track.id}`}>\n          {track.title}\n        </h3>\n        <p className=\"text-gray-400 text-sm mb-3\" data-testid={`track-artist-${track.id}`}>\n          @{track.artistName}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4 text-gray-400 text-sm\">\n            <span className=\"flex items-center\" data-testid={`track-views-${track.id}`}>\n              <Eye className=\"w-4 h-4 mr-1\" />\n              {track.plays?.toLocaleString() || '0'}\n            </span>\n            <button \n              onClick={handleLike}\n              className=\"flex items-center hover:text-red-500 transition-colors\"\n              data-testid={`button-like-${track.id}`}\n            >\n              <Heart className=\"w-4 h-4 mr-1\" />\n              {track.likes?.toLocaleString() || '0'}\n            </button>\n          </div>\n          \n          {track.isCollaborative && (\n            <div className=\"flex items-center text-success-500 text-sm font-medium\">\n              <Users className=\"w-4 h-4 mr-1\" />\n              <span data-testid={`track-collaborators-${track.id}`}>\n                {track.collaborators?.length || 0} collabs\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4954},"client/src/components/waveform-visualizer.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ninterface WaveformVisualizerProps {\n  data: number[];\n  color?: string;\n  isPlaying?: boolean;\n  currentTime?: number;\n  duration?: number;\n  height?: number;\n  className?: string;\n}\n\nexport default function WaveformVisualizer({ \n  data, \n  color = 'purple-500', \n  isPlaying = false,\n  currentTime = 0,\n  duration = 180,\n  height = 60,\n  className = \"\"\n}: WaveformVisualizerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    if (!canvas || !container) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const rect = container.getBoundingClientRect();\n    canvas.width = rect.width * window.devicePixelRatio;\n    canvas.height = height * window.devicePixelRatio;\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${height}px`;\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, rect.width, height);\n\n    // Calculate bar width and spacing\n    const barWidth = Math.max(1, (rect.width - data.length) / data.length);\n    const barSpacing = 1;\n\n    // Calculate progress\n    const progress = duration > 0 ? currentTime / duration : 0;\n    const progressX = progress * rect.width;\n\n    // Draw waveform bars\n    data.forEach((value, index) => {\n      const barHeight = (value / 100) * height * 0.8;\n      const x = index * (barWidth + barSpacing);\n      const y = (height - barHeight) / 2;\n\n      // Choose color based on playback progress\n      const isPast = x < progressX;\n      let fillColor: string;\n\n      switch (color) {\n        case 'highlight-500':\n          fillColor = isPast ? '#F59E0B' : 'rgba(245, 158, 11, 0.3)';\n          break;\n        case 'purple-500':\n          fillColor = isPast ? '#8B5CF6' : 'rgba(139, 92, 246, 0.3)';\n          break;\n        case 'electric-500':\n          fillColor = isPast ? '#3B82F6' : 'rgba(59, 130, 246, 0.3)';\n          break;\n        case 'success-500':\n          fillColor = isPast ? '#10B981' : 'rgba(16, 185, 129, 0.3)';\n          break;\n        default:\n          fillColor = isPast ? '#8B5CF6' : 'rgba(139, 92, 246, 0.3)';\n      }\n\n      ctx.fillStyle = fillColor;\n      ctx.fillRect(x, y, barWidth, barHeight);\n    });\n\n    // Draw playhead if playing\n    if (isPlaying && progress > 0) {\n      ctx.strokeStyle = '#FFFFFF';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(progressX, 0);\n      ctx.lineTo(progressX, height);\n      ctx.stroke();\n    }\n\n  }, [data, color, isPlaying, currentTime, duration, height]);\n\n  // Redraw on resize\n  useEffect(() => {\n    const handleResize = () => {\n      // Trigger redraw by updating a dummy state or calling the effect dependencies\n      const canvas = canvasRef.current;\n      if (canvas) {\n        // Force redraw by clearing and redrawing\n        const event = new CustomEvent('redraw');\n        canvas.dispatchEvent(event);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`relative w-full bg-dark-200 rounded overflow-hidden ${className}`}\n      style={{ height: `${height}px` }}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full\"\n        style={{ height: `${height}px` }}\n      />\n      \n      {/* Fallback for non-canvas environments */}\n      <div className=\"flex items-end justify-center h-full space-x-1 overflow-hidden md:hidden\">\n        {data.slice(0, 50).map((value, index) => {\n          const barHeight = (value / 100) * height * 0.8;\n          const isPast = isPlaying && (index / 50) < (currentTime / duration);\n          \n          let colorClass: string;\n          switch (color) {\n            case 'highlight-500':\n              colorClass = isPast ? 'bg-highlight-500' : 'bg-highlight-500/30';\n              break;\n            case 'purple-500':\n              colorClass = isPast ? 'bg-purple-500' : 'bg-purple-500/30';\n              break;\n            case 'electric-500':\n              colorClass = isPast ? 'bg-electric-500' : 'bg-electric-500/30';\n              break;\n            case 'success-500':\n              colorClass = isPast ? 'bg-success-500' : 'bg-success-500/30';\n              break;\n            default:\n              colorClass = isPast ? 'bg-purple-500' : 'bg-purple-500/30';\n          }\n\n          return (\n            <div\n              key={index}\n              className={`w-1 ${colorClass} transition-colors duration-150`}\n              style={{ height: `${Math.max(2, barHeight)}px` }}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4869},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/battles.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport LiveBattleSystem from \"@/components/live-battle-system\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Battles() {\n  const { user } = useAuth();\n  const [isParticipating, setIsParticipating] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-dark-100 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-6xl font-black mb-4\">\n            <span className=\"text-red-500\">🔴 LIVE</span> Rap <span className=\"text-electric-500\">Battles</span>\n          </h1>\n          <p className=\"text-gray-400 text-xl max-w-2xl mx-auto\">\n            Join live streaming battles with real-time audio. Battle opponents, vote live, climb ranks.\n          </p>\n          <div className=\"mt-8\">\n            <Link href=\"/live\">\n              <Button className=\"bg-red-500 hover:bg-red-600 text-white font-bold px-8 py-3 text-lg animate-pulse mr-4\">\n                🔴 START LIVE BATTLE\n              </Button>\n            </Link>\n            <Button \n              variant=\"outline\" \n              className=\"border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white\"\n              onClick={() => setIsParticipating(!isParticipating)}\n            >\n              {isParticipating ? \"Leave Battle\" : \"Join Active Battle\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Live Battle Arena */}\n        <div className=\"mb-8\">\n          <LiveBattleSystem\n            isParticipating={isParticipating}\n            onJoinBattle={() => setIsParticipating(true)}\n            onLeaveBattle={() => setIsParticipating(false)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1870},"client/src/pages/beats.tsx":{"content":"import BeatList from '@/components/beats/beat-list';\n\nexport default function Beats() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <BeatList />\n    </div>\n  );\n}","size_bytes":185},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Track } from \"@shared/schema\";\nimport VideoCard from \"@/components/video-card\";\nimport BattleCard from \"@/components/battle-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const [contentFilter, setContentFilter] = useState<'all' | 'battles' | 'freestyles' | 'collaborations'>('all');\n  \n  const { data: tracks, isLoading: tracksLoading } = useQuery<Track[]>({\n    queryKey: [\"/api/tracks\"],\n  });\n\n  const { data: battles = [], isLoading: battlesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/battles/active\"],\n  });\n\n  // Filter tracks based on selected content type\n  const filteredTracks = tracks?.filter(track => {\n    if (contentFilter === 'all') return true;\n    if (contentFilter === 'battles') return track.genre === 'battle' || track.isCollaborative;\n    if (contentFilter === 'freestyles') return track.genre === 'freestyle';\n    if (contentFilter === 'collaborations') return track.isCollaborative;\n    return true;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-dark-100\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat opacity-20\"\n          style={{\n            backgroundImage: \"url('https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1920&h=1080')\"\n          }}\n        ></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <h1 className=\"text-5xl md:text-7xl font-black mb-6\">\n              <span className=\"text-red-500\">LIVE</span> RAP BATTLES\n              <span className=\"bg-gradient-to-r from-purple-500 via-electric-500 to-success-500 bg-clip-text text-transparent block\">\n                & CIPHERS\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-400 max-w-2xl mx-auto mb-8\">\n              Stream live rap battles, freestyle ciphers, and real-time music collaboration. Battle opponents with live audio streaming.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/live\">\n                <Button \n                  className=\"bg-red-500 hover:bg-red-600 text-white px-8 py-4 text-lg font-bold transform hover:scale-105 transition-all animate-pulse\"\n                  data-testid=\"button-go-live-now\"\n                >\n                  🔴 GO LIVE NOW - RAP BATTLES\n                </Button>\n              </Link>\n              <Link href=\"/battles\">\n                <Button \n                  variant=\"outline\"\n                  className=\"border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white px-8 py-4 text-lg font-bold\"\n                  data-testid=\"button-join-cipher\"\n                >\n                  Join Cipher\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Content */}\n      <section className=\"bg-dark-200 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-10\">\n            <h2 className=\"text-3xl font-bold\">Trending Now</h2>\n            <div className=\"flex space-x-4\">\n              <Button \n                className={`font-medium ${contentFilter === 'battles' ? 'bg-purple-500 text-white' : 'bg-transparent text-gray-400 hover:text-white'}`}\n                onClick={() => setContentFilter('battles')}\n                data-testid=\"filter-battles\"\n              >\n                Battles\n              </Button>\n              <Button \n                className={`font-medium ${contentFilter === 'freestyles' ? 'bg-purple-500 text-white' : 'bg-transparent text-gray-400 hover:text-white'}`}\n                onClick={() => setContentFilter('freestyles')}\n                data-testid=\"filter-freestyles\"\n              >\n                Freestyles\n              </Button>\n              <Button \n                className={`font-medium ${contentFilter === 'collaborations' ? 'bg-purple-500 text-white' : 'bg-transparent text-gray-400 hover:text-white'}`}\n                onClick={() => setContentFilter('collaborations')}\n                data-testid=\"filter-collaborations\"\n              >\n                Collaborations\n              </Button>\n              <Button \n                className={`font-medium ${contentFilter === 'all' ? 'bg-purple-500 text-white' : 'bg-transparent text-gray-400 hover:text-white'}`}\n                onClick={() => setContentFilter('all')}\n                data-testid=\"filter-all\"\n              >\n                All\n              </Button>\n            </div>\n          </div>\n\n          {tracksLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"bg-dark-300 rounded-xl overflow-hidden\">\n                  <Skeleton className=\"aspect-video w-full\" />\n                  <div className=\"p-4\">\n                    <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-4 w-1/2 mb-3\" />\n                    <div className=\"flex justify-between\">\n                      <Skeleton className=\"h-4 w-1/3\" />\n                      <Skeleton className=\"h-4 w-1/4\" />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredTracks?.slice(0, 6).map((track) => (\n                <VideoCard key={track.id} track={track} />\n              ))}\n              {filteredTracks?.length === 0 && (\n                <div className=\"col-span-full text-center py-12\">\n                  <p className=\"text-gray-400 text-lg\">No {contentFilter === 'all' ? 'content' : contentFilter} found</p>\n                  <Link href=\"/live\">\n                    <Button className=\"mt-4 bg-red-500 hover:bg-red-600 text-white\">\n                      🔴 Start Live Battle\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Battle */}\n      {!battlesLoading && battles && battles.length > 0 && (\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold mb-4\">Epic Rap Battle</h2>\n              <p className=\"text-gray-400 text-xl\">Vote for your favorite and join the ultimate competition</p>\n            </div>\n            <BattleCard battle={battles[0]} featured={true} />\n          </div>\n        </section>\n      )}\n    </div>\n  );\n}\n","size_bytes":7185},"client/src/pages/live.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AudioStreamer from \"@/components/audio-streamer\";\nimport VideoStreamer from \"@/components/video-streamer\";\nimport WebRTCManager from \"@/components/webrtc-manager\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { \n  Video, \n  Mic, \n  Users, \n  Clock, \n  Calendar,\n  Radio,\n  VideoOff,\n  MicOff,\n  Settings,\n  Share\n} from \"lucide-react\";\n\nexport default function Live() {\n  const { user } = useAuth();\n  const { joinRoom, leaveRoom, isConnected } = useWebSocket();\n  const [isLive, setIsLive] = useState(false);\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isAudioOn, setIsAudioOn] = useState(true);\n  const [audioStream, setAudioStream] = useState<MediaStream | null>(null);\n  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);\n  const [roomId, setRoomId] = useState<string>(\"\");\n  const [viewerCount, setViewerCount] = useState(0);\n\n  const liveStreams = [\n    {\n      id: \"1\",\n      title: \"Freestyle Friday: Open Cypher Session\",\n      streamer: \"ViralViews\",\n      viewers: 2300,\n      category: \"Freestyle\",\n      thumbnail: \"https://images.unsplash.com/photo-1540039155733-5bb30b53aa14?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=450\"\n    },\n    {\n      id: \"2\",\n      title: \"Beat Making Session - Trap Vibes\",\n      streamer: \"BeatMaster\",\n      viewers: 892,\n      category: \"Production\",\n      thumbnail: \"https://images.unsplash.com/photo-1598488035139-bdbb2231ce04?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=450\"\n    },\n    {\n      id: \"3\",\n      title: \"Late Night Rap Battle Tournament\",\n      streamer: \"BattleZone\",\n      viewers: 1456,\n      category: \"Battle\",\n      thumbnail: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=450\"\n    }\n  ];\n\n  const scheduledEvents = [\n    {\n      id: \"1\",\n      title: \"Weekly Producer Showcase\",\n      time: \"Today 8:00 PM\",\n      participants: 25,\n      category: \"Showcase\"\n    },\n    {\n      id: \"2\",\n      title: \"Collaboration Thursday\",\n      time: \"Tomorrow 6:00 PM\",\n      participants: 18,\n      category: \"Collab\"\n    },\n    {\n      id: \"3\",\n      title: \"Championship Battle Finals\",\n      time: \"Saturday 9:00 PM\",\n      participants: 500,\n      category: \"Battle\"\n    }\n  ];\n\n  const handleGoLive = () => {\n    const newRoomId = `live-${user?.id}-${Date.now()}`;\n    setRoomId(newRoomId);\n    setIsLive(true);\n    \n    // Join WebSocket room for live streaming\n    if (user) {\n      joinRoom(newRoomId, user.displayName || user.username || 'Anonymous', true);\n    }\n  };\n\n  const handleEndStream = () => {\n    setIsLive(false);\n    setViewerCount(0);\n    leaveRoom();\n    \n    // Stop all streams\n    if (audioStream) {\n      audioStream.getTracks().forEach(track => track.stop());\n      setAudioStream(null);\n    }\n    if (videoStream) {\n      videoStream.getTracks().forEach(track => track.stop());\n      setVideoStream(null);\n    }\n  };\n\n  const handleAudioStreamStart = (stream: MediaStream) => {\n    setAudioStream(stream);\n    setIsAudioOn(true);\n  };\n\n  const handleVideoStreamStart = (stream: MediaStream) => {\n    setVideoStream(stream);\n    setIsVideoOn(true);\n  };\n\n  const handleAudioStreamEnd = () => {\n    setAudioStream(null);\n    setIsAudioOn(false);\n  };\n\n  const handleVideoStreamEnd = () => {\n    setVideoStream(null);\n    setIsVideoOn(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark-100 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-6xl font-black mb-4\">\n            <span className=\"text-red-500 animate-pulse\">🔴 LIVE</span> RAP BATTLES\n          </h1>\n          <p className=\"text-gray-400 text-xl max-w-2xl mx-auto\">\n            Start a live freestyle battle or cipher with real-time audio streaming\n          </p>\n        </div>\n\n        {/* Live Stream Controls */}\n        <Card className=\"bg-dark-200 border-dark-400 mb-12\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-bold text-white flex items-center\">\n              <Video className=\"mr-3\" />\n              Your Stream\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!isLive ? (\n              <div className=\"text-center py-12\">\n                <div className=\"w-32 h-32 bg-red-500 rounded-xl flex items-center justify-center mx-auto mb-6 animate-pulse\">\n                  <Mic className=\"h-16 w-16 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-4\">Ready to battle?</h3>\n                <p className=\"text-gray-400 mb-6\">Start live audio streaming for freestyle battles</p>\n                <Button \n                  onClick={handleGoLive}\n                  className=\"bg-red-500 hover:bg-red-600 text-white font-bold px-8 py-3 text-lg animate-pulse\"\n                  data-testid=\"button-go-live\"\n                >\n                  <Radio className=\"mr-2\" />\n                  START BATTLE STREAM\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Live Video Stream */}\n                <div className=\"bg-dark-400 rounded-xl overflow-hidden\">\n                  <VideoStreamer\n                    isStreaming={isLive}\n                    onStreamStart={handleVideoStreamStart}\n                    onStreamEnd={handleVideoStreamEnd}\n                    quality=\"high\"\n                    roomId={roomId}\n                  />\n                  <div className=\"absolute top-4 left-4\">\n                    <Badge variant=\"destructive\" className=\"bg-red-500 text-white animate-pulse\">\n                      🔴 LIVE\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-4 right-4\">\n                    <Badge variant=\"secondary\" className=\"bg-black bg-opacity-60 text-white\">\n                      👁 {viewerCount} viewers\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Audio Stream Controls */}\n                <AudioStreamer\n                  isStreaming={isLive}\n                  onStreamStart={handleAudioStreamStart}\n                  onStreamEnd={handleAudioStreamEnd}\n                  quality=\"high\"\n                  roomId={roomId}\n                />\n\n                {/* WebRTC Manager for Peer Connections */}\n                {isLive && roomId && user && (\n                  <WebRTCManager\n                    roomId={roomId}\n                    username={user.displayName || user.username || 'Anonymous'}\n                    isHost={true}\n                    enableAudio={isAudioOn}\n                    enableVideo={isVideoOn}\n                    onPeerJoined={(peerId) => setViewerCount(prev => prev + 1)}\n                    onPeerLeft={(peerId) => setViewerCount(prev => Math.max(0, prev - 1))}\n                  />\n                )}\n\n                {/* Stream Controls */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Button\n                      variant={isVideoOn ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setIsVideoOn(!isVideoOn)}\n                      className={isVideoOn ? \"bg-green-500 hover:bg-green-600\" : \"border-red-500 text-red-500\"}\n                      data-testid=\"button-toggle-video\"\n                    >\n                      {isVideoOn ? <Video className=\"w-4 h-4\" /> : <VideoOff className=\"w-4 h-4\" />}\n                    </Button>\n                    <Button\n                      variant={isAudioOn ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setIsAudioOn(!isAudioOn)}\n                      className={isAudioOn ? \"bg-green-500 hover:bg-green-600\" : \"border-red-500 text-red-500\"}\n                      data-testid=\"button-toggle-audio\"\n                    >\n                      {isAudioOn ? <Mic className=\"w-4 h-4\" /> : <MicOff className=\"w-4 h-4\" />}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        // Toggle quality settings for stream\n                        const newQuality = audioStream ? 'ultra' : 'high';\n                        console.log('Adjusting stream quality to:', newQuality);\n                      }}\n                      className=\"border-dark-400 text-gray-400 hover:text-white\"\n                      data-testid=\"button-stream-settings\"\n                    >\n                      <Settings className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        if (navigator.share && roomId) {\n                          navigator.share({\n                            title: 'Live Rap Battle',\n                            text: 'Join my live rap battle!',\n                            url: `${window.location.origin}/live/${roomId}`\n                          });\n                        } else {\n                          navigator.clipboard.writeText(`${window.location.origin}/live/${roomId}`);\n                          console.log('Stream link copied to clipboard');\n                        }\n                      }}\n                      className=\"border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white\"\n                      data-testid=\"button-share-stream\"\n                    >\n                      <Share className=\"w-4 h-4 mr-2\" />\n                      Share\n                    </Button>\n                    <Button\n                      onClick={handleEndStream}\n                      variant=\"destructive\"\n                      className=\"bg-red-500 hover:bg-red-600\"\n                      data-testid=\"button-end-stream\"\n                    >\n                      End Stream\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Live Streams */}\n          <div className=\"lg:col-span-2\">\n            <h2 className=\"text-2xl font-bold text-white mb-6\">Live Now</h2>\n            <div className=\"space-y-6\">\n              {liveStreams.map((stream) => (\n                <Card key={stream.id} className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors cursor-pointer\">\n                  <CardContent className=\"p-0\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"relative\">\n                        <img \n                          src={stream.thumbnail} \n                          alt={stream.title}\n                          className=\"w-full h-32 md:h-full object-cover rounded-l-lg\"\n                        />\n                        <div className=\"absolute top-2 left-2\">\n                          <Badge variant=\"destructive\" className=\"bg-red-500 text-white animate-pulse\">\n                            LIVE\n                          </Badge>\n                        </div>\n                        <div className=\"absolute bottom-2 right-2\">\n                          <Badge variant=\"secondary\" className=\"bg-black bg-opacity-60 text-white text-xs\">\n                            👁 {stream.viewers.toLocaleString()}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"md:col-span-2 p-4\">\n                        <h3 className=\"text-lg font-bold text-white mb-2\" data-testid={`stream-title-${stream.id}`}>\n                          {stream.title}\n                        </h3>\n                        <p className=\"text-gray-400 text-sm mb-3\" data-testid={`stream-streamer-${stream.id}`}>\n                          by {stream.streamer}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <Badge \n                            variant=\"outline\" \n                            className=\"border-purple-500 text-purple-500\"\n                            data-testid={`stream-category-${stream.id}`}\n                          >\n                            {stream.category}\n                          </Badge>\n                          <Button \n                            size=\"sm\"\n                            className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n                            data-testid={`button-watch-${stream.id}`}\n                          >\n                            Watch\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Scheduled Events */}\n          <div>\n            <h2 className=\"text-2xl font-bold text-white mb-6\">Scheduled Events</h2>\n            <div className=\"space-y-4\">\n              {scheduledEvents.map((event) => (\n                <Card key={event.id} className=\"bg-dark-200 border-dark-400\">\n                  <CardContent className=\"p-4\">\n                    <h4 className=\"font-bold text-white mb-2\" data-testid={`event-title-${event.id}`}>\n                      {event.title}\n                    </h4>\n                    <div className=\"flex items-center text-gray-400 text-sm mb-2\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      <span data-testid={`event-time-${event.id}`}>{event.time}</span>\n                    </div>\n                    <div className=\"flex items-center text-gray-400 text-sm mb-3\">\n                      <Users className=\"w-4 h-4 mr-1\" />\n                      <span data-testid={`event-participants-${event.id}`}>{event.participants} interested</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <Badge \n                        variant=\"outline\" \n                        className=\"border-success-500 text-success-500\"\n                        data-testid={`event-category-${event.id}`}\n                      >\n                        {event.category}\n                      </Badge>\n                      <Button \n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white\"\n                        data-testid={`button-remind-${event.id}`}\n                      >\n                        Remind Me\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick Start */}\n            <Card className=\"bg-dark-200 border-dark-400 mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-bold text-white\">Quick Start</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  className=\"w-full bg-gradient-to-r from-purple-500 to-electric-500 hover:from-purple-600 hover:to-electric-600 text-white justify-start\"\n                  data-testid=\"button-start-cypher\"\n                >\n                  <Mic className=\"w-4 h-4 mr-2\" />\n                  Start Cypher Session\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white justify-start\"\n                  data-testid=\"button-host-battle\"\n                >\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Host Battle Event\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full border-success-500 text-success-500 hover:bg-success-500 hover:text-white justify-start\"\n                  data-testid=\"button-schedule-collab\"\n                >\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Schedule Collaboration\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16993},"client/src/pages/mixing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Track } from \"@shared/schema\";\nimport MixingInterface from \"@/components/mixing-interface\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Plus, Music, Users, Mic } from \"lucide-react\";\n\nexport default function Mixing() {\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n\n  const { data: tracks, isLoading } = useQuery<Track[]>({\n    queryKey: [\"/api/tracks\"],\n  });\n\n  const collaborativeTracks = tracks?.filter(track => track.isCollaborative) || [];\n\n  if (selectedProject) {\n    return <MixingInterface projectId={selectedProject} onBack={() => setSelectedProject(null)} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-dark-100 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-6xl font-black mb-4\">\n            Collaborative <span className=\"text-purple-500\">Studio</span>\n          </h1>\n          <p className=\"text-gray-400 text-xl max-w-2xl mx-auto\">\n            Mix tracks, layer vocals, and create music together in real-time\n          </p>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors cursor-pointer group\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-electric-500 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Plus className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Start New Project</h3>\n              <p className=\"text-gray-400\">Create a collaborative track from scratch</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors cursor-pointer group\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-success-500 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Mic className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Record Layer</h3>\n              <p className=\"text-gray-400\">Add your vocals to existing tracks</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors cursor-pointer group\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-highlight-500 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Music className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Upload Beat</h3>\n              <p className=\"text-gray-400\">Share your beats for collaboration</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Active Collaborations */}\n        <div className=\"mb-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold\">Active Collaborations</h2>\n            <Button \n              className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n              data-testid=\"button-view-all-collaborations\"\n            >\n              View All\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"bg-dark-200 border-dark-400\">\n                  <CardContent className=\"p-6\">\n                    <Skeleton className=\"h-6 w-3/4 mb-3\" />\n                    <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                    <div className=\"flex items-center space-x-2 mb-4\">\n                      <Skeleton className=\"w-8 h-8 rounded-full\" />\n                      <Skeleton className=\"w-8 h-8 rounded-full\" />\n                      <Skeleton className=\"w-8 h-8 rounded-full\" />\n                    </div>\n                    <Skeleton className=\"h-10 w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : collaborativeTracks.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {collaborativeTracks.map((track) => (\n                <Card key={track.id} className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-bold text-white mb-2\" data-testid={`track-title-${track.id}`}>\n                      {track.title}\n                    </h3>\n                    <p className=\"text-gray-400 text-sm mb-4\" data-testid={`track-artist-${track.id}`}>\n                      by {track.artistName}\n                    </p>\n                    \n                    {/* Collaborators */}\n                    <div className=\"flex items-center space-x-2 mb-4\">\n                      <Users className=\"h-4 w-4 text-gray-400\" />\n                      <div className=\"flex -space-x-2\">\n                        {[...Array(Math.min(3, track.collaborators?.length || 0))].map((_, i) => (\n                          <div \n                            key={i} \n                            className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-electric-500 rounded-full border-2 border-dark-200\"\n                          ></div>\n                        ))}\n                        {(track.collaborators?.length || 0) > 3 && (\n                          <div className=\"w-8 h-8 bg-dark-400 rounded-full border-2 border-dark-200 flex items-center justify-center\">\n                            <span className=\"text-xs text-gray-400\">+{(track.collaborators?.length || 0) - 3}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-purple-500 to-electric-500 hover:from-purple-600 hover:to-electric-600 text-white\"\n                      onClick={() => setSelectedProject(track.id)}\n                      data-testid={`button-join-${track.id}`}\n                    >\n                      Join Session\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 bg-dark-200 rounded-xl\">\n              <Music className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-gray-400 mb-2\">No Active Collaborations</h3>\n              <p className=\"text-gray-500 mb-6\">Start a new project and invite artists to collaborate</p>\n              <Button \n                className=\"bg-purple-500 hover:bg-purple-600 text-white font-bold\"\n                data-testid=\"button-start-collaboration\"\n              >\n                Start Collaboration\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Featured Collaboration */}\n        <Card className=\"bg-dark-200 border-dark-400\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-bold text-white text-center\">\n              Open Collaboration: \"City Lights Cypher\"\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center mb-6\">\n              <p className=\"text-gray-400 mb-4\">\n                Join this community track where artists worldwide are adding their unique layers\n              </p>\n              <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-400 mb-6\">\n                <span><Music className=\"h-4 w-4 inline mr-1\" />Hip-Hop Beat</span>\n                <span><Users className=\"h-4 w-4 inline mr-1\" />12 Collaborators</span>\n                <span>🎵 120 BPM</span>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                className=\"bg-success-500 hover:bg-success-600 text-white font-bold\"\n                onClick={() => setSelectedProject(\"community-cypher\")}\n                data-testid=\"button-join-cypher\"\n              >\n                Join Cypher\n              </Button>\n              <Button \n                variant=\"outline\"\n                className=\"border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white font-bold\"\n                data-testid=\"button-listen-preview\"\n              >\n                Listen to Preview\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9209},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Track, type Beat, type Battle } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Music, \n  Users, \n  Trophy, \n  Heart, \n  Play, \n  Settings,\n  Share,\n  Edit\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const [activeTab, setActiveTab] = useState(\"tracks\");\n\n  // Mock user data - in real app, get from auth context\n  const user = {\n    id: \"current-user-id\",\n    username: \"mcthunder\",\n    displayName: \"MC Thunder\",\n    role: \"artist\" as const,\n    bio: \"Bringing lightning to the mic. Born and raised in the streets, speaking truth through rhythm.\",\n    avatar: \"\",\n    followers: 15420,\n    following: 892,\n    location: \"New York, NY\"\n  };\n\n  const { data: userTracks, isLoading: tracksLoading } = useQuery<Track[]>({\n    queryKey: [\"/api/tracks\", { artist: user.id }],\n  });\n\n  const { data: userBeats, isLoading: beatsLoading } = useQuery<Beat[]>({\n    queryKey: [\"/api/beats\", { producer: user.id }],\n  });\n\n  const { data: userBattles, isLoading: battlesLoading } = useQuery<Battle[]>({\n    queryKey: [\"/api/battles\", { user: user.id }],\n  });\n\n  const stats = [\n    { label: \"Total Plays\", value: \"2.1M\", icon: Play },\n    { label: \"Likes\", value: \"847K\", icon: Heart },\n    { label: \"Collaborations\", value: \"23\", icon: Users },\n    { label: \"Battle Wins\", value: \"18\", icon: Trophy },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-dark-100 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Profile Header */}\n        <Card className=\"bg-dark-200 border-dark-400 mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col md:flex-row items-start gap-6\">\n              {/* Avatar */}\n              <div className=\"w-32 h-32 bg-gradient-to-br from-purple-500 to-electric-500 rounded-full flex items-center justify-center text-4xl font-bold text-white\">\n                {user.displayName.split(' ').map(n => n[0]).join('')}\n              </div>\n\n              {/* Profile Info */}\n              <div className=\"flex-1\">\n                <div className=\"flex flex-col md:flex-row md:items-center gap-4 mb-4\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold text-white mb-1\" data-testid=\"profile-display-name\">\n                      {user.displayName}\n                    </h1>\n                    <p className=\"text-gray-400\" data-testid=\"profile-username\">@{user.username}</p>\n                    <Badge \n                      variant=\"outline\" \n                      className=\"border-purple-500 text-purple-500 mt-2\"\n                      data-testid=\"profile-role\"\n                    >\n                      {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"md:ml-auto flex gap-3\">\n                    <Button \n                      variant=\"outline\"\n                      className=\"border-purple-500 text-purple-500 hover:bg-purple-500 hover:text-white\"\n                      data-testid=\"button-share-profile\"\n                    >\n                      <Share className=\"w-4 h-4 mr-2\" />\n                      Share\n                    </Button>\n                    <Button \n                      className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n                      data-testid=\"button-edit-profile\"\n                    >\n                      <Edit className=\"w-4 h-4 mr-2\" />\n                      Edit Profile\n                    </Button>\n                  </div>\n                </div>\n\n                <p className=\"text-gray-400 mb-4 max-w-2xl\" data-testid=\"profile-bio\">\n                  {user.bio}\n                </p>\n\n                {/* Follower Stats */}\n                <div className=\"flex items-center space-x-6 text-sm\">\n                  <div>\n                    <span className=\"font-bold text-white\" data-testid=\"follower-count\">\n                      {user.followers.toLocaleString()}\n                    </span>\n                    <span className=\"text-gray-400 ml-1\">Followers</span>\n                  </div>\n                  <div>\n                    <span className=\"font-bold text-white\" data-testid=\"following-count\">\n                      {user.following.toLocaleString()}\n                    </span>\n                    <span className=\"text-gray-400 ml-1\">Following</span>\n                  </div>\n                  <div className=\"text-gray-400\" data-testid=\"profile-location\">\n                    📍 {user.location}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          {stats.map((stat, index) => (\n            <Card key={stat.label} className=\"bg-dark-200 border-dark-400\">\n              <CardContent className=\"p-4 text-center\">\n                <stat.icon className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n                <div className=\"text-2xl font-bold text-white mb-1\" data-testid={`stat-value-${index}`}>\n                  {stat.value}\n                </div>\n                <div className=\"text-gray-400 text-sm\" data-testid={`stat-label-${index}`}>\n                  {stat.label}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Content Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"bg-dark-200 border-dark-400 mb-6\">\n            <TabsTrigger \n              value=\"tracks\" \n              className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\"\n              data-testid=\"tab-tracks\"\n            >\n              <Music className=\"w-4 h-4 mr-2\" />\n              Tracks\n            </TabsTrigger>\n            {(['producer', 'artist'] as const).includes(user.role as any) && (\n              <TabsTrigger \n                value=\"beats\" \n                className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\"\n                data-testid=\"tab-beats\"\n              >\n                Beats\n              </TabsTrigger>\n            )}\n            <TabsTrigger \n              value=\"battles\" \n              className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\"\n              data-testid=\"tab-battles\"\n            >\n              <Trophy className=\"w-4 h-4 mr-2\" />\n              Battles\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"collaborations\" \n              className=\"data-[state=active]:bg-purple-500 data-[state=active]:text-white\"\n              data-testid=\"tab-collaborations\"\n            >\n              <Users className=\"w-4 h-4 mr-2\" />\n              Collabs\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"tracks\">\n            {tracksLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i} className=\"bg-dark-200 border-dark-400\">\n                    <Skeleton className=\"aspect-video w-full\" />\n                    <CardContent className=\"p-4\">\n                      <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-4 w-1/2 mb-3\" />\n                      <Skeleton className=\"h-8 w-full\" />\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : userTracks && userTracks.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {userTracks.map((track) => (\n                  <Card key={track.id} className=\"bg-dark-200 border-dark-400 hover:bg-dark-300 transition-colors\">\n                    <div className=\"aspect-video bg-dark-400 rounded-t-lg flex items-center justify-center\">\n                      <Music className=\"h-12 w-12 text-gray-400\" />\n                    </div>\n                    <CardContent className=\"p-4\">\n                      <h3 className=\"font-bold text-white mb-2\" data-testid={`track-title-${track.id}`}>\n                        {track.title}\n                      </h3>\n                      <div className=\"flex items-center justify-between text-sm text-gray-400 mb-3\">\n                        <span>👁 {track.plays?.toLocaleString()}</span>\n                        <span>❤️ {track.likes?.toLocaleString()}</span>\n                      </div>\n                      <Button \n                        className=\"w-full bg-purple-500 hover:bg-purple-600 text-white\"\n                        data-testid={`button-play-${track.id}`}\n                      >\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        Play\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Music className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-bold text-gray-400 mb-2\">No tracks yet</h3>\n                <p className=\"text-gray-500 mb-6\">Upload your first track to get started</p>\n                <Button \n                  className=\"bg-purple-500 hover:bg-purple-600 text-white font-bold\"\n                  data-testid=\"button-upload-track\"\n                >\n                  Upload Track\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"beats\">\n            <div className=\"text-center py-12\">\n              <Music className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-gray-400 mb-2\">No beats available</h3>\n              <p className=\"text-gray-500\">Beat production coming soon</p>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"battles\">\n            <div className=\"text-center py-12\">\n              <Trophy className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-gray-400 mb-2\">No battles yet</h3>\n              <p className=\"text-gray-500 mb-6\">Join your first rap battle</p>\n              <Button \n                className=\"bg-purple-500 hover:bg-purple-600 text-white font-bold\"\n                data-testid=\"button-join-battle\"\n              >\n                Join Battle\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"collaborations\">\n            <div className=\"text-center py-12\">\n              <Users className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-gray-400 mb-2\">No collaborations yet</h3>\n              <p className=\"text-gray-500 mb-6\">Start collaborating with other artists</p>\n              <Button \n                className=\"bg-purple-500 hover:bg-purple-600 text-white font-bold\"\n                data-testid=\"button-start-collab\"\n              >\n                Start Collaboration\n              </Button>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11601},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/advanced-audio-mixer.tsx":{"content":"import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Volume2, VolumeX, Play, Pause, Square, RotateCcw, \n  Sliders, BarChart3, Mic, Headphones \n} from \"lucide-react\";\nimport WaveformVisualizer from \"./waveform-visualizer\";\n\ninterface AudioTrack {\n  id: string;\n  name: string;\n  url?: string;\n  stream?: MediaStream;\n  type: 'beat' | 'vocal' | 'effect' | 'master';\n  isPlaying: boolean;\n  isMuted: boolean;\n  isSolo: boolean;\n  volume: number;\n  pan: number;\n  eq: {\n    low: number;\n    mid: number;\n    high: number;\n  };\n  effects: {\n    reverb: number;\n    delay: number;\n    distortion: number;\n  };\n  waveformData?: number[];\n}\n\ninterface AdvancedAudioMixerProps {\n  tracks?: AudioTrack[];\n  onTracksChange?: (tracks: AudioTrack[]) => void;\n  onMasterVolumeChange?: (volume: number) => void;\n  onRecordingStart?: () => void;\n  onRecordingStop?: (blob: Blob) => void;\n  enableRealTime?: boolean;\n  sampleRate?: number;\n}\n\nexport default function AdvancedAudioMixer({\n  tracks = [],\n  onTracksChange,\n  onMasterVolumeChange,\n  onRecordingStart,\n  onRecordingStop,\n  enableRealTime = true,\n  sampleRate = 44100\n}: AdvancedAudioMixerProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [masterVolume, setMasterVolume] = useState([75]);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(120);\n  const [bpm, setBpm] = useState(120);\n  const [selectedTrack, setSelectedTrack] = useState<string | null>(null);\n  const [crossfaderPosition, setCrossfaderPosition] = useState([50]);\n  \n  const audioContextRef = useRef<AudioContext | null>(null);\n  const masterGainRef = useRef<GainNode | null>(null);\n  const trackNodesRef = useRef<Map<string, {\n    source?: AudioBufferSourceNode | MediaStreamAudioSourceNode;\n    gainNode: GainNode;\n    panNode: StereoPannerNode;\n    eqNodes: {\n      low: BiquadFilterNode;\n      mid: BiquadFilterNode;\n      high: BiquadFilterNode;\n    };\n    effectNodes: {\n      reverb?: ConvolverNode;\n      delay?: DelayNode;\n      distortion?: WaveShaperNode;\n    };\n    analyser: AnalyserNode;\n  }>>(new Map());\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const recordedChunksRef = useRef<Blob[]>([]);\n\n  // Initialize audio context\n  useEffect(() => {\n    const initAudioContext = async () => {\n      try {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)({\n          sampleRate,\n          latencyHint: 'playback'\n        });\n\n        await audioContextRef.current.resume();\n\n        // Create master gain node\n        masterGainRef.current = audioContextRef.current.createGain();\n        masterGainRef.current.connect(audioContextRef.current.destination);\n        masterGainRef.current.gain.value = masterVolume[0] / 100;\n\n      } catch (error) {\n        console.error('Failed to initialize audio context:', error);\n      }\n    };\n\n    initAudioContext();\n\n    return () => {\n      if (audioContextRef.current) {\n        audioContextRef.current.close();\n      }\n    };\n  }, [sampleRate, masterVolume]);\n\n  // Create audio nodes for track\n  const createTrackNodes = useCallback((trackId: string) => {\n    if (!audioContextRef.current) return null;\n\n    const audioContext = audioContextRef.current;\n    \n    // Create nodes\n    const gainNode = audioContext.createGain();\n    const panNode = audioContext.createStereoPanner();\n    const analyser = audioContext.createAnalyser();\n    \n    // EQ nodes\n    const lowEQ = audioContext.createBiquadFilter();\n    const midEQ = audioContext.createBiquadFilter();\n    const highEQ = audioContext.createBiquadFilter();\n    \n    // Configure EQ\n    lowEQ.type = 'lowshelf';\n    lowEQ.frequency.value = 320;\n    lowEQ.gain.value = 0;\n    \n    midEQ.type = 'peaking';\n    midEQ.frequency.value = 1000;\n    midEQ.Q.value = 1;\n    midEQ.gain.value = 0;\n    \n    highEQ.type = 'highshelf';\n    highEQ.frequency.value = 3200;\n    highEQ.gain.value = 0;\n\n    // Configure analyser\n    analyser.fftSize = 2048;\n    analyser.smoothingTimeConstant = 0.8;\n\n    // Effect nodes\n    const delay = audioContext.createDelay(1.0);\n    delay.delayTime.value = 0;\n\n    // Create reverb impulse response\n    const reverbBuffer = audioContext.createBuffer(2, 2 * sampleRate, sampleRate);\n    for (let channel = 0; channel < 2; channel++) {\n      const channelData = reverbBuffer.getChannelData(channel);\n      for (let i = 0; i < channelData.length; i++) {\n        channelData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / channelData.length, 2);\n      }\n    }\n    \n    const reverb = audioContext.createConvolver();\n    reverb.buffer = reverbBuffer;\n\n    // Create distortion curve\n    const distortion = audioContext.createWaveShaper();\n    const curve = new Float32Array(65536);\n    const deg = Math.PI / 180;\n    for (let i = 0; i < 32768; i++) {\n      const x = (i / 32768) * 2 - 1;\n      curve[i + 32768] = Math.tanh(x * 2) * 0.5;\n    }\n    distortion.curve = curve;\n    distortion.oversample = '4x';\n\n    // Connect nodes: source -> EQ -> effects -> gain -> pan -> analyser -> master\n    const nodes = {\n      gainNode,\n      panNode,\n      eqNodes: { low: lowEQ, mid: midEQ, high: highEQ },\n      effectNodes: { reverb, delay, distortion },\n      analyser\n    };\n\n    trackNodesRef.current.set(trackId, nodes);\n    return nodes;\n  }, [sampleRate]);\n\n  // Load audio track\n  const loadAudioTrack = useCallback(async (track: AudioTrack) => {\n    if (!audioContextRef.current) return;\n\n    const nodes = trackNodesRef.current.get(track.id) || createTrackNodes(track.id);\n    if (!nodes) return;\n\n    try {\n      if (track.url) {\n        // Load audio file\n        const response = await fetch(track.url);\n        const arrayBuffer = await response.arrayBuffer();\n        const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n        \n        const source = audioContextRef.current.createBufferSource();\n        source.buffer = audioBuffer;\n        source.loop = true;\n        \n        // Connect audio chain\n        source.connect(nodes.eqNodes.low);\n        nodes.eqNodes.low.connect(nodes.eqNodes.mid);\n        nodes.eqNodes.mid.connect(nodes.eqNodes.high);\n        nodes.eqNodes.high.connect(nodes.gainNode);\n        nodes.gainNode.connect(nodes.panNode);\n        nodes.panNode.connect(nodes.analyser);\n        nodes.analyser.connect(masterGainRef.current!);\n\n        (nodes as any).source = source;\n        \n      } else if (track.stream) {\n        // Use media stream\n        const source = audioContextRef.current.createMediaStreamSource(track.stream);\n        \n        // Connect audio chain\n        source.connect(nodes.eqNodes.low);\n        nodes.eqNodes.low.connect(nodes.eqNodes.mid);\n        nodes.eqNodes.mid.connect(nodes.eqNodes.high);\n        nodes.eqNodes.high.connect(nodes.gainNode);\n        nodes.gainNode.connect(nodes.panNode);\n        nodes.panNode.connect(nodes.analyser);\n        nodes.analyser.connect(masterGainRef.current!);\n\n        (nodes as any).source = source;\n      }\n    } catch (error) {\n      console.error('Failed to load audio track:', error);\n    }\n  }, [createTrackNodes]);\n\n  // Update track parameters\n  const updateTrackParameter = useCallback((trackId: string, parameter: string, value: number) => {\n    const nodes = trackNodesRef.current.get(trackId);\n    if (!nodes) return;\n\n    switch (parameter) {\n      case 'volume':\n        nodes.gainNode.gain.value = value / 100;\n        break;\n      case 'pan':\n        nodes.panNode.pan.value = (value - 50) / 50; // Convert 0-100 to -1 to 1\n        break;\n      case 'eq-low':\n        nodes.eqNodes.low.gain.value = (value - 50) / 5; // Convert 0-100 to -10 to 10 dB\n        break;\n      case 'eq-mid':\n        nodes.eqNodes.mid.gain.value = (value - 50) / 5;\n        break;\n      case 'eq-high':\n        nodes.eqNodes.high.gain.value = (value - 50) / 5;\n        break;\n    }\n\n    // Update track in state\n    const updatedTracks = tracks.map(track => {\n      if (track.id === trackId) {\n        const updated = { ...track };\n        switch (parameter) {\n          case 'volume':\n            updated.volume = value;\n            break;\n          case 'pan':\n            updated.pan = value;\n            break;\n          case 'eq-low':\n            updated.eq.low = value;\n            break;\n          case 'eq-mid':\n            updated.eq.mid = value;\n            break;\n          case 'eq-high':\n            updated.eq.high = value;\n            break;\n        }\n        return updated;\n      }\n      return track;\n    });\n\n    onTracksChange?.(updatedTracks);\n  }, [tracks, onTracksChange]);\n\n  // Play/pause track\n  const toggleTrackPlayback = useCallback((trackId: string) => {\n    const nodes = trackNodesRef.current.get(trackId);\n    const track = tracks.find(t => t.id === trackId);\n    \n    if (!nodes || !track) return;\n\n    if (track.isPlaying) {\n      // Stop track\n      if (nodes.source && 'stop' in nodes.source) {\n        (nodes.source as AudioBufferSourceNode).stop();\n      }\n    } else {\n      // Start track\n      loadAudioTrack(track);\n      if (nodes.source && 'start' in nodes.source) {\n        (nodes.source as AudioBufferSourceNode).start();\n      }\n    }\n\n    const updatedTracks = tracks.map(t => \n      t.id === trackId ? { ...t, isPlaying: !t.isPlaying } : t\n    );\n    onTracksChange?.(updatedTracks);\n  }, [tracks, onTracksChange, loadAudioTrack]);\n\n  // Master controls\n  const toggleMasterPlayback = useCallback(() => {\n    if (isPlaying) {\n      // Pause all tracks\n      tracks.forEach(track => {\n        const nodes = trackNodesRef.current.get(track.id);\n        if (nodes?.source && 'stop' in nodes.source) {\n          (nodes.source as AudioBufferSourceNode).stop();\n        }\n      });\n    } else {\n      // Play all tracks\n      tracks.forEach(track => {\n        if (track.isPlaying) {\n          loadAudioTrack(track);\n          const nodes = trackNodesRef.current.get(track.id);\n          if (nodes?.source && 'start' in nodes.source) {\n            (nodes.source as AudioBufferSourceNode).start();\n          }\n        }\n      });\n    }\n    setIsPlaying(!isPlaying);\n  }, [isPlaying, tracks, loadAudioTrack]);\n\n  // Start recording\n  const startRecording = useCallback(async () => {\n    if (!masterGainRef.current || !audioContextRef.current) return;\n\n    try {\n      // Create recording stream from master output\n      const destination = audioContextRef.current.createMediaStreamDestination();\n      masterGainRef.current.connect(destination);\n\n      mediaRecorderRef.current = new MediaRecorder(destination.stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n\n      recordedChunksRef.current = [];\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          recordedChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current.onstop = () => {\n        const blob = new Blob(recordedChunksRef.current, { type: 'audio/webm' });\n        onRecordingStop?.(blob);\n      };\n\n      mediaRecorderRef.current.start(1000); // Record in 1-second chunks\n      setIsRecording(true);\n      onRecordingStart?.();\n\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  }, [onRecordingStart, onRecordingStop]);\n\n  // Stop recording\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  }, [isRecording]);\n\n  // Update master volume\n  const handleMasterVolumeChange = useCallback((value: number[]) => {\n    setMasterVolume(value);\n    if (masterGainRef.current) {\n      masterGainRef.current.gain.value = value[0] / 100;\n    }\n    onMasterVolumeChange?.(value[0]);\n  }, [onMasterVolumeChange]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Master Controls */}\n      <Card className=\"bg-dark-200 border-dark-400 p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-white\">Master Controls</h3>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {bpm} BPM\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {sampleRate / 1000}kHz\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={toggleMasterPlayback}\n              className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n              data-testid=\"master-play-pause\"\n            >\n              {isPlaying ? <Pause className=\"w-4 h-4 mr-2\" /> : <Play className=\"w-4 h-4 mr-2\" />}\n              {isPlaying ? 'Pause' : 'Play'}\n            </Button>\n\n            <Button\n              onClick={() => setCurrentTime(0)}\n              variant=\"outline\"\n              className=\"border-dark-400 text-white\"\n              data-testid=\"master-stop\"\n            >\n              <Square className=\"w-4 h-4 mr-2\" />\n              Stop\n            </Button>\n\n            <Button\n              onClick={isRecording ? stopRecording : startRecording}\n              className={`${\n                isRecording ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'\n              } text-white`}\n              data-testid=\"record-toggle\"\n            >\n              {isRecording ? (\n                <>\n                  <Square className=\"w-4 h-4 mr-2\" />\n                  Stop Recording\n                </>\n              ) : (\n                <>\n                  <Mic className=\"w-4 h-4 mr-2\" />\n                  Record\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Master Volume */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm text-gray-400\">Master Volume</label>\n              <span className=\"text-sm text-white\">{masterVolume[0]}%</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <VolumeX className=\"w-4 h-4 text-gray-400\" />\n              <Slider\n                value={masterVolume}\n                onValueChange={handleMasterVolumeChange}\n                max={100}\n                step={1}\n                className=\"flex-1\"\n                data-testid=\"master-volume\"\n              />\n              <Volume2 className=\"w-4 h-4 text-gray-400\" />\n            </div>\n          </div>\n\n          {/* Crossfader */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm text-gray-400\">Crossfader</label>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-xs text-gray-400\">A</span>\n              <Slider\n                value={crossfaderPosition}\n                onValueChange={setCrossfaderPosition}\n                max={100}\n                step={1}\n                className=\"flex-1\"\n                data-testid=\"crossfader\"\n              />\n              <span className=\"text-xs text-gray-400\">B</span>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Track Mixer */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {tracks.map((track) => (\n          <Card key={track.id} className=\"bg-dark-200 border-dark-400 p-4\">\n            <div className=\"space-y-4\">\n              {/* Track Header */}\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-semibold text-white\">{track.name}</h4>\n                  <Badge className={`text-xs ${\n                    track.type === 'beat' ? 'bg-purple-500' :\n                    track.type === 'vocal' ? 'bg-blue-500' :\n                    track.type === 'effect' ? 'bg-green-500' : 'bg-orange-500'\n                  } text-white`}>\n                    {track.type.toUpperCase()}\n                  </Badge>\n                </div>\n                \n                <div className=\"flex items-center space-x-1\">\n                  <Button\n                    onClick={() => toggleTrackPlayback(track.id)}\n                    size=\"icon\"\n                    variant=\"outline\"\n                    className={`border-dark-400 w-8 h-8 ${track.isPlaying ? 'text-green-500' : 'text-white'}`}\n                    data-testid={`track-play-${track.id}`}\n                  >\n                    {track.isPlaying ? <Pause className=\"w-3 h-3\" /> : <Play className=\"w-3 h-3\" />}\n                  </Button>\n                </div>\n              </div>\n\n              {/* Waveform */}\n              {track.waveformData && (\n                <div className=\"h-16\">\n                  <WaveformVisualizer\n                    data={track.waveformData}\n                    color=\"purple-500\"\n                    isPlaying={track.isPlaying}\n                    currentTime={currentTime}\n                    duration={duration}\n                  />\n                </div>\n              )}\n\n              {/* Volume Control */}\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-400\">Volume</span>\n                  <span className=\"text-xs text-white\">{track.volume}%</span>\n                </div>\n                <Slider\n                  value={[track.volume]}\n                  onValueChange={(value) => updateTrackParameter(track.id, 'volume', value[0])}\n                  max={100}\n                  step={1}\n                  className=\"w-full\"\n                  data-testid={`track-volume-${track.id}`}\n                />\n              </div>\n\n              {/* Pan Control */}\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-400\">Pan</span>\n                  <span className=\"text-xs text-white\">\n                    {track.pan === 50 ? 'C' : track.pan < 50 ? `L${50 - track.pan}` : `R${track.pan - 50}`}\n                  </span>\n                </div>\n                <Slider\n                  value={[track.pan]}\n                  onValueChange={(value) => updateTrackParameter(track.id, 'pan', value[0])}\n                  max={100}\n                  step={1}\n                  className=\"w-full\"\n                  data-testid={`track-pan-${track.id}`}\n                />\n              </div>\n\n              {/* EQ Controls */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <BarChart3 className=\"w-3 h-3 text-gray-400\" />\n                  <span className=\"text-xs text-gray-400\">EQ</span>\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div className=\"space-y-1\">\n                    <span className=\"text-xs text-gray-400\">Low</span>\n                    <Slider\n                      value={[track.eq.low]}\n                      onValueChange={(value) => updateTrackParameter(track.id, 'eq-low', value[0])}\n                      max={100}\n                      step={1}\n                      orientation=\"vertical\"\n                      className=\"h-16\"\n                      data-testid={`track-eq-low-${track.id}`}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-1\">\n                    <span className=\"text-xs text-gray-400\">Mid</span>\n                    <Slider\n                      value={[track.eq.mid]}\n                      onValueChange={(value) => updateTrackParameter(track.id, 'eq-mid', value[0])}\n                      max={100}\n                      step={1}\n                      orientation=\"vertical\"\n                      className=\"h-16\"\n                      data-testid={`track-eq-mid-${track.id}`}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-1\">\n                    <span className=\"text-xs text-gray-400\">High</span>\n                    <Slider\n                      value={[track.eq.high]}\n                      onValueChange={(value) => updateTrackParameter(track.id, 'eq-high', value[0])}\n                      max={100}\n                      step={1}\n                      orientation=\"vertical\"\n                      className=\"h-16\"\n                      data-testid={`track-eq-high-${track.id}`}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Track Controls */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-1\">\n                  <Button\n                    onClick={() => {\n                      const updatedTracks = tracks.map(t => \n                        t.id === track.id ? { ...t, isMuted: !t.isMuted } : t\n                      );\n                      onTracksChange?.(updatedTracks);\n                    }}\n                    size=\"sm\"\n                    variant={track.isMuted ? \"default\" : \"outline\"}\n                    className={`text-xs ${track.isMuted ? 'bg-red-500 text-white' : 'border-dark-400 text-white'}`}\n                    data-testid={`track-mute-${track.id}`}\n                  >\n                    MUTE\n                  </Button>\n                  \n                  <Button\n                    onClick={() => {\n                      const updatedTracks = tracks.map(t => \n                        t.id === track.id ? { ...t, isSolo: !t.isSolo } : t\n                      );\n                      onTracksChange?.(updatedTracks);\n                    }}\n                    size=\"sm\"\n                    variant={track.isSolo ? \"default\" : \"outline\"}\n                    className={`text-xs ${track.isSolo ? 'bg-yellow-500 text-white' : 'border-dark-400 text-white'}`}\n                    data-testid={`track-solo-${track.id}`}\n                  >\n                    SOLO\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":22584},"client/src/components/ai-discovery.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Brain, TrendingUp, Clock, Heart, Users, \n  Star, Zap, Music, Headphones, Play,\n  ThumbsUp, ThumbsDown, Shuffle, Target,\n  Sparkles, Filter, Search, MoreHorizontal\n} from \"lucide-react\";\n\ninterface AIRecommendation {\n  id: string;\n  type: 'track' | 'artist' | 'beat' | 'collaboration' | 'battle';\n  title: string;\n  artist: string;\n  thumbnail: string;\n  confidence: number;\n  reason: string;\n  tags: string[];\n  metadata: {\n    duration?: number;\n    bpm?: number;\n    genre?: string;\n    mood?: string;\n    energy?: number;\n    danceability?: number;\n    valence?: number;\n  };\n  engagement: {\n    likes: number;\n    views: number;\n    shares: number;\n  };\n  isLiked: boolean;\n  isPlaying: boolean;\n}\n\ninterface TrendingTopic {\n  id: string;\n  name: string;\n  type: 'hashtag' | 'challenge' | 'genre' | 'mood';\n  growth: number;\n  posts: number;\n  participants: number;\n  description: string;\n}\n\ninterface UserPreferences {\n  genres: string[];\n  moods: string[];\n  bpmRange: [number, number];\n  energy: number;\n  danceability: number;\n  valence: number;\n  discovery: number; // How adventurous the user wants recommendations\n}\n\ninterface AIDiscoveryProps {\n  onRecommendationInteraction?: (id: string, action: 'like' | 'dislike' | 'play' | 'share') => void;\n  onPreferencesUpdate?: (preferences: UserPreferences) => void;\n  className?: string;\n}\n\nexport default function AIDiscovery({\n  onRecommendationInteraction,\n  onPreferencesUpdate,\n  className = \"\"\n}: AIDiscoveryProps) {\n  const [recommendations, setRecommendations] = useState<AIRecommendation[]>([]);\n  const [trendingTopics, setTrendingTopics] = useState<TrendingTopic[]>([]);\n  const [preferences, setPreferences] = useState<UserPreferences>({\n    genres: ['Hip-Hop', 'Trap'],\n    moods: ['Energetic', 'Dark'],\n    bpmRange: [80, 160],\n    energy: 75,\n    danceability: 65,\n    valence: 50,\n    discovery: 60\n  });\n  const [activeTab, setActiveTab] = useState<'for-you' | 'trending' | 'discovery' | 'preferences'>('for-you');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);\n\n  // Mock AI recommendations\n  const generateRecommendations = useCallback((): AIRecommendation[] => {\n    const reasons = [\n      \"Based on your love for energetic trap beats\",\n      \"Similar artists you've liked recently\",\n      \"Trending in your area right now\",\n      \"Perfect for your current mood\",\n      \"Matches your recent listening patterns\",\n      \"Popular with artists you follow\",\n      \"Rising artist in your favorite genre\",\n      \"Recommended by AI based on your activity\"\n    ];\n\n    const genres = ['Hip-Hop', 'Trap', 'Drill', 'R&B', 'Pop', 'Afrobeats', 'Lo-Fi'];\n    const moods = ['Energetic', 'Chill', 'Dark', 'Uplifting', 'Aggressive', 'Romantic', 'Atmospheric'];\n\n    return Array.from({ length: 20 }, (_, i) => ({\n      id: `rec-${i}`,\n      type: ['track', 'artist', 'beat', 'collaboration', 'battle'][Math.floor(Math.random() * 5)] as AIRecommendation['type'],\n      title: `Recommendation ${i + 1}`,\n      artist: `Artist${i + 1}`,\n      thumbnail: `/api/placeholder/300/300?text=Rec${i}`,\n      confidence: 70 + Math.random() * 30,\n      reason: reasons[Math.floor(Math.random() * reasons.length)],\n      tags: ['ai-pick', 'trending', 'new', 'hot'].slice(0, Math.floor(Math.random() * 3) + 1),\n      metadata: {\n        duration: 120 + Math.random() * 180,\n        bpm: 80 + Math.random() * 80,\n        genre: genres[Math.floor(Math.random() * genres.length)],\n        mood: moods[Math.floor(Math.random() * moods.length)],\n        energy: Math.random() * 100,\n        danceability: Math.random() * 100,\n        valence: Math.random() * 100\n      },\n      engagement: {\n        likes: Math.floor(Math.random() * 10000),\n        views: Math.floor(Math.random() * 100000),\n        shares: Math.floor(Math.random() * 1000)\n      },\n      isLiked: Math.random() > 0.7,\n      isPlaying: false\n    }));\n  }, []);\n\n  // Mock trending topics\n  const generateTrendingTopics = useCallback((): TrendingTopic[] => {\n    return [\n      {\n        id: 'drill-beats',\n        name: '#DrillBeats',\n        type: 'hashtag',\n        growth: 156,\n        posts: 45670,\n        participants: 8234,\n        description: 'UK Drill beats are taking over the platform'\n      },\n      {\n        id: 'freestyle-friday',\n        name: '#FreestyleFriday',\n        type: 'challenge',\n        growth: 89,\n        posts: 12340,\n        participants: 5670,\n        description: 'Weekly freestyle challenge trending globally'\n      },\n      {\n        id: 'afrobeats-fusion',\n        name: 'Afrobeats Fusion',\n        type: 'genre',\n        growth: 234,\n        posts: 23450,\n        participants: 12340,\n        description: 'Afrobeats mixed with hip-hop is exploding'\n      },\n      {\n        id: 'late-night-vibes',\n        name: 'Late Night Vibes',\n        type: 'mood',\n        growth: 67,\n        posts: 34560,\n        participants: 15670,\n        description: 'Chill, atmospheric tracks for night sessions'\n      }\n    ];\n  }, []);\n\n  useEffect(() => {\n    setRecommendations(generateRecommendations());\n    setTrendingTopics(generateTrendingTopics());\n  }, [generateRecommendations, generateTrendingTopics]);\n\n  // Handle recommendation interactions\n  const handleInteraction = useCallback((id: string, action: 'like' | 'dislike' | 'play' | 'share') => {\n    setRecommendations(prev => prev.map(rec => \n      rec.id === id ? {\n        ...rec,\n        isLiked: action === 'like' ? !rec.isLiked : rec.isLiked,\n        isPlaying: action === 'play' ? !rec.isPlaying : rec.isPlaying\n      } : rec\n    ));\n    \n    onRecommendationInteraction?.(id, action);\n  }, [onRecommendationInteraction]);\n\n  // Refresh recommendations\n  const refreshRecommendations = useCallback(() => {\n    setIsRefreshing(true);\n    setTimeout(() => {\n      setRecommendations(generateRecommendations());\n      setIsRefreshing(false);\n    }, 1000);\n  }, [generateRecommendations]);\n\n  // Update preferences\n  const updatePreferences = useCallback((newPreferences: Partial<UserPreferences>) => {\n    const updated = { ...preferences, ...newPreferences };\n    setPreferences(updated);\n    onPreferencesUpdate?.(updated);\n  }, [preferences, onPreferencesUpdate]);\n\n  const getTypeIcon = (type: AIRecommendation['type']) => {\n    switch (type) {\n      case 'track': return '🎵';\n      case 'artist': return '🎤';\n      case 'beat': return '🥁';\n      case 'collaboration': return '🤝';\n      case 'battle': return '⚔️';\n      default: return '🎶';\n    }\n  };\n\n  const getTypeColor = (type: AIRecommendation['type']) => {\n    switch (type) {\n      case 'track': return 'bg-blue-500';\n      case 'artist': return 'bg-purple-500';\n      case 'beat': return 'bg-green-500';\n      case 'collaboration': return 'bg-orange-500';\n      case 'battle': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className={`h-screen w-full bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 text-white ${className}`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-800 bg-black/50 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Brain className=\"w-6 h-6 text-purple-400\" />\n            <h1 className=\"text-xl font-bold\">AI Discovery</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={refreshRecommendations}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white\"\n              disabled={isRefreshing}\n            >\n              <Shuffle className={`w-5 h-5 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n              <Filter className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex border-b border-gray-800\">\n        {[\n          { id: 'for-you', label: 'For You', icon: Target },\n          { id: 'trending', label: 'Trending', icon: TrendingUp },\n          { id: 'discovery', label: 'Discovery', icon: Sparkles },\n          { id: 'preferences', label: 'Tune AI', icon: Brain }\n        ].map((tab) => (\n          <Button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id as any)}\n            variant=\"ghost\"\n            className={`flex-1 rounded-none py-4 ${\n              activeTab === tab.id ? 'border-b-2 border-purple-500 text-purple-400' : 'text-gray-400'\n            }`}\n          >\n            <tab.icon className=\"w-4 h-4 mr-2\" />\n            {tab.label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {activeTab === 'for-you' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Handpicked for You</h2>\n              <p className=\"text-gray-400\">AI-curated content based on your taste and activity</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {recommendations.slice(0, 10).map((rec) => (\n                <Card key={rec.id} className=\"bg-black/50 border-gray-700 overflow-hidden\">\n                  <div className=\"relative\">\n                    <img \n                      src={rec.thumbnail} \n                      alt={rec.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    \n                    {/* Overlay controls */}\n                    <div className=\"absolute inset-0 bg-black/40 opacity-0 hover:opacity-100 transition-opacity flex items-center justify-center\">\n                      <Button\n                        onClick={() => handleInteraction(rec.id, 'play')}\n                        size=\"icon\"\n                        className=\"bg-white/20 hover:bg-white/30 rounded-full\"\n                      >\n                        <Play className=\"w-6 h-6\" />\n                      </Button>\n                    </div>\n\n                    {/* Type badge */}\n                    <Badge className={`absolute top-2 left-2 ${getTypeColor(rec.type)}`}>\n                      <span className=\"mr-1\">{getTypeIcon(rec.type)}</span>\n                      {rec.type}\n                    </Badge>\n\n                    {/* AI confidence */}\n                    <div className=\"absolute top-2 right-2 bg-black/70 px-2 py-1 rounded text-xs\">\n                      🤖 {Math.round(rec.confidence)}%\n                    </div>\n                  </div>\n\n                  <div className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-bold truncate\">{rec.title}</h3>\n                        <p className=\"text-sm text-gray-400\">by {rec.artist}</p>\n                      </div>\n                    </div>\n\n                    <p className=\"text-xs text-purple-400 mb-3\">{rec.reason}</p>\n\n                    {/* Metadata */}\n                    <div className=\"flex items-center justify-between text-xs text-gray-400 mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        {rec.metadata.bpm && <span>{rec.metadata.bpm} BPM</span>}\n                        {rec.metadata.genre && <span>{rec.metadata.genre}</span>}\n                        {rec.metadata.mood && <span>{rec.metadata.mood}</span>}\n                      </div>\n                    </div>\n\n                    {/* Audio features */}\n                    {rec.metadata.energy !== undefined && (\n                      <div className=\"space-y-1 mb-3\">\n                        <div className=\"flex justify-between text-xs text-gray-400\">\n                          <span>Energy</span>\n                          <span>{Math.round(rec.metadata.energy)}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-700 rounded-full h-1\">\n                          <div \n                            className=\"bg-green-500 h-1 rounded-full\"\n                            style={{ width: `${rec.metadata.energy}%` }}\n                          />\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Actions */}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n                        <Heart className=\"w-3 h-3\" />\n                        <span>{rec.engagement.likes.toLocaleString()}</span>\n                      </div>\n\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          onClick={() => handleInteraction(rec.id, 'like')}\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className={`w-8 h-8 ${rec.isLiked ? 'text-red-500' : 'text-gray-400'}`}\n                        >\n                          <Heart className={`w-4 h-4 ${rec.isLiked ? 'fill-current' : ''}`} />\n                        </Button>\n                        \n                        <Button\n                          onClick={() => handleInteraction(rec.id, 'dislike')}\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8 text-gray-400\"\n                        >\n                          <ThumbsDown className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <Button\n                          onClick={() => handleInteraction(rec.id, 'share')}\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8 text-gray-400\"\n                        >\n                          <MoreHorizontal className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'trending' && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">What's Trending</h2>\n              <p className=\"text-gray-400\">Hot topics and viral content right now</p>\n            </div>\n\n            {/* Trending Topics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n              {trendingTopics.map((topic) => (\n                <Card key={topic.id} className=\"bg-black/50 border-gray-700 p-4\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-lg\">{topic.name}</h3>\n                      <p className=\"text-sm text-gray-400 mb-2\">{topic.description}</p>\n                    </div>\n                    <Badge className=\"bg-green-500 ml-2\">\n                      <TrendingUp className=\"w-3 h-3 mr-1\" />\n                      +{topic.growth}%\n                    </Badge>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                    <div>\n                      <div className=\"font-bold text-white\">{topic.posts.toLocaleString()}</div>\n                      <div className=\"text-gray-400\">Posts</div>\n                    </div>\n                    <div>\n                      <div className=\"font-bold text-white\">{topic.participants.toLocaleString()}</div>\n                      <div className=\"text-gray-400\">Artists</div>\n                    </div>\n                    <div>\n                      <div className=\"font-bold text-green-400\">+{topic.growth}%</div>\n                      <div className=\"text-gray-400\">Growth</div>\n                    </div>\n                  </div>\n\n                  <Button className=\"w-full mt-4 bg-purple-500 hover:bg-purple-600\">\n                    Explore\n                  </Button>\n                </Card>\n              ))}\n            </div>\n\n            {/* Trending Content */}\n            <div>\n              <h3 className=\"text-lg font-bold mb-4\">Trending Content</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {recommendations.filter(r => r.tags.includes('trending')).slice(0, 6).map((rec) => (\n                  <Card key={rec.id} className=\"bg-black/50 border-gray-700 overflow-hidden\">\n                    <img \n                      src={rec.thumbnail} \n                      alt={rec.title}\n                      className=\"w-full h-32 object-cover\"\n                    />\n                    <div className=\"p-3\">\n                      <h4 className=\"font-semibold text-sm truncate\">{rec.title}</h4>\n                      <p className=\"text-xs text-gray-400\">by {rec.artist}</p>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n                          <TrendingUp className=\"w-3 h-3\" />\n                          <span>Trending</span>\n                        </div>\n                        <Button size=\"sm\" variant=\"ghost\" className=\"text-white p-1\">\n                          <Play className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'discovery' && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Discover New Music</h2>\n              <p className=\"text-gray-400\">Explore beyond your comfort zone</p>\n            </div>\n\n            {/* Discovery Controls */}\n            <Card className=\"bg-black/50 border-gray-700 p-4 mb-6\">\n              <h3 className=\"font-semibold mb-4\">Discovery Settings</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Adventure Level</label>\n                  <Slider\n                    value={[preferences.discovery]}\n                    onValueChange={(value) => updatePreferences({ discovery: value[0] })}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n                    <span>Safe</span>\n                    <span>Adventurous</span>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Discovery Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {recommendations.filter(r => r.confidence < 70).map((rec) => (\n                <Card key={rec.id} className=\"bg-black/50 border-gray-700 overflow-hidden\">\n                  <img \n                    src={rec.thumbnail} \n                    alt={rec.title}\n                    className=\"w-full h-40 object-cover\"\n                  />\n                  <div className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <Sparkles className=\"w-3 h-3 mr-1\" />\n                        Discovery\n                      </Badge>\n                      <span className=\"text-xs text-yellow-400\">\n                        {Math.round(rec.confidence)}% match\n                      </span>\n                    </div>\n                    \n                    <h3 className=\"font-bold truncate\">{rec.title}</h3>\n                    <p className=\"text-sm text-gray-400\">by {rec.artist}</p>\n                    \n                    <div className=\"flex items-center justify-between mt-3\">\n                      <Button\n                        onClick={() => handleInteraction(rec.id, 'play')}\n                        size=\"sm\"\n                        className=\"bg-purple-500 hover:bg-purple-600\"\n                      >\n                        <Play className=\"w-3 h-3 mr-1\" />\n                        Try It\n                      </Button>\n                      \n                      <div className=\"flex space-x-1\">\n                        <Button\n                          onClick={() => handleInteraction(rec.id, 'like')}\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8 text-gray-400\"\n                        >\n                          <ThumbsUp className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          onClick={() => handleInteraction(rec.id, 'dislike')}\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"w-8 h-8 text-gray-400\"\n                        >\n                          <ThumbsDown className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'preferences' && (\n          <div className=\"space-y-6 max-w-2xl mx-auto\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Tune Your AI</h2>\n              <p className=\"text-gray-400\">Help AI understand your taste better</p>\n            </div>\n\n            {/* Audio Preferences */}\n            <Card className=\"bg-black/50 border-gray-700 p-6\">\n              <h3 className=\"font-semibold mb-4\">Audio Preferences</h3>\n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Energy Level</label>\n                  <Slider\n                    value={[preferences.energy]}\n                    onValueChange={(value) => updatePreferences({ energy: value[0] })}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"text-xs text-gray-400 mt-1\">{preferences.energy}% energy</div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Danceability</label>\n                  <Slider\n                    value={[preferences.danceability]}\n                    onValueChange={(value) => updatePreferences({ danceability: value[0] })}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"text-xs text-gray-400 mt-1\">{preferences.danceability}% danceability</div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Mood (Valence)</label>\n                  <Slider\n                    value={[preferences.valence]}\n                    onValueChange={(value) => updatePreferences({ valence: value[0] })}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n                    <span>Sad/Dark</span>\n                    <span>Happy/Uplifting</span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">BPM Range</label>\n                  <Slider\n                    value={preferences.bpmRange}\n                    onValueChange={(value) => updatePreferences({ bpmRange: value as [number, number] })}\n                    max={200}\n                    min={60}\n                    step={5}\n                    className=\"w-full\"\n                  />\n                  <div className=\"text-xs text-gray-400 mt-1\">\n                    {preferences.bpmRange[0]} - {preferences.bpmRange[1]} BPM\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Genre Preferences */}\n            <Card className=\"bg-black/50 border-gray-700 p-6\">\n              <h3 className=\"font-semibold mb-4\">Favorite Genres</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                {['Hip-Hop', 'Trap', 'Drill', 'R&B', 'Pop', 'Afrobeats', 'Lo-Fi', 'Jazz', 'Rock'].map((genre) => (\n                  <Button\n                    key={genre}\n                    onClick={() => {\n                      const isSelected = preferences.genres.includes(genre);\n                      updatePreferences({\n                        genres: isSelected \n                          ? preferences.genres.filter(g => g !== genre)\n                          : [...preferences.genres, genre]\n                      });\n                    }}\n                    variant={preferences.genres.includes(genre) ? \"default\" : \"outline\"}\n                    className=\"text-sm\"\n                  >\n                    {genre}\n                  </Button>\n                ))}\n              </div>\n            </Card>\n\n            {/* Save Preferences */}\n            <Button \n              onClick={() => refreshRecommendations()}\n              className=\"w-full bg-purple-500 hover:bg-purple-600\"\n              size=\"lg\"\n            >\n              <Brain className=\"w-5 h-5 mr-2\" />\n              Update AI Recommendations\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":26133},"client/src/components/audio-streamer.tsx":{"content":"import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mic, MicOff, Volume2, VolumeX, Settings, Radio } from \"lucide-react\";\n\ninterface AudioStreamerProps {\n  isStreaming?: boolean;\n  onStreamStart?: (stream: MediaStream) => void;\n  onStreamEnd?: () => void;\n  onAudioData?: (audioData: Float32Array) => void;\n  quality?: 'low' | 'medium' | 'high' | 'ultra';\n  enableEffects?: boolean;\n  roomId?: string;\n}\n\nexport default function AudioStreamer({\n  isStreaming = false,\n  onStreamStart,\n  onStreamEnd,\n  onAudioData,\n  quality = 'high',\n  enableEffects = true,\n  roomId\n}: AudioStreamerProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState([75]);\n  const [audioLevel, setAudioLevel] = useState(0);\n  const [bitrate, setBitrate] = useState(64); // Mobile default\n  const [latency, setLatency] = useState(0);\n  const [isMobileDevice, setIsMobileDevice] = useState(false);\n  const [batteryLevel, setBatteryLevel] = useState(100);\n  const [networkType, setNetworkType] = useState('unknown');\n  \n  const streamRef = useRef<MediaStream | null>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const sourceRef = useRef<MediaStreamAudioSourceNode | null>(null);\n  const processorRef = useRef<ScriptProcessorNode | null>(null);\n  const gainNodeRef = useRef<GainNode | null>(null);\n\n  // Mobile-optimized audio quality settings\n  const getAudioConstraints = useCallback(() => {\n    const qualitySettings = {\n      low: { sampleRate: 22050, channelCount: 1, bitrate: 32 }, // Mobile data saving\n      medium: { sampleRate: 22050, channelCount: 1, bitrate: 64 }, // Standard mobile\n      high: { sampleRate: 44100, channelCount: 2, bitrate: 96 }, // WiFi mobile\n      ultra: { sampleRate: 44100, channelCount: 2, bitrate: 128 } // Mobile max (reduced from 256)\n    };\n\n    const settings = qualitySettings[quality];\n    setBitrate(settings.bitrate);\n\n    return {\n      audio: {\n        sampleRate: settings.sampleRate,\n        channelCount: settings.channelCount,\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: true,\n        latency: isMobileDevice ? 0.02 : 0.01, // Higher latency on mobile for stability\n        sampleSize: 16\n      }\n    };\n  }, [quality]);\n\n  // Initialize audio processing\n  const initializeAudioProcessing = useCallback(async (stream: MediaStream) => {\n    try {\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)({\n        sampleRate: quality === 'ultra' ? 48000 : 44100,\n        latencyHint: 'interactive'\n      });\n\n      const audioContext = audioContextRef.current;\n      await audioContext.resume();\n\n      // Create audio nodes\n      sourceRef.current = audioContext.createMediaStreamSource(stream);\n      analyserRef.current = audioContext.createAnalyser();\n      gainNodeRef.current = audioContext.createGain();\n      processorRef.current = audioContext.createScriptProcessor(2048, 1, 1);\n\n      // Configure analyser for real-time visualization\n      analyserRef.current.fftSize = 2048;\n      analyserRef.current.smoothingTimeConstant = 0.3;\n\n      // Configure gain\n      gainNodeRef.current.gain.value = volume[0] / 100;\n\n      // Audio processing chain\n      sourceRef.current.connect(analyserRef.current);\n      analyserRef.current.connect(gainNodeRef.current);\n      \n      if (enableEffects) {\n        gainNodeRef.current.connect(processorRef.current);\n        processorRef.current.connect(audioContext.destination);\n      } else {\n        gainNodeRef.current.connect(audioContext.destination);\n      }\n\n      // Real-time audio level monitoring\n      const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n      \n      const updateAudioLevel = () => {\n        if (analyserRef.current && !isMuted) {\n          analyserRef.current.getByteFrequencyData(dataArray);\n          const average = dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;\n          setAudioLevel(average / 255 * 100);\n          \n          // Send audio data for visualization\n          if (onAudioData) {\n            const floatArray = new Float32Array(dataArray.length);\n            for (let i = 0; i < dataArray.length; i++) {\n              floatArray[i] = dataArray[i] / 255;\n            }\n            onAudioData(floatArray);\n          }\n        }\n        \n        if (isRecording) {\n          requestAnimationFrame(updateAudioLevel);\n        }\n      };\n\n      updateAudioLevel();\n      \n      // Measure latency\n      const startTime = audioContext.currentTime;\n      setTimeout(() => {\n        setLatency(Math.round((audioContext.currentTime - startTime) * 1000));\n      }, 100);\n\n    } catch (error) {\n      console.error('Audio processing initialization failed:', error);\n    }\n  }, [quality, volume, isMuted, enableEffects, isRecording, onAudioData, isMobileDevice]);\n\n  // Start streaming\n  const startStreaming = useCallback(async () => {\n    try {\n      const constraints = getAudioConstraints();\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      \n      streamRef.current = stream;\n      setIsRecording(true);\n      \n      await initializeAudioProcessing(stream);\n      onStreamStart?.(stream);\n      \n    } catch (error) {\n      console.error('Failed to start audio stream:', error);\n    }\n  }, [getAudioConstraints, initializeAudioProcessing, onStreamStart]);\n\n  // Stop streaming\n  const stopStreaming = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n\n    setIsRecording(false);\n    setAudioLevel(0);\n    onStreamEnd?.();\n  }, [onStreamEnd]);\n\n  // Toggle mute\n  const toggleMute = useCallback(() => {\n    if (streamRef.current) {\n      const audioTrack = streamRef.current.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = isMuted;\n        setIsMuted(!isMuted);\n      }\n    }\n  }, [isMuted]);\n\n  // Update volume\n  useEffect(() => {\n    if (gainNodeRef.current) {\n      gainNodeRef.current.gain.value = isMuted ? 0 : volume[0] / 100;\n    }\n  }, [volume, isMuted]);\n\n  // Detect mobile device and monitor battery/network\n  useEffect(() => {\n    const checkMobileDevice = () => {\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\n                       window.innerWidth <= 768;\n      setIsMobileDevice(isMobile);\n    };\n\n    const monitorBattery = async () => {\n      if ('getBattery' in navigator) {\n        try {\n          const battery = await (navigator as any).getBattery();\n          setBatteryLevel(Math.round(battery.level * 100));\n          \n          battery.addEventListener('levelchange', () => {\n            setBatteryLevel(Math.round(battery.level * 100));\n          });\n        } catch (error) {\n          console.log('Battery API not available');\n        }\n      }\n    };\n\n    const monitorNetwork = () => {\n      if ('connection' in navigator) {\n        const connection = (navigator as any).connection;\n        setNetworkType(connection.effectiveType || 'unknown');\n        \n        connection.addEventListener('change', () => {\n          setNetworkType(connection.effectiveType || 'unknown');\n        });\n      }\n    };\n\n    checkMobileDevice();\n    monitorBattery();\n    monitorNetwork();\n    \n    window.addEventListener('resize', checkMobileDevice);\n    return () => window.removeEventListener('resize', checkMobileDevice);\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopStreaming();\n    };\n  }, [stopStreaming]);\n\n  return (\n    <Card className=\"bg-dark-200 border-dark-400 p-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Radio className={`w-5 h-5 ${isRecording ? 'text-red-500 animate-pulse' : 'text-gray-400'}`} />\n            <h3 className=\"text-lg font-semibold text-white\">Audio Stream</h3>\n            {roomId && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Room: {roomId}\n              </Badge>\n            )}\n          </div>\n          <Badge \n            className={`${isRecording ? 'bg-red-500' : 'bg-gray-500'} text-white`}\n            data-testid=\"stream-status\"\n          >\n            {isRecording ? 'LIVE' : 'OFFLINE'}\n          </Badge>\n        </div>\n\n        {/* Audio Level Visualization */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-400\">Audio Level</span>\n            <span className=\"text-sm text-gray-400\">{Math.round(audioLevel)}%</span>\n          </div>\n          <div className=\"w-full bg-dark-400 rounded-full h-2\">\n            <div \n              className={`h-2 rounded-full transition-all duration-100 ${\n                audioLevel > 80 ? 'bg-red-500' : \n                audioLevel > 60 ? 'bg-yellow-500' : \n                'bg-green-500'\n              }`}\n              style={{ width: `${audioLevel}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Controls - Mobile Optimized */}\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm text-gray-400\">Volume</label>\n            <div className=\"flex items-center space-x-3\">\n              <VolumeX className=\"w-5 h-5 text-gray-400\" />\n              <Slider\n                value={volume}\n                onValueChange={setVolume}\n                max={100}\n                step={1}\n                className=\"flex-1 h-6\" // Larger for mobile touch\n                data-testid=\"volume-slider\"\n              />\n              <Volume2 className=\"w-5 h-5 text-gray-400\" />\n              <span className=\"text-sm text-white w-10 text-right\">{volume[0]}</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"space-y-1\">\n              <label className=\"text-xs text-gray-400\">Quality</label>\n              <div className=\"flex flex-wrap gap-1\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {quality.toUpperCase()}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {bitrate}kbps\n                </Badge>\n              </div>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <label className=\"text-xs text-gray-400\">Status</label>\n              <div className=\"flex flex-wrap gap-1\">\n                {isMobileDevice && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    📱 Mobile\n                  </Badge>\n                )}\n                {batteryLevel < 100 && (\n                  <Badge variant=\"outline\" className={`text-xs ${\n                    batteryLevel < 20 ? 'text-red-500' : 'text-white'\n                  }`}>\n                    🔋 {batteryLevel}%\n                  </Badge>\n                )}\n                {networkType !== 'unknown' && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    📶 {networkType}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Stream Controls - Mobile Touch Friendly */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Button\n            onClick={isRecording ? stopStreaming : startStreaming}\n            className={`${\n              isRecording \n                ? 'bg-red-500 hover:bg-red-600' \n                : 'bg-purple-500 hover:bg-purple-600'\n            } text-white font-medium h-12 text-base flex-1 sm:flex-initial`} // Larger for mobile\n            data-testid=\"stream-toggle\"\n          >\n            {isRecording ? 'Stop Stream' : 'Start Stream'}\n          </Button>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={toggleMute}\n              variant=\"outline\"\n              className={`border-dark-400 ${isMuted ? 'text-red-500' : 'text-white'} h-12 px-4 flex-1 sm:flex-initial`}\n              disabled={!isRecording}\n              data-testid=\"mute-toggle\"\n            >\n              {isMuted ? <MicOff className=\"w-5 h-5 mr-2\" /> : <Mic className=\"w-5 h-5 mr-2\" />}\n              {isMuted ? 'Unmute' : 'Mute'}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              className=\"border-dark-400 text-white h-12 px-4\"\n              data-testid=\"audio-settings\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Stream Info */}\n        {isRecording && (\n          <div className=\"text-xs text-gray-400 space-y-1\">\n            <div>Sample Rate: {quality === 'ultra' ? '48kHz' : '44.1kHz'}</div>\n            <div>Channels: {quality === 'low' || quality === 'medium' ? 'Mono' : 'Stereo'}</div>\n            <div>Bitrate: {bitrate}kbps</div>\n            {latency > 0 && <div>Latency: {latency}ms</div>}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}","size_bytes":13593},"client/src/components/beat-marketplace.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Play, Pause, Download, Heart, Share, \n  Music, Headphones, Star, Crown, Flame,\n  ShoppingCart, DollarSign, Filter, Search,\n  Volume2, VolumeX, SkipForward, SkipBack,\n  Repeat, Shuffle, TrendingUp, Clock\n} from \"lucide-react\";\n\ninterface Beat {\n  id: string;\n  name: string;\n  producer: {\n    id: string;\n    username: string;\n    avatar: string;\n    isVerified: boolean;\n    followerCount: number;\n  };\n  bpm: number;\n  genre: string;\n  mood: string;\n  key: string;\n  duration: number;\n  price: number;\n  originalPrice?: number;\n  preview: string;\n  artwork: string;\n  tags: string[];\n  likes: number;\n  downloads: number;\n  isLiked: boolean;\n  isPlaying: boolean;\n  isTrending: boolean;\n  isExclusive: boolean;\n  license: 'free' | 'basic' | 'premium' | 'exclusive';\n  createdAt: Date;\n}\n\ninterface BeatMarketplaceProps {\n  onBeatSelect?: (beat: Beat) => void;\n  onBeatPurchase?: (beatId: string, license: string) => void;\n  onBeatLike?: (beatId: string) => void;\n  onBeatPlay?: (beatId: string) => void;\n  onProducerFollow?: (producerId: string) => void;\n  className?: string;\n}\n\nexport default function BeatMarketplace({\n  onBeatSelect,\n  onBeatPurchase,\n  onBeatLike,\n  onBeatPlay,\n  onProducerFollow,\n  className = \"\"\n}: BeatMarketplaceProps) {\n  const [beats, setBeats] = useState<Beat[]>([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [volume, setVolume] = useState([75]);\n  const [showFilters, setShowFilters] = useState(false);\n  const [showLicenseModal, setShowLicenseModal] = useState<Beat | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState<string>('');\n  const [priceRange, setPriceRange] = useState<[number, number]>([0, 100]);\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Mock beat data\n  const generateMockBeats = useCallback((): Beat[] => {\n    const genres = ['Trap', 'Drill', 'R&B', 'Hip-Hop', 'Pop', 'Afrobeats', 'Lo-Fi'];\n    const moods = ['Dark', 'Energetic', 'Chill', 'Aggressive', 'Melodic', 'Bouncy', 'Atmospheric'];\n    const keys = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    \n    return Array.from({ length: 50 }, (_, i) => ({\n      id: `beat-${i}`,\n      name: `Beat ${i + 1} ${['Fire', 'Vibes', 'Dreams', 'Mode', 'Wave', 'Flow'][i % 6]}`,\n      producer: {\n        id: `producer-${i % 10}`,\n        username: ['BeatMaster', 'TrapLord', 'MelodyKing', 'RhythmQueen', 'SoundWave', 'BeatBox', 'ProducerX', 'WaveKing', 'BeatSmith', 'SoundCraft'][i % 10],\n        avatar: ['🎹', '🎵', '🎧', '🔥', '⚡', '👑', '🌟', '💫', '🎤', '🎛️'][i % 10],\n        isVerified: Math.random() > 0.6,\n        followerCount: Math.floor(Math.random() * 50000) + 1000\n      },\n      bpm: 60 + Math.floor(Math.random() * 120),\n      genre: genres[Math.floor(Math.random() * genres.length)],\n      mood: moods[Math.floor(Math.random() * moods.length)],\n      key: keys[Math.floor(Math.random() * keys.length)],\n      duration: 120 + Math.floor(Math.random() * 180), // 2-5 minutes\n      price: Math.random() > 0.3 ? Math.floor(Math.random() * 50) + 5 : 0,\n      originalPrice: Math.random() > 0.7 ? Math.floor(Math.random() * 30) + 20 : undefined,\n      preview: `/api/beat-preview/${i}`,\n      artwork: `/api/placeholder/300/300?text=Beat${i}`,\n      tags: ['type beat', 'hard', 'melody', 'drums'].slice(0, Math.floor(Math.random() * 3) + 1),\n      likes: Math.floor(Math.random() * 5000),\n      downloads: Math.floor(Math.random() * 2000),\n      isLiked: Math.random() > 0.8,\n      isPlaying: false,\n      isTrending: Math.random() > 0.7,\n      isExclusive: Math.random() > 0.9,\n      license: ['free', 'basic', 'premium', 'exclusive'][Math.floor(Math.random() * 4)] as Beat['license'],\n      createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000)\n    }));\n  }, []);\n\n  // Initialize beats\n  useEffect(() => {\n    const mockBeats = generateMockBeats();\n    setBeats(mockBeats);\n  }, [generateMockBeats]);\n\n  // Swipe handlers\n  const handlers = useSwipeable({\n    onSwipedUp: () => {\n      if (currentIndex < beats.length - 1) {\n        setCurrentIndex(prev => prev + 1);\n      }\n    },\n    onSwipedDown: () => {\n      if (currentIndex > 0) {\n        setCurrentIndex(prev => prev - 1);\n      }\n    },\n    trackMouse: true\n  });\n\n  const currentBeat = beats[currentIndex];\n\n  // Audio controls\n  const togglePlay = useCallback(() => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n      onBeatPlay?.(currentBeat.id);\n    }\n  }, [isPlaying, currentBeat?.id, onBeatPlay]);\n\n  const handleLike = useCallback(() => {\n    if (!currentBeat) return;\n    \n    setBeats(prev => prev.map(beat => \n      beat.id === currentBeat.id \n        ? { \n            ...beat, \n            isLiked: !beat.isLiked,\n            likes: beat.isLiked ? beat.likes - 1 : beat.likes + 1\n          }\n        : beat\n    ));\n    \n    onBeatLike?.(currentBeat.id);\n  }, [currentBeat, onBeatLike]);\n\n  const handlePurchase = useCallback((license: string) => {\n    if (!currentBeat) return;\n    onBeatPurchase?.(currentBeat.id, license);\n    setShowLicenseModal(null);\n  }, [currentBeat, onBeatPurchase]);\n\n  // Format duration\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // License options\n  const licenseOptions = [\n    { \n      type: 'free', \n      name: 'Free Download', \n      price: 0, \n      features: ['MP3 Download', 'Non-commercial use', 'Producer tag included'] \n    },\n    { \n      type: 'basic', \n      name: 'Basic License', \n      price: 25, \n      features: ['WAV + MP3', 'Commercial use', 'No producer tag', 'Up to 5K sales'] \n    },\n    { \n      type: 'premium', \n      name: 'Premium License', \n      price: 75, \n      features: ['WAV + MP3 + Stems', 'Unlimited sales', 'Commercial use', 'Radio/TV rights'] \n    },\n    { \n      type: 'exclusive', \n      name: 'Exclusive Rights', \n      price: 500, \n      features: ['Full ownership', 'All file formats', 'Producer credit removal', 'Resale rights'] \n    }\n  ];\n\n  if (!currentBeat) {\n    return (\n      <div className=\"h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading beats...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={`h-screen w-full bg-black relative overflow-hidden ${className}`}\n      {...handlers}\n      ref={containerRef}\n    >\n      {/* Background artwork */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center opacity-20\"\n        style={{ backgroundImage: `url(${currentBeat.artwork})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent\" />\n\n      {/* Header */}\n      <div className=\"absolute top-4 left-4 right-4 z-20\">\n        <div className=\"flex items-center justify-between text-white\">\n          <div className=\"flex items-center space-x-2\">\n            <Badge className=\"bg-purple-500 text-white px-3 py-1\">\n              🎵 BEAT STORE\n            </Badge>\n            {currentBeat.isTrending && (\n              <Badge className=\"bg-red-500 text-white px-2 py-1\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                Trending\n              </Badge>\n            )}\n            {currentBeat.isExclusive && (\n              <Badge className=\"bg-yellow-500 text-black px-2 py-1\">\n                <Crown className=\"w-3 h-3 mr-1\" />\n                Exclusive\n              </Badge>\n            )}\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"text-white\"\n          >\n            <Filter className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white\">\n        {/* Beat artwork */}\n        <motion.div\n          key={currentBeat.id}\n          initial={{ scale: 0.8, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          className=\"relative mb-8\"\n        >\n          <div className=\"w-64 h-64 rounded-xl overflow-hidden shadow-2xl\">\n            <img \n              src={currentBeat.artwork} \n              alt={currentBeat.name}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          \n          {/* Play button overlay */}\n          <Button\n            onClick={togglePlay}\n            size=\"icon\"\n            className=\"absolute inset-0 m-auto w-20 h-20 rounded-full bg-white/20 backdrop-blur-sm hover:bg-white/30 border-2 border-white\"\n          >\n            {isPlaying ? <Pause className=\"w-8 h-8\" /> : <Play className=\"w-8 h-8\" />}\n          </Button>\n        </motion.div>\n\n        {/* Beat info */}\n        <div className=\"text-center space-y-4 max-w-sm\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">{currentBeat.name}</h2>\n            <div className=\"flex items-center justify-center space-x-2 text-gray-300\">\n              <span>by</span>\n              <span className=\"font-semibold\">{currentBeat.producer.username}</span>\n              {currentBeat.producer.isVerified && <Crown className=\"w-4 h-4 text-yellow-400\" />}\n            </div>\n          </div>\n\n          {/* Beat details */}\n          <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-400\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-white\">{currentBeat.bpm}</div>\n              <div>BPM</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-white\">{currentBeat.key}</div>\n              <div>Key</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-white\">{currentBeat.genre}</div>\n              <div>Genre</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-white\">{formatDuration(currentBeat.duration)}</div>\n              <div>Length</div>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div className=\"flex flex-wrap justify-center gap-2\">\n            {currentBeat.tags.map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                #{tag}\n              </Badge>\n            ))}\n          </div>\n\n          {/* Price */}\n          <div className=\"text-center\">\n            {currentBeat.price === 0 ? (\n              <div className=\"text-2xl font-bold text-green-400\">FREE</div>\n            ) : (\n              <div className=\"space-y-1\">\n                <div className=\"text-2xl font-bold\">\n                  ${currentBeat.price}\n                  {currentBeat.originalPrice && (\n                    <span className=\"text-lg text-gray-400 line-through ml-2\">\n                      ${currentBeat.originalPrice}\n                    </span>\n                  )}\n                </div>\n                <div className=\"text-sm text-gray-400\">Starting price</div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Audio element */}\n      <audio\n        ref={audioRef}\n        src={currentBeat.preview}\n        onTimeUpdate={(e) => setCurrentTime(e.currentTarget.currentTime)}\n        onEnded={() => setIsPlaying(false)}\n      />\n\n      {/* Bottom controls */}\n      <div className=\"absolute bottom-4 left-4 right-4 z-20 space-y-4\">\n        {/* Audio controls */}\n        <div className=\"flex items-center justify-center space-x-4 text-white\">\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n            <SkipBack className=\"w-5 h-5\" />\n          </Button>\n          \n          <Button onClick={togglePlay} size=\"icon\" className=\"bg-white text-black hover:bg-gray-200\">\n            {isPlaying ? <Pause className=\"w-5 h-5\" /> : <Play className=\"w-5 h-5\" />}\n          </Button>\n          \n          <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n            <SkipForward className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Action buttons */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={handleLike}\n              variant=\"ghost\"\n              size=\"icon\"\n              className={`text-white ${currentBeat.isLiked ? 'text-red-500' : ''}`}\n            >\n              <Heart className={`w-5 h-5 ${currentBeat.isLiked ? 'fill-current' : ''}`} />\n            </Button>\n            \n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n              <Share className=\"w-5 h-5\" />\n            </Button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <VolumeX className=\"w-4 h-4 text-gray-400\" />\n              <Slider\n                value={volume}\n                onValueChange={setVolume}\n                max={100}\n                step={1}\n                className=\"w-20\"\n              />\n              <Volume2 className=\"w-4 h-4 text-gray-400\" />\n            </div>\n          </div>\n\n          <Button\n            onClick={() => setShowLicenseModal(currentBeat)}\n            className=\"bg-purple-500 hover:bg-purple-600\"\n            size=\"lg\"\n          >\n            <ShoppingCart className=\"w-5 h-5 mr-2\" />\n            {currentBeat.price === 0 ? 'Download' : 'Buy Now'}\n          </Button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"flex items-center justify-center space-x-6 text-sm text-gray-400\">\n          <div className=\"flex items-center space-x-1\">\n            <Heart className=\"w-4 h-4\" />\n            <span>{currentBeat.likes.toLocaleString()}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Download className=\"w-4 h-4\" />\n            <span>{currentBeat.downloads.toLocaleString()}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>{Math.floor((Date.now() - currentBeat.createdAt.getTime()) / (1000 * 60 * 60 * 24))}d ago</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation hints */}\n      <div className=\"absolute top-1/2 left-4 transform -translate-y-1/2 text-white/50 text-xs\">\n        ↓ Next\n      </div>\n      <div className=\"absolute top-1/2 right-4 transform -translate-y-1/2 text-white/50 text-xs\">\n        ↑ Previous\n      </div>\n\n      {/* License modal */}\n      <AnimatePresence>\n        {showLicenseModal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n            onClick={() => setShowLicenseModal(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              onClick={(e) => e.stopPropagation()}\n              className=\"bg-dark-200 rounded-xl p-6 max-w-md w-full max-h-96 overflow-y-auto\"\n            >\n              <div className=\"text-white\">\n                <h3 className=\"text-xl font-bold mb-4\">Choose License</h3>\n                \n                <div className=\"space-y-3\">\n                  {licenseOptions.map((option) => (\n                    <Button\n                      key={option.type}\n                      onClick={() => handlePurchase(option.type)}\n                      variant=\"outline\"\n                      className=\"w-full p-4 h-auto border-gray-600 hover:border-purple-500 text-left\"\n                    >\n                      <div className=\"flex justify-between items-start w-full\">\n                        <div>\n                          <div className=\"font-semibold\">{option.name}</div>\n                          <div className=\"text-sm text-gray-400 mt-1\">\n                            {option.features.join(' • ')}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">\n                            {option.price === 0 ? 'FREE' : `$${option.price}`}\n                          </div>\n                        </div>\n                      </div>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":17335},"client/src/components/collaboration-rooms.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Users, Mic, MicOff, Volume2, VolumeX, \n  Crown, Settings, UserPlus, UserMinus,\n  Music, Headphones, Circle, Square,\n  MoreHorizontal, Hand, Clock, Flame\n} from \"lucide-react\";\n\ninterface Participant {\n  id: string;\n  username: string;\n  avatar: string;\n  isVerified: boolean;\n  isMuted: boolean;\n  isOwner: boolean;\n  isSpeaking: boolean;\n  audioLevel: number;\n  joinedAt: Date;\n}\n\ninterface CollaborationRoom {\n  id: string;\n  name: string;\n  type: 'cypher' | 'remix' | 'beat-session' | 'jam' | 'workshop';\n  description: string;\n  maxParticipants: number;\n  currentParticipants: number;\n  participants: Participant[];\n  owner: Participant;\n  beat?: {\n    id: string;\n    name: string;\n    bpm: number;\n    producer: string;\n  };\n  isRecording: boolean;\n  recordingDuration: number;\n  isLive: boolean;\n  tags: string[];\n  createdAt: Date;\n}\n\ninterface CollaborationRoomsProps {\n  onJoinRoom?: (roomId: string) => void;\n  onLeaveRoom?: (roomId: string) => void;\n  onCreateRoom?: (roomData: any) => void;\n  onInviteUser?: (roomId: string, userId: string) => void;\n  className?: string;\n}\n\nexport default function CollaborationRooms({\n  onJoinRoom,\n  onLeaveRoom,\n  onCreateRoom,\n  onInviteUser,\n  className = \"\"\n}: CollaborationRoomsProps) {\n  const [rooms, setRooms] = useState<CollaborationRoom[]>([]);\n  const [currentRoom, setCurrentRoom] = useState<CollaborationRoom | null>(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const [volume, setVolume] = useState([75]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showParticipants, setShowParticipants] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [queuePosition, setQueuePosition] = useState(0);\n  const [isInQueue, setIsInQueue] = useState(false);\n\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Mock rooms data\n  const generateMockRooms = useCallback((): CollaborationRoom[] => {\n    const roomTypes: CollaborationRoom['type'][] = ['cypher', 'remix', 'beat-session', 'jam', 'workshop'];\n    const roomNames = [\n      'Late Night Cypher', 'Beat Making Lab', 'Freestyle Friday',\n      'Remix Workshop', 'Trap Session', 'R&B Vibes', 'Hip-Hop Heads',\n      'Producer Circle', 'New Artist Showcase', 'Collaboration Station'\n    ];\n\n    return Array.from({ length: 10 }, (_, i) => {\n      const type = roomTypes[Math.floor(Math.random() * roomTypes.length)];\n      const maxParticipants = [4, 6, 8, 10][Math.floor(Math.random() * 4)];\n      const currentParticipants = Math.floor(Math.random() * maxParticipants) + 1;\n      \n      const participants: Participant[] = Array.from({ length: currentParticipants }, (_, j) => ({\n        id: `user-${i}-${j}`,\n        username: `User${j + 1}`,\n        avatar: ['🎤', '🎹', '🎧', '🔥', '⚡'][j % 5],\n        isVerified: Math.random() > 0.7,\n        isMuted: Math.random() > 0.8,\n        isOwner: j === 0,\n        isSpeaking: Math.random() > 0.7,\n        audioLevel: Math.random() * 100,\n        joinedAt: new Date(Date.now() - Math.random() * 3600000)\n      }));\n\n      return {\n        id: `room-${i}`,\n        name: roomNames[i],\n        type,\n        description: `${type === 'cypher' ? 'Freestyle rap session' : \n                     type === 'remix' ? 'Collaborative remixing' :\n                     type === 'beat-session' ? 'Beat making together' :\n                     type === 'jam' ? 'Musical jam session' : 'Learning workshop'}`,\n        maxParticipants,\n        currentParticipants,\n        participants,\n        owner: participants[0],\n        beat: Math.random() > 0.5 ? {\n          id: `beat-${i}`,\n          name: 'Session Beat',\n          bpm: 120 + Math.floor(Math.random() * 40),\n          producer: 'BeatMaster'\n        } : undefined,\n        isRecording: Math.random() > 0.8,\n        recordingDuration: Math.floor(Math.random() * 1800),\n        isLive: Math.random() > 0.3,\n        tags: ['freestyle', 'collaboration', 'live'].slice(0, Math.floor(Math.random() * 3) + 1),\n        createdAt: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000)\n      };\n    });\n  }, []);\n\n  useEffect(() => {\n    setRooms(generateMockRooms());\n  }, [generateMockRooms]);\n\n  // Recording timer\n  useEffect(() => {\n    if (isRecording) {\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isRecording]);\n\n  const joinRoom = useCallback((room: CollaborationRoom) => {\n    setCurrentRoom(room);\n    onJoinRoom?.(room.id);\n  }, [onJoinRoom]);\n\n  const leaveRoom = useCallback(() => {\n    if (currentRoom) {\n      onLeaveRoom?.(currentRoom.id);\n      setCurrentRoom(null);\n      setIsInQueue(false);\n      setQueuePosition(0);\n    }\n  }, [currentRoom, onLeaveRoom]);\n\n  const toggleMute = useCallback(() => {\n    setIsMuted(!isMuted);\n  }, [isMuted]);\n\n  const joinQueue = useCallback(() => {\n    setIsInQueue(true);\n    setQueuePosition(Math.floor(Math.random() * 5) + 1);\n  }, []);\n\n  const startRecording = useCallback(() => {\n    setIsRecording(true);\n    setRecordingTime(0);\n  }, []);\n\n  const stopRecording = useCallback(() => {\n    setIsRecording(false);\n  }, []);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getRoomTypeIcon = (type: CollaborationRoom['type']) => {\n    switch (type) {\n      case 'cypher': return '🎤';\n      case 'remix': return '🎛️';\n      case 'beat-session': return '🥁';\n      case 'jam': return '🎵';\n      case 'workshop': return '📚';\n      default: return '🎶';\n    }\n  };\n\n  const getRoomTypeColor = (type: CollaborationRoom['type']) => {\n    switch (type) {\n      case 'cypher': return 'bg-red-500';\n      case 'remix': return 'bg-purple-500';\n      case 'beat-session': return 'bg-blue-500';\n      case 'jam': return 'bg-green-500';\n      case 'workshop': return 'bg-orange-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  // Room list view\n  if (!currentRoom) {\n    return (\n      <div className={`h-screen w-full bg-black text-white ${className}`}>\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-800\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-xl font-bold\">Collaboration Rooms</h1>\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              className=\"bg-purple-500 hover:bg-purple-600\"\n            >\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Create Room\n            </Button>\n          </div>\n        </div>\n\n        {/* Room list */}\n        <div className=\"p-4 space-y-4 max-h-screen overflow-y-auto\">\n          {rooms.map((room) => (\n            <Card key={room.id} className=\"bg-dark-200 border-gray-700 p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <span className=\"text-2xl\">{getRoomTypeIcon(room.type)}</span>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold text-white\">{room.name}</h3>\n                        {room.isLive && (\n                          <Badge className=\"bg-red-500 text-white px-2 py-1 text-xs animate-pulse\">\n                            LIVE\n                          </Badge>\n                        )}\n                        {room.isRecording && (\n                          <Badge className=\"bg-purple-500 text-white px-2 py-1 text-xs\">\n                            <Circle className=\"w-3 h-3 mr-1 fill-current\" />\n                            REC\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-400\">{room.description}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-400 mb-3\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"w-4 h-4\" />\n                      <span>{room.currentParticipants}/{room.maxParticipants}</span>\n                    </div>\n                    {room.beat && (\n                      <div className=\"flex items-center space-x-1\">\n                        <Music className=\"w-4 h-4\" />\n                        <span>{room.beat.name} ({room.beat.bpm} BPM)</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span>{Math.floor((Date.now() - room.createdAt.getTime()) / (1000 * 60))}m ago</span>\n                    </div>\n                  </div>\n\n                  {/* Participants preview */}\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    {room.participants.slice(0, 4).map((participant, index) => (\n                      <div key={participant.id} className=\"relative\">\n                        <div className=\"w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center text-sm\">\n                          {participant.avatar}\n                        </div>\n                        {participant.isSpeaking && (\n                          <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                        )}\n                        {participant.isOwner && (\n                          <Crown className=\"absolute -top-1 -right-1 w-3 h-3 text-yellow-400\" />\n                        )}\n                      </div>\n                    ))}\n                    {room.participants.length > 4 && (\n                      <div className=\"text-sm text-gray-400\">\n                        +{room.participants.length - 4} more\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Tags */}\n                  <div className=\"flex flex-wrap gap-2\">\n                    {room.tags.map((tag, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        #{tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Join button */}\n                <div className=\"ml-4\">\n                  <Button\n                    onClick={() => joinRoom(room)}\n                    disabled={room.currentParticipants >= room.maxParticipants}\n                    className={`${getRoomTypeColor(room.type)} hover:opacity-90`}\n                  >\n                    {room.currentParticipants >= room.maxParticipants ? 'Full' : 'Join'}\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Room view\n  return (\n    <div className={`h-screen w-full bg-gradient-to-br from-purple-900 via-blue-900 to-black text-white ${className}`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-800 bg-black/50 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              onClick={leaveRoom}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white\"\n            >\n              ←\n            </Button>\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xl\">{getRoomTypeIcon(currentRoom.type)}</span>\n                <h2 className=\"font-bold\">{currentRoom.name}</h2>\n                {currentRoom.isLive && (\n                  <Badge className=\"bg-red-500 text-white px-2 py-1 text-xs animate-pulse\">\n                    LIVE\n                  </Badge>\n                )}\n              </div>\n              <div className=\"text-sm text-gray-400\">{currentRoom.description}</div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={() => setShowParticipants(!showParticipants)}\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white\"\n            >\n              <Users className=\"w-5 h-5\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main room area */}\n      <div className=\"flex-1 p-6\">\n        {/* Center stage */}\n        <div className=\"text-center mb-8\">\n          {/* Current speaker or beat info */}\n          {currentRoom.beat ? (\n            <div className=\"space-y-4\">\n              <Music className=\"w-16 h-16 mx-auto text-purple-400\" />\n              <div>\n                <h3 className=\"text-2xl font-bold\">{currentRoom.beat.name}</h3>\n                <p className=\"text-gray-400\">by {currentRoom.beat.producer} • {currentRoom.beat.bpm} BPM</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <Mic className=\"w-16 h-16 mx-auto text-blue-400\" />\n              <div>\n                <h3 className=\"text-2xl font-bold\">Open Mic</h3>\n                <p className=\"text-gray-400\">Ready to freestyle? Join the queue!</p>\n              </div>\n            </div>\n          )}\n\n          {/* Queue status */}\n          {isInQueue && (\n            <div className=\"mt-6 bg-yellow-500/20 border border-yellow-500 rounded-lg p-4\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <Hand className=\"w-5 h-5\" />\n                <span>You're #{queuePosition} in queue</span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Participants grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6\">\n          {currentRoom.participants.map((participant) => (\n            <Card key={participant.id} className=\"bg-black/30 border-gray-700 p-4\">\n              <div className=\"text-center space-y-2\">\n                <div className=\"relative mx-auto\">\n                  <div className=\"w-16 h-16 rounded-full bg-gray-600 flex items-center justify-center text-2xl mx-auto\">\n                    {participant.avatar}\n                  </div>\n                  {participant.isSpeaking && (\n                    <div className=\"absolute inset-0 rounded-full border-4 border-green-500 animate-pulse\" />\n                  )}\n                  {participant.isOwner && (\n                    <Crown className=\"absolute -top-2 -right-2 w-6 h-6 text-yellow-400\" />\n                  )}\n                  {participant.isMuted && (\n                    <MicOff className=\"absolute -bottom-2 -right-2 w-5 h-5 text-red-500 bg-black rounded-full p-1\" />\n                  )}\n                </div>\n                \n                <div>\n                  <div className=\"font-semibold flex items-center justify-center space-x-1\">\n                    <span>{participant.username}</span>\n                    {participant.isVerified && <Crown className=\"w-3 h-3 text-yellow-400\" />}\n                  </div>\n                  \n                  {/* Audio level indicator */}\n                  {participant.isSpeaking && (\n                    <div className=\"w-full bg-gray-700 rounded-full h-1 mt-2\">\n                      <motion.div \n                        className=\"bg-green-500 h-1 rounded-full\"\n                        animate={{ width: `${participant.audioLevel}%` }}\n                        transition={{ duration: 0.1 }}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Bottom controls */}\n      <div className=\"p-4 bg-black/50 backdrop-blur-sm border-t border-gray-800\">\n        <div className=\"flex items-center justify-between\">\n          {/* Audio controls */}\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={toggleMute}\n              variant={isMuted ? \"destructive\" : \"default\"}\n              size=\"icon\"\n              className=\"rounded-full\"\n            >\n              {isMuted ? <MicOff className=\"w-5 h-5\" /> : <Mic className=\"w-5 h-5\" />}\n            </Button>\n\n            <div className=\"flex items-center space-x-2\">\n              <VolumeX className=\"w-4 h-4 text-gray-400\" />\n              <Slider\n                value={volume}\n                onValueChange={setVolume}\n                max={100}\n                step={1}\n                className=\"w-24\"\n              />\n              <Volume2 className=\"w-4 h-4 text-gray-400\" />\n            </div>\n          </div>\n\n          {/* Center actions */}\n          <div className=\"flex items-center space-x-4\">\n            {!isInQueue ? (\n              <Button\n                onClick={joinQueue}\n                className=\"bg-green-500 hover:bg-green-600\"\n              >\n                <Hand className=\"w-4 h-4 mr-2\" />\n                Raise Hand\n              </Button>\n            ) : (\n              <Button\n                onClick={() => setIsInQueue(false)}\n                variant=\"outline\"\n                className=\"border-yellow-500 text-yellow-500\"\n              >\n                <Hand className=\"w-4 h-4 mr-2\" />\n                In Queue #{queuePosition}\n              </Button>\n            )}\n\n            <Button\n              onClick={isRecording ? stopRecording : startRecording}\n              variant={isRecording ? \"destructive\" : \"default\"}\n              className={isRecording ? \"animate-pulse\" : \"\"}\n            >\n              {isRecording ? (\n                <>\n                  <Square className=\"w-4 h-4 mr-2\" />\n                  Stop ({formatTime(recordingTime)})\n                </>\n              ) : (\n                <>\n                  <Circle className=\"w-4 h-4 mr-2 fill-current\" />\n                  Record\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Right actions */}\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n              <UserPlus className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-white\">\n              <MoreHorizontal className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19322},"client/src/components/gamification-system.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Trophy, Star, Crown, Flame, Zap, Target,\n  Medal, Award, Gem, Sword, Shield, \n  TrendingUp, Calendar, Clock, Users,\n  Gift, Coins, Sparkles, CheckCircle\n} from \"lucide-react\";\n\ninterface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  points: number;\n  unlockedAt?: Date;\n  progress?: number;\n  maxProgress?: number;\n  category: 'battle' | 'streaming' | 'social' | 'creation' | 'collaboration';\n}\n\ninterface Skill {\n  id: string;\n  name: string;\n  level: number;\n  experience: number;\n  nextLevelXp: number;\n  category: 'freestyle' | 'rhythm' | 'creativity' | 'collaboration' | 'performance';\n  icon: string;\n  color: string;\n}\n\ninterface Streak {\n  type: 'daily' | 'weekly' | 'battle' | 'creation';\n  current: number;\n  best: number;\n  reward: number;\n  nextReward: number;\n}\n\ninterface UserStats {\n  level: number;\n  experience: number;\n  nextLevelXp: number;\n  totalPoints: number;\n  rank: string;\n  percentile: number;\n  battlesWon: number;\n  streamsCompleted: number;\n  collaborations: number;\n  achievements: Achievement[];\n  skills: Skill[];\n  streaks: Streak[];\n}\n\ninterface GamificationSystemProps {\n  userId?: string;\n  onClaimReward?: (rewardId: string) => void;\n  onShareAchievement?: (achievementId: string) => void;\n  className?: string;\n}\n\nexport default function GamificationSystem({\n  userId,\n  onClaimReward,\n  onShareAchievement,\n  className = \"\"\n}: GamificationSystemProps) {\n  const [userStats, setUserStats] = useState<UserStats | null>(null);\n  const [activeTab, setActiveTab] = useState<'overview' | 'achievements' | 'skills' | 'leaderboard'>('overview');\n  const [showRewardModal, setShowRewardModal] = useState<Achievement | null>(null);\n  const [newAchievements, setNewAchievements] = useState<Achievement[]>([]);\n  const [dailyTasks, setDailyTasks] = useState<any[]>([]);\n\n  // Mock user stats\n  const generateMockStats = useCallback((): UserStats => {\n    const achievements: Achievement[] = [\n      {\n        id: 'first-battle',\n        title: 'First Battle',\n        description: 'Complete your first rap battle',\n        icon: '⚔️',\n        rarity: 'common',\n        points: 100,\n        unlockedAt: new Date(),\n        category: 'battle'\n      },\n      {\n        id: 'win-streak-5',\n        title: 'Hot Streak',\n        description: 'Win 5 battles in a row',\n        icon: '🔥',\n        rarity: 'rare',\n        points: 500,\n        progress: 3,\n        maxProgress: 5,\n        category: 'battle'\n      },\n      {\n        id: 'stream-master',\n        title: 'Stream Master',\n        description: 'Complete 100 live streams',\n        icon: '📺',\n        rarity: 'epic',\n        points: 1000,\n        progress: 47,\n        maxProgress: 100,\n        category: 'streaming'\n      },\n      {\n        id: 'legendary-artist',\n        title: 'Legendary Artist',\n        description: 'Reach the top 1% of artists',\n        icon: '👑',\n        rarity: 'legendary',\n        points: 5000,\n        category: 'social'\n      }\n    ];\n\n    const skills: Skill[] = [\n      {\n        id: 'freestyle',\n        name: 'Freestyle',\n        level: 12,\n        experience: 2400,\n        nextLevelXp: 2600,\n        category: 'freestyle',\n        icon: '🎤',\n        color: 'text-red-500'\n      },\n      {\n        id: 'rhythm',\n        name: 'Rhythm',\n        level: 8,\n        experience: 1200,\n        nextLevelXp: 1400,\n        category: 'rhythm',\n        icon: '🥁',\n        color: 'text-blue-500'\n      },\n      {\n        id: 'creativity',\n        name: 'Creativity',\n        level: 15,\n        experience: 3200,\n        nextLevelXp: 3500,\n        category: 'creativity',\n        icon: '🎨',\n        color: 'text-purple-500'\n      },\n      {\n        id: 'collaboration',\n        name: 'Collaboration',\n        level: 6,\n        experience: 800,\n        nextLevelXp: 1000,\n        category: 'collaboration',\n        icon: '🤝',\n        color: 'text-green-500'\n      },\n      {\n        id: 'performance',\n        name: 'Performance',\n        level: 10,\n        experience: 1800,\n        nextLevelXp: 2000,\n        category: 'performance',\n        icon: '⭐',\n        color: 'text-yellow-500'\n      }\n    ];\n\n    const streaks: Streak[] = [\n      { type: 'daily', current: 7, best: 21, reward: 50, nextReward: 100 },\n      { type: 'weekly', current: 2, best: 8, reward: 200, nextReward: 500 },\n      { type: 'battle', current: 3, best: 12, reward: 150, nextReward: 300 },\n      { type: 'creation', current: 5, best: 15, reward: 100, nextReward: 250 }\n    ];\n\n    return {\n      level: 24,\n      experience: 12750,\n      nextLevelXp: 15000,\n      totalPoints: 8450,\n      rank: 'Gold',\n      percentile: 15,\n      battlesWon: 127,\n      streamsCompleted: 47,\n      collaborations: 23,\n      achievements,\n      skills,\n      streaks\n    };\n  }, []);\n\n  // Mock daily tasks\n  const generateDailyTasks = useCallback(() => {\n    return [\n      { id: 'daily-stream', title: 'Complete a live stream', progress: 0, max: 1, reward: 100, completed: false },\n      { id: 'daily-battle', title: 'Participate in 3 battles', progress: 1, max: 3, reward: 150, completed: false },\n      { id: 'daily-collab', title: 'Join a collaboration room', progress: 1, max: 1, reward: 75, completed: true },\n      { id: 'daily-social', title: 'Like and comment on 10 posts', progress: 7, max: 10, reward: 50, completed: false }\n    ];\n  }, []);\n\n  useEffect(() => {\n    setUserStats(generateMockStats());\n    setDailyTasks(generateDailyTasks());\n  }, [generateMockStats, generateDailyTasks]);\n\n  // Simulate new achievement\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const newAchievement: Achievement = {\n        id: 'social-butterfly',\n        title: 'Social Butterfly',\n        description: 'Get 100 likes on a single stream',\n        icon: '🦋',\n        rarity: 'rare',\n        points: 300,\n        unlockedAt: new Date(),\n        category: 'social'\n      };\n      setNewAchievements([newAchievement]);\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const getRarityColor = (rarity: Achievement['rarity']) => {\n    switch (rarity) {\n      case 'common': return 'border-gray-500 bg-gray-500/20';\n      case 'rare': return 'border-blue-500 bg-blue-500/20';\n      case 'epic': return 'border-purple-500 bg-purple-500/20';\n      case 'legendary': return 'border-yellow-500 bg-yellow-500/20';\n      default: return 'border-gray-500 bg-gray-500/20';\n    }\n  };\n\n  const getRankIcon = (rank: string) => {\n    switch (rank) {\n      case 'Bronze': return '🥉';\n      case 'Silver': return '🥈';\n      case 'Gold': return '🥇';\n      case 'Platinum': return '💎';\n      case 'Diamond': return '💍';\n      default: return '⭐';\n    }\n  };\n\n  const formatStreak = (type: string) => {\n    switch (type) {\n      case 'daily': return 'Daily Login';\n      case 'weekly': return 'Weekly Active';\n      case 'battle': return 'Battle Wins';\n      case 'creation': return 'Content Created';\n      default: return type;\n    }\n  };\n\n  if (!userStats) {\n    return (\n      <div className=\"h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading stats...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`h-screen w-full bg-gradient-to-br from-purple-900 via-blue-900 to-black text-white ${className}`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-800 bg-black/50 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl\">{getRankIcon(userStats.rank)}</div>\n              <div className=\"text-xs text-gray-400\">Level {userStats.level}</div>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold\">Your Progress</h1>\n              <div className=\"text-sm text-gray-400\">\n                {userStats.rank} Rank • Top {userStats.percentile}%\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-yellow-400\">{userStats.totalPoints}</div>\n            <div className=\"text-xs text-gray-400\">Total Points</div>\n          </div>\n        </div>\n\n        {/* Level progress */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between text-sm mb-2\">\n            <span>Level {userStats.level}</span>\n            <span>{userStats.experience} / {userStats.nextLevelXp} XP</span>\n          </div>\n          <Progress \n            value={(userStats.experience / userStats.nextLevelXp) * 100}\n            className=\"h-2\"\n          />\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex border-b border-gray-800\">\n        {[\n          { id: 'overview', label: 'Overview', icon: TrendingUp },\n          { id: 'achievements', label: 'Achievements', icon: Trophy },\n          { id: 'skills', label: 'Skills', icon: Star },\n          { id: 'leaderboard', label: 'Leaderboard', icon: Crown }\n        ].map((tab) => (\n          <Button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id as any)}\n            variant=\"ghost\"\n            className={`flex-1 rounded-none py-4 ${\n              activeTab === tab.id ? 'border-b-2 border-purple-500 text-purple-400' : 'text-gray-400'\n            }`}\n          >\n            <tab.icon className=\"w-4 h-4 mr-2\" />\n            {tab.label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Sword className=\"w-8 h-8 mx-auto mb-2 text-red-500\" />\n                <div className=\"text-2xl font-bold\">{userStats.battlesWon}</div>\n                <div className=\"text-xs text-gray-400\">Battles Won</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Trophy className=\"w-8 h-8 mx-auto mb-2 text-blue-500\" />\n                <div className=\"text-2xl font-bold\">{userStats.streamsCompleted}</div>\n                <div className=\"text-xs text-gray-400\">Streams</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Users className=\"w-8 h-8 mx-auto mb-2 text-green-500\" />\n                <div className=\"text-2xl font-bold\">{userStats.collaborations}</div>\n                <div className=\"text-xs text-gray-400\">Collaborations</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Medal className=\"w-8 h-8 mx-auto mb-2 text-yellow-500\" />\n                <div className=\"text-2xl font-bold\">{userStats.achievements.filter(a => a.unlockedAt).length}</div>\n                <div className=\"text-xs text-gray-400\">Achievements</div>\n              </Card>\n            </div>\n\n            {/* Daily Tasks */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-bold mb-4 flex items-center\">\n                <Calendar className=\"w-5 h-5 mr-2\" />\n                Daily Tasks\n              </h3>\n              <div className=\"space-y-3\">\n                {dailyTasks.map((task) => (\n                  <div key={task.id} className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={`text-sm ${task.completed ? 'line-through text-gray-400' : ''}`}>\n                          {task.title}\n                        </div>\n                        {task.completed && <CheckCircle className=\"w-4 h-4 text-green-500\" />}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">\n                        {task.progress}/{task.max} • {task.reward} points\n                      </div>\n                      {!task.completed && (\n                        <Progress \n                          value={(task.progress / task.max) * 100}\n                          className=\"h-1 mt-1\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n\n            {/* Streaks */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-bold mb-4 flex items-center\">\n                <Flame className=\"w-5 h-5 mr-2\" />\n                Streaks\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {userStats.streaks.map((streak) => (\n                  <div key={streak.type} className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-orange-500\">{streak.current}</div>\n                    <div className=\"text-sm\">{formatStreak(streak.type)}</div>\n                    <div className=\"text-xs text-gray-400\">Best: {streak.best}</div>\n                    <Button size=\"sm\" className=\"mt-2 bg-orange-500 hover:bg-orange-600\">\n                      Claim {streak.reward}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'achievements' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {userStats.achievements.map((achievement) => (\n              <Card \n                key={achievement.id} \n                className={`p-4 border-2 ${getRarityColor(achievement.rarity)} ${\n                  achievement.unlockedAt ? '' : 'opacity-50'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"text-3xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-bold\">{achievement.title}</h3>\n                      <Badge className={`text-xs ${\n                        achievement.rarity === 'legendary' ? 'bg-yellow-500' :\n                        achievement.rarity === 'epic' ? 'bg-purple-500' :\n                        achievement.rarity === 'rare' ? 'bg-blue-500' : 'bg-gray-500'\n                      }`}>\n                        {achievement.rarity}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-400 mb-2\">{achievement.description}</p>\n                    \n                    {achievement.progress !== undefined && (\n                      <div className=\"mb-2\">\n                        <div className=\"text-xs text-gray-400 mb-1\">\n                          {achievement.progress}/{achievement.maxProgress}\n                        </div>\n                        <Progress \n                          value={(achievement.progress / (achievement.maxProgress || 1)) * 100}\n                          className=\"h-2\"\n                        />\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-sm text-yellow-400\">+{achievement.points} points</div>\n                      {achievement.unlockedAt && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => onShareAchievement?.(achievement.id)}\n                        >\n                          Share\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {activeTab === 'skills' && (\n          <div className=\"space-y-4\">\n            {userStats.skills.map((skill) => (\n              <Card key={skill.id} className=\"bg-black/50 border-gray-700 p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"text-3xl\">{skill.icon}</div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className={`font-bold ${skill.color}`}>{skill.name}</h3>\n                      <Badge className=\"bg-gray-700\">Level {skill.level}</Badge>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-400 mb-2\">\n                      {skill.experience} / {skill.nextLevelXp} XP\n                    </div>\n                    \n                    <Progress \n                      value={(skill.experience / skill.nextLevelXp) * 100}\n                      className=\"h-2\"\n                    />\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {activeTab === 'leaderboard' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-4xl mb-2\">{getRankIcon(userStats.rank)}</div>\n              <h2 className=\"text-2xl font-bold\">{userStats.rank} Rank</h2>\n              <p className=\"text-gray-400\">You're in the top {userStats.percentile}% of artists</p>\n            </div>\n\n            {/* Mock leaderboard */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-bold mb-4\">This Week's Top Artists</h3>\n              <div className=\"space-y-3\">\n                {[\n                  { rank: 1, name: 'FlowMaster', points: 12500, avatar: '👑' },\n                  { rank: 2, name: 'BeatQueen', points: 11200, avatar: '🎵' },\n                  { rank: 3, name: 'RhymeKing', points: 10800, avatar: '🎤' },\n                  { rank: 4, name: 'LyricLord', points: 9600, avatar: '✨' },\n                  { rank: 5, name: 'You', points: userStats.totalPoints, avatar: '🔥', isUser: true }\n                ].map((artist) => (\n                  <div \n                    key={artist.rank} \n                    className={`flex items-center justify-between p-3 rounded-lg ${\n                      artist.isUser ? 'bg-purple-500/20 border border-purple-500' : 'bg-gray-800/50'\n                    }`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-2xl\">{artist.avatar}</div>\n                      <div>\n                        <div className=\"font-semibold\">{artist.name}</div>\n                        <div className=\"text-sm text-gray-400\">#{artist.rank}</div>\n                      </div>\n                    </div>\n                    <div className=\"text-yellow-400 font-bold\">{artist.points}</div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* New Achievement Modal */}\n      <AnimatePresence>\n        {newAchievements.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n          >\n            <motion.div\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              className=\"bg-gradient-to-br from-purple-600 to-blue-600 rounded-xl p-6 text-center max-w-sm w-full\"\n            >\n              <div className=\"text-6xl mb-4\">🎉</div>\n              <h2 className=\"text-2xl font-bold mb-2\">Achievement Unlocked!</h2>\n              <div className=\"text-4xl mb-2\">{newAchievements[0].icon}</div>\n              <h3 className=\"text-xl font-bold mb-2\">{newAchievements[0].title}</h3>\n              <p className=\"text-sm opacity-90 mb-4\">{newAchievements[0].description}</p>\n              <div className=\"text-yellow-400 font-bold mb-4\">+{newAchievements[0].points} points</div>\n              \n              <div className=\"flex space-x-3\">\n                <Button\n                  onClick={() => setNewAchievements([])}\n                  className=\"flex-1 bg-white text-black hover:bg-gray-200\"\n                >\n                  Awesome!\n                </Button>\n                <Button\n                  onClick={() => {\n                    onShareAchievement?.(newAchievements[0].id);\n                    setNewAchievements([]);\n                  }}\n                  variant=\"outline\"\n                  className=\"flex-1 border-white text-white\"\n                >\n                  Share\n                </Button>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":21413},"client/src/components/gesture-navigation.tsx":{"content":"import React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { motion, AnimatePresence, PanInfo } from \"framer-motion\";\nimport { \n  Home, Search, PlusCircle, Heart, User,\n  Music, Radio, TrendingUp, Zap, Crown\n} from \"lucide-react\";\n\ninterface Tab {\n  id: string;\n  label: string;\n  icon: React.ComponentType<any>;\n  component: React.ComponentType<any>;\n  color: string;\n}\n\ninterface GestureNavigationProps {\n  tabs: Tab[];\n  initialTab?: string;\n  onTabChange?: (tabId: string) => void;\n  children?: React.ReactNode;\n}\n\nexport default function GestureNavigation({ \n  tabs, \n  initialTab = tabs[0]?.id, \n  onTabChange,\n  children \n}: GestureNavigationProps) {\n  const [activeTab, setActiveTab] = useState(initialTab);\n  const [dragOffset, setDragOffset] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [showHints, setShowHints] = useState(true);\n  \n  const containerRef = useRef<HTMLDivElement>(null);\n  const dragStartRef = useRef<number>(0);\n  const lastTabChangeRef = useRef<number>(0);\n\n  const currentTabIndex = tabs.findIndex(tab => tab.id === activeTab);\n\n  // Handle tab switching\n  const switchToTab = useCallback((tabId: string) => {\n    setActiveTab(tabId);\n    onTabChange?.(tabId);\n    lastTabChangeRef.current = Date.now();\n  }, [onTabChange]);\n\n  const switchToPrevious = useCallback(() => {\n    if (currentTabIndex > 0) {\n      switchToTab(tabs[currentTabIndex - 1].id);\n    }\n  }, [currentTabIndex, tabs, switchToTab]);\n\n  const switchToNext = useCallback(() => {\n    if (currentTabIndex < tabs.length - 1) {\n      switchToTab(tabs[currentTabIndex + 1].id);\n    }\n  }, [currentTabIndex, tabs, switchToTab]);\n\n  // Swipe handlers\n  const handlers = useSwipeable({\n    onSwipedLeft: switchToNext,\n    onSwipedRight: switchToPrevious,\n    onSwipedUp: () => {\n      // Quick access to trending/featured content\n      if (tabs.find(t => t.id === 'discover')) {\n        switchToTab('discover');\n      }\n    },\n    onSwipedDown: () => {\n      // Quick access to profile/settings\n      if (tabs.find(t => t.id === 'profile')) {\n        switchToTab('profile');\n      }\n    },\n    trackMouse: true,\n    delta: 50 // Minimum distance for swipe\n  });\n\n  // Pan gesture for smooth tab transitions\n  const handlePanStart = useCallback(() => {\n    setIsDragging(true);\n    dragStartRef.current = Date.now();\n  }, []);\n\n  const handlePan = useCallback((event: any, info: PanInfo) => {\n    const screenWidth = window.innerWidth;\n    const offset = (info.offset.x / screenWidth) * 100;\n    setDragOffset(Math.max(-100, Math.min(100, offset)));\n  }, []);\n\n  const handlePanEnd = useCallback((event: any, info: PanInfo) => {\n    setIsDragging(false);\n    const velocity = info.velocity.x;\n    const offset = info.offset.x;\n    const threshold = window.innerWidth * 0.25; // 25% of screen width\n\n    // Determine if we should switch tabs based on velocity and distance\n    if (Math.abs(velocity) > 500 || Math.abs(offset) > threshold) {\n      if (offset > 0) {\n        switchToPrevious();\n      } else {\n        switchToNext();\n      }\n    }\n\n    setDragOffset(0);\n  }, [switchToPrevious, switchToNext]);\n\n  // Hide hints after interaction\n  useEffect(() => {\n    const timer = setTimeout(() => setShowHints(false), 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'ArrowLeft':\n          switchToPrevious();\n          break;\n        case 'ArrowRight':\n          switchToNext();\n          break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n          const index = parseInt(event.key) - 1;\n          if (tabs[index]) {\n            switchToTab(tabs[index].id);\n          }\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [switchToPrevious, switchToNext, switchToTab, tabs]);\n\n  const ActiveComponent = tabs.find(tab => tab.id === activeTab)?.component;\n\n  return (\n    <div \n      className=\"h-screen w-full bg-black relative overflow-hidden\"\n      {...handlers}\n      ref={containerRef}\n    >\n      {/* Main content area */}\n      <motion.div\n        className=\"relative h-full\"\n        drag=\"x\"\n        dragConstraints={{ left: 0, right: 0 }}\n        dragElastic={0.2}\n        onDragStart={handlePanStart}\n        onDrag={handlePan}\n        onDragEnd={handlePanEnd}\n        animate={{ \n          x: isDragging ? `${dragOffset}%` : '0%' \n        }}\n        transition={{ \n          type: \"spring\", \n          stiffness: 300, \n          damping: 30 \n        }}\n      >\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={activeTab}\n            initial={{ opacity: 0, x: 100 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -100 }}\n            transition={{ duration: 0.3 }}\n            className=\"h-full\"\n          >\n            {ActiveComponent ? <ActiveComponent /> : children}\n          </motion.div>\n        </AnimatePresence>\n\n        {/* Tab preview overlays */}\n        <AnimatePresence>\n          {isDragging && (\n            <>\n              {/* Previous tab preview */}\n              {currentTabIndex > 0 && dragOffset > 10 && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: Math.min(dragOffset / 50, 0.3) }}\n                  exit={{ opacity: 0 }}\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent to-purple-500/20\"\n                >\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-white\">\n                    <div className=\"text-center\">\n                      {React.createElement(tabs[currentTabIndex - 1].icon, { \n                        className: \"w-8 h-8 mx-auto mb-2\" \n                      })}\n                      <div className=\"text-sm\">{tabs[currentTabIndex - 1].label}</div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Next tab preview */}\n              {currentTabIndex < tabs.length - 1 && dragOffset < -10 && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: Math.min(Math.abs(dragOffset) / 50, 0.3) }}\n                  exit={{ opacity: 0 }}\n                  className=\"absolute inset-0 bg-gradient-to-l from-transparent to-blue-500/20\"\n                >\n                  <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-white\">\n                    <div className=\"text-center\">\n                      {React.createElement(tabs[currentTabIndex + 1].icon, { \n                        className: \"w-8 h-8 mx-auto mb-2\" \n                      })}\n                      <div className=\"text-sm\">{tabs[currentTabIndex + 1].label}</div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </>\n          )}\n        </AnimatePresence>\n      </motion.div>\n\n      {/* Bottom navigation */}\n      <div className=\"absolute bottom-0 left-0 right-0 bg-black/80 backdrop-blur-sm border-t border-gray-800 z-50\">\n        <div className=\"flex items-center justify-around py-2 px-4\">\n          {tabs.map((tab, index) => {\n            const isActive = tab.id === activeTab;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => switchToTab(tab.id)}\n                className={`flex flex-col items-center py-2 px-3 rounded-lg transition-all ${\n                  isActive \n                    ? `bg-${tab.color}-500/20 text-${tab.color}-400` \n                    : 'text-gray-400 hover:text-gray-300'\n                }`}\n              >\n                <tab.icon className={`w-6 h-6 mb-1 ${\n                  isActive ? `text-${tab.color}-400` : ''\n                }`} />\n                <span className=\"text-xs font-medium\">{tab.label}</span>\n                \n                {/* Active indicator */}\n                {isActive && (\n                  <motion.div\n                    layoutId=\"activeTab\"\n                    className={`absolute -top-1 left-1/2 transform -translate-x-1/2 w-8 h-1 bg-${tab.color}-400 rounded-full`}\n                    transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                  />\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Navigation hints */}\n      <AnimatePresence>\n        {showHints && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ delay: 1 }}\n            className=\"absolute top-4 left-1/2 transform -translate-x-1/2 z-40\"\n          >\n            <div className=\"bg-black/70 text-white text-xs px-3 py-2 rounded-full\">\n              ← Swipe to navigate →\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Gesture feedback */}\n      <AnimatePresence>\n        {isDragging && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-30\"\n          >\n            <div className=\"text-white text-center\">\n              <motion.div\n                animate={{ \n                  scale: [1, 1.2, 1],\n                  rotate: dragOffset > 0 ? [-5, 5, -5] : [5, -5, 5]\n                }}\n                transition={{ repeat: Infinity, duration: 0.5 }}\n                className=\"text-4xl mb-2\"\n              >\n                {dragOffset > 0 ? '←' : '→'}\n              </motion.div>\n              <div className=\"text-sm\">\n                {dragOffset > 0 && currentTabIndex > 0 && tabs[currentTabIndex - 1].label}\n                {dragOffset < 0 && currentTabIndex < tabs.length - 1 && tabs[currentTabIndex + 1].label}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Quick actions overlay */}\n      <div className=\"absolute top-1/2 left-4 transform -translate-y-1/2 z-20 space-y-2\">\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          className=\"w-10 h-10 bg-black/50 text-white rounded-full flex items-center justify-center backdrop-blur-sm\"\n          onClick={() => setShowHints(!showHints)}\n        >\n          ?\n        </motion.button>\n      </div>\n\n      <div className=\"absolute top-1/2 right-4 transform -translate-y-1/2 z-20 space-y-2\">\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          className=\"w-10 h-10 bg-black/50 text-white rounded-full flex items-center justify-center backdrop-blur-sm\"\n          onClick={() => switchToTab('create')}\n        >\n          <PlusCircle className=\"w-5 h-5\" />\n        </motion.button>\n      </div>\n    </div>\n  );\n}\n\n// Hook for external components to trigger navigation\nexport function useGestureNavigation() {\n  const [currentTab, setCurrentTab] = useState<string>('');\n\n  const navigateToTab = useCallback((tabId: string) => {\n    setCurrentTab(tabId);\n    // Dispatch custom event for navigation\n    window.dispatchEvent(new CustomEvent('gesture-navigate', { \n      detail: { tabId } \n    }));\n  }, []);\n\n  return { currentTab, navigateToTab };\n}","size_bytes":11588},"client/src/components/infinite-feed.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Track } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Heart, MessageCircle, Share, MoreVertical, \n  Play, Pause, VolumeX, Volume2, Users,\n  Flame, Crown, Mic, TrendingUp, Music\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface FeedItem {\n  id: string;\n  type: 'live-stream' | 'battle' | 'beat-session' | 'collaboration';\n  artist: {\n    id: string;\n    username: string;\n    avatar: string;\n    isVerified: boolean;\n  };\n  title: string;\n  description: string;\n  thumbnail: string;\n  viewerCount: number;\n  likes: number;\n  isLiked: boolean;\n  duration?: number;\n  tags: string[];\n  beat?: {\n    id: string;\n    name: string;\n    producer: string;\n    bpm: number;\n    genre: string;\n  };\n  battle?: {\n    contestant1: string;\n    contestant2: string;\n    votes1: number;\n    votes2: number;\n    timeLeft: number;\n  };\n  isPlaying: boolean;\n  isMuted: boolean;\n}\n\ninterface InfiniteFeedProps {\n  onNavigateToCreate?: () => void;\n  onNavigateToProfile?: () => void;\n  onJoinStream?: (streamId: string) => void;\n}\n\nexport default function InfiniteFeed({ \n  onNavigateToCreate, \n  onNavigateToProfile,\n  onJoinStream \n}: InfiniteFeedProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [feedItems, setFeedItems] = useState<FeedItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [hearts, setHearts] = useState<{ id: string; x: number; y: number }[]>([]);\n  const [comments, setComments] = useState<{ id: string; text: string; user: string; timestamp: number }[]>([]);\n  const [showComments, setShowComments] = useState(false);\n  const [newComment, setNewComment] = useState('');\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const videoRefs = useRef<(HTMLVideoElement | null)[]>([]);\n\n  // Real feed data from API\n  const { data: tracks = [] } = useQuery<Track[]>({\n    queryKey: [\"/api/tracks\"],\n  });\n\n  const { data: battles = [] } = useQuery<any[]>({\n    queryKey: [\"/api/battles/active\"],\n  });\n\n  const convertToFeedItems = useCallback((): FeedItem[] => {\n    const feedItems: FeedItem[] = [];\n    \n    // Convert tracks to feed items\n    tracks.forEach((track, i) => {\n      feedItems.push({\n        id: track.id,\n        type: track.isCollaborative ? 'collaboration' : 'live-stream',\n        artist: {\n          id: track.artistId || 'unknown',\n          username: track.artistName || 'Anonymous',\n          avatar: '🎤',\n          isVerified: false\n        },\n        title: track.title,\n        description: `${track.genre || 'Music'} track by ${track.artistName}`,\n        thumbnail: track.coverImage || '/api/placeholder/400/600?text=Music',\n        viewerCount: track.plays || 0,\n        likes: track.likes || 0,\n        isLiked: false, // TODO: Connect to user preferences\n        tags: track.genre ? [track.genre] : ['music'],\n        isPlaying: i === 0,\n        isMuted: false\n      });\n    });\n\n    // Convert battles to feed items\n    battles.forEach((battle, i) => {\n      feedItems.push({\n        id: battle.id,\n        type: 'battle',\n        artist: {\n          id: battle.contestant1Id || 'unknown',\n          username: battle.contestant1Name || 'Contestant',\n          avatar: '🔥',\n          isVerified: false\n        },\n        title: battle.title || 'Live Rap Battle 🔥',\n        description: `${battle.contestant1Name} vs ${battle.contestant2Name}`,\n        thumbnail: '/api/placeholder/400/600?text=Battle',\n        viewerCount: battle.totalVotes || 0,\n        likes: battle.totalVotes || 0,\n        isLiked: false,\n        tags: ['battle', 'live', 'rap'],\n        battle: {\n          contestant1: battle.contestant1Name,\n          contestant2: battle.contestant2Name,\n          votes1: battle.contestant1Votes || 0,\n          votes2: battle.contestant2Votes || 0,\n          timeLeft: 120 // TODO: Calculate from battle time\n        },\n        isPlaying: false,\n        isMuted: false\n      });\n    });\n\n    return feedItems;\n  }, [tracks, battles]);\n\n  // Initialize feed\n  useEffect(() => {\n    const feed = convertToFeedItems();\n    setFeedItems(feed);\n    setLoading(false);\n  }, [convertToFeedItems]);\n\n  // Swipe handlers for navigation\n  const handlers = useSwipeable({\n    onSwipedUp: () => navigateToNext(),\n    onSwipedDown: () => navigateToPrevious(),\n    onSwipedLeft: () => onNavigateToCreate?.(),\n    onSwipedRight: () => onNavigateToProfile?.(),\n    trackMouse: true\n  });\n\n  const navigateToNext = useCallback(() => {\n    if (currentIndex < feedItems.length - 1) {\n      setCurrentIndex(prev => prev + 1);\n    } else {\n      // Load more content\n      const newItems = convertToFeedItems();\n      setFeedItems(prev => [...prev, ...newItems]);\n    }\n  }, [currentIndex, feedItems.length, convertToFeedItems]);\n\n  const navigateToPrevious = useCallback(() => {\n    if (currentIndex > 0) {\n      setCurrentIndex(prev => prev - 1);\n    }\n  }, [currentIndex]);\n\n  // Auto-play management\n  useEffect(() => {\n    setFeedItems(prev => prev.map((item, index) => ({\n      ...item,\n      isPlaying: index === currentIndex\n    })));\n  }, [currentIndex]);\n\n  // Handle double tap to like\n  const handleDoubleTap = useCallback((event: React.MouseEvent, itemId: string) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    // Add heart animation\n    const heartId = `heart-${Date.now()}`;\n    setHearts(prev => [...prev, { id: heartId, x, y }]);\n    \n    // Remove heart after animation\n    setTimeout(() => {\n      setHearts(prev => prev.filter(h => h.id !== heartId));\n    }, 1000);\n\n    // Toggle like\n    setFeedItems(prev => prev.map(item => \n      item.id === itemId \n        ? { ...item, isLiked: !item.isLiked, likes: item.isLiked ? item.likes - 1 : item.likes + 1 }\n        : item\n    ));\n  }, []);\n\n  // Toggle audio\n  const toggleAudio = useCallback((itemId: string) => {\n    setFeedItems(prev => prev.map(item => \n      item.id === itemId ? { ...item, isMuted: !item.isMuted } : item\n    ));\n  }, []);\n\n  // Add comment\n  const addComment = useCallback(() => {\n    if (newComment.trim()) {\n      setComments(prev => [...prev, {\n        id: `comment-${Date.now()}`,\n        text: newComment,\n        user: 'You',\n        timestamp: Date.now()\n      }]);\n      setNewComment('');\n    }\n  }, [newComment]);\n\n  const currentItem = feedItems[currentIndex];\n\n  if (loading) {\n    return (\n      <div className=\"h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading feed...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className=\"h-screen w-full bg-black overflow-hidden relative\"\n      {...handlers}\n      ref={containerRef}\n    >\n      {/* Feed Items */}\n      <AnimatePresence mode=\"wait\">\n        {currentItem && (\n          <motion.div\n            key={currentItem.id}\n            initial={{ y: '100%' }}\n            animate={{ y: 0 }}\n            exit={{ y: '-100%' }}\n            transition={{ duration: 0.3, ease: 'easeInOut' }}\n            className=\"absolute inset-0\"\n          >\n            {/* Background Video/Stream */}\n            <div \n              className=\"w-full h-full bg-gradient-to-br from-purple-900 via-blue-900 to-black relative cursor-pointer\"\n              onDoubleClick={(e) => handleDoubleTap(e, currentItem.id)}\n            >\n              {/* Mock video background */}\n              <div className=\"absolute inset-0 bg-cover bg-center opacity-20\"\n                   style={{ backgroundImage: `url(${currentItem.thumbnail})` }} />\n              \n              {/* Stream overlay content */}\n              <div className=\"absolute inset-0 flex\">\n                {/* Main content area */}\n                <div className=\"flex-1 relative\">\n                  {/* Top indicators */}\n                  <div className=\"absolute top-4 left-4 right-20 z-10\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge className=\"bg-red-500 text-white px-3 py-1\">\n                        🔴 LIVE\n                      </Badge>\n                      <div className=\"flex items-center space-x-2 text-white text-sm\">\n                        <Users className=\"w-4 h-4\" />\n                        <span>{currentItem.viewerCount.toLocaleString()}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Center content based on type */}\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    {currentItem.type === 'battle' && currentItem.battle && (\n                      <div className=\"text-center text-white space-y-4\">\n                        <div className=\"text-3xl font-bold\">RAP BATTLE</div>\n                        <div className=\"flex items-center space-x-8\">\n                          <div className=\"text-center\">\n                            <div className=\"text-lg font-semibold\">{currentItem.battle.contestant1}</div>\n                            <div className=\"text-2xl font-bold text-blue-400\">{currentItem.battle.votes1}</div>\n                          </div>\n                          <div className=\"text-4xl\">VS</div>\n                          <div className=\"text-center\">\n                            <div className=\"text-lg font-semibold\">{currentItem.battle.contestant2}</div>\n                            <div className=\"text-2xl font-bold text-red-400\">{currentItem.battle.votes2}</div>\n                          </div>\n                        </div>\n                        <div className=\"text-lg\">Time Left: {Math.floor(currentItem.battle.timeLeft / 60)}:{(currentItem.battle.timeLeft % 60).toString().padStart(2, '0')}</div>\n                      </div>\n                    )}\n\n                    {currentItem.type === 'beat-session' && currentItem.beat && (\n                      <div className=\"text-center text-white space-y-4\">\n                        <Music className=\"w-16 h-16 mx-auto text-purple-400\" />\n                        <div className=\"text-2xl font-bold\">{currentItem.beat.name}</div>\n                        <div className=\"text-lg\">by {currentItem.beat.producer}</div>\n                        <div className=\"flex items-center justify-center space-x-4 text-sm\">\n                          <span>{currentItem.beat.bpm} BPM</span>\n                          <span>•</span>\n                          <span>{currentItem.beat.genre}</span>\n                        </div>\n                      </div>\n                    )}\n\n                    {(currentItem.type === 'live-stream' || currentItem.type === 'collaboration') && (\n                      <div className=\"text-center text-white space-y-4\">\n                        <div className=\"text-2xl font-bold\">{currentItem.title}</div>\n                        <div className=\"text-lg\">{currentItem.description}</div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Bottom info */}\n                  <div className=\"absolute bottom-4 left-4 right-20 z-10\">\n                    <div className=\"text-white space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-2xl\">{currentItem.artist.avatar}</div>\n                        <div>\n                          <div className=\"font-semibold flex items-center space-x-1\">\n                            <span>{currentItem.artist.username}</span>\n                            {currentItem.artist.isVerified && <Crown className=\"w-4 h-4 text-yellow-400\" />}\n                          </div>\n                          <div className=\"text-sm text-gray-300\">{currentItem.description}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex flex-wrap gap-2\">\n                        {currentItem.tags.map((tag, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            #{tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Audio toggle */}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute bottom-4 right-24 text-white bg-black/50 rounded-full\"\n                    onClick={() => toggleAudio(currentItem.id)}\n                  >\n                    {currentItem.isMuted ? <VolumeX className=\"w-5 h-5\" /> : <Volume2 className=\"w-5 h-5\" />}\n                  </Button>\n                </div>\n\n                {/* Right sidebar actions */}\n                <div className=\"w-16 flex flex-col items-center justify-end pb-20 space-y-6\">\n                  <div className=\"text-center\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"text-white bg-black/50 rounded-full mb-1 relative\"\n                      onClick={(e) => handleDoubleTap(e, currentItem.id)}\n                    >\n                      <Heart className={`w-6 h-6 ${currentItem.isLiked ? 'fill-red-500 text-red-500' : ''}`} />\n                    </Button>\n                    <div className=\"text-white text-xs\">{currentItem.likes.toLocaleString()}</div>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"text-white bg-black/50 rounded-full mb-1\"\n                      onClick={() => setShowComments(true)}\n                    >\n                      <MessageCircle className=\"w-6 h-6\" />\n                    </Button>\n                    <div className=\"text-white text-xs\">{comments.length}</div>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"text-white bg-black/50 rounded-full mb-1\"\n                    >\n                      <Share className=\"w-6 h-6\" />\n                    </Button>\n                  </div>\n\n                  {currentItem.type === 'battle' && (\n                    <div className=\"text-center\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"text-white bg-red-500/80 rounded-full mb-1\"\n                      >\n                        <Flame className=\"w-6 h-6\" />\n                      </Button>\n                      <div className=\"text-white text-xs\">Vote</div>\n                    </div>\n                  )}\n\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-white bg-black/50 rounded-full\"\n                    onClick={() => onJoinStream?.(currentItem.id)}\n                  >\n                    <Mic className=\"w-6 h-6\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Floating hearts animation */}\n              <AnimatePresence>\n                {hearts.map(heart => (\n                  <motion.div\n                    key={heart.id}\n                    initial={{ scale: 0, x: heart.x, y: heart.y }}\n                    animate={{ \n                      scale: [0, 1.2, 1], \n                      y: heart.y - 100,\n                      opacity: [1, 1, 0]\n                    }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 1 }}\n                    className=\"absolute pointer-events-none z-50\"\n                  >\n                    <Heart className=\"w-8 h-8 text-red-500 fill-red-500\" />\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Navigation hints */}\n      <div className=\"absolute top-1/2 left-4 transform -translate-y-1/2 text-white/50 text-xs\">\n        ← Profile\n      </div>\n      <div className=\"absolute top-1/2 right-4 transform -translate-y-1/2 text-white/50 text-xs\">\n        Create →\n      </div>\n      <div className=\"absolute bottom-32 left-1/2 transform -translate-x-1/2 text-white/50 text-xs\">\n        ↑ Next\n      </div>\n\n      {/* Comments overlay */}\n      {showComments && (\n        <motion.div\n          initial={{ x: '100%' }}\n          animate={{ x: 0 }}\n          exit={{ x: '100%' }}\n          className=\"absolute inset-0 bg-black/80 backdrop-blur-sm z-50\"\n          onClick={() => setShowComments(false)}\n        >\n          <div className=\"absolute right-0 top-0 w-80 h-full bg-dark-200 p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-white font-semibold\">Comments</h3>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowComments(false)}\n                className=\"text-white\"\n              >\n                ×\n              </Button>\n            </div>\n            \n            <div className=\"space-y-3 mb-4 max-h-96 overflow-y-auto\">\n              {comments.map(comment => (\n                <div key={comment.id} className=\"text-white text-sm\">\n                  <span className=\"font-semibold text-purple-400\">{comment.user}</span>\n                  <span className=\"ml-2\">{comment.text}</span>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                value={newComment}\n                onChange={(e) => setNewComment(e.target.value)}\n                placeholder=\"Add a comment...\"\n                className=\"flex-1 bg-dark-300 text-white px-3 py-2 rounded\"\n                onKeyPress={(e) => e.key === 'Enter' && addComment()}\n              />\n              <Button onClick={addComment} className=\"bg-purple-500\">\n                Send\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n}","size_bytes":18481},"client/src/components/instant-creator.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Camera, CameraOff, Mic, MicOff, RotateCw, \n  Play, Pause, Square, Download, Upload,\n  Sparkles, Music, Volume2, Timer, Zap,\n  Filter, Palette, Mic2, Radio\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface AudioEffect {\n  id: string;\n  name: string;\n  icon: string;\n  active: boolean;\n}\n\ninterface Beat {\n  id: string;\n  name: string;\n  producer: string;\n  bpm: number;\n  genre: string;\n  preview: string;\n  price: number;\n  trending: boolean;\n}\n\ninterface InstantCreatorProps {\n  onClose?: () => void;\n  onPublish?: (recording: any) => void;\n}\n\nexport default function InstantCreator({ onClose, onPublish }: InstantCreatorProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  const [cameraMode, setCameraMode] = useState<'front' | 'back'>('front');\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [selectedBeat, setSelectedBeat] = useState<Beat | null>(null);\n  const [beatVolume, setBeatVolume] = useState([70]);\n  const [micVolume, setMicVolume] = useState([80]);\n  const [showEffects, setShowEffects] = useState(false);\n  const [showBeats, setShowBeats] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [recordingProgress, setRecordingProgress] = useState(0);\n\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const recordingRef = useRef<MediaRecorder | null>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Audio effects\n  const [audioEffects, setAudioEffects] = useState<AudioEffect[]>([\n    { id: 'autotune', name: 'Auto-Tune', icon: '🎵', active: false },\n    { id: 'reverb', name: 'Reverb', icon: '🌊', active: false },\n    { id: 'echo', name: 'Echo', icon: '📢', active: false },\n    { id: 'distortion', name: 'Distortion', icon: '⚡', active: false },\n    { id: 'pitch-up', name: 'Pitch Up', icon: '⬆️', active: false },\n    { id: 'pitch-down', name: 'Pitch Down', icon: '⬇️', active: false }\n  ]);\n\n  // Mock trending beats\n  const [trendingBeats] = useState<Beat[]>([\n    { id: '1', name: 'Midnight Vibes', producer: 'BeatMaster', bpm: 140, genre: 'Trap', preview: '', price: 0, trending: true },\n    { id: '2', name: 'Street Dreams', producer: 'ProducerX', bpm: 128, genre: 'Drill', preview: '', price: 5, trending: true },\n    { id: '3', name: 'City Lights', producer: 'WaveKing', bpm: 120, genre: 'R&B', preview: '', price: 0, trending: false },\n    { id: '4', name: 'Boss Mode', producer: 'TrapLord', bpm: 150, genre: 'Trap', preview: '', price: 10, trending: true },\n    { id: '5', name: 'Smooth Operator', producer: 'SoulBeats', bpm: 90, genre: 'Hip-Hop', preview: '', price: 0, trending: false }\n  ]);\n\n  // Initialize camera\n  useEffect(() => {\n    startCamera();\n    return () => {\n      stopCamera();\n    };\n  }, [cameraMode]);\n\n  const startCamera = async () => {\n    try {\n      const constraints = {\n        video: {\n          facingMode: cameraMode === 'front' ? 'user' : 'environment',\n          width: { ideal: 720 },\n          height: { ideal: 1280 }\n        },\n        audio: true\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      streamRef.current = stream;\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Camera access failed:', error);\n    }\n  };\n\n  const stopCamera = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n  };\n\n  // Recording controls\n  const startCountdown = useCallback(() => {\n    setCountdown(3);\n    const countdownInterval = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(countdownInterval);\n          startRecording();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, []);\n\n  const startRecording = useCallback(() => {\n    if (!streamRef.current) return;\n\n    try {\n      const mediaRecorder = new MediaRecorder(streamRef.current);\n      recordingRef.current = mediaRecorder;\n\n      const chunks: BlobPart[] = [];\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: 'video/mp4' });\n        // Handle recording blob\n        console.log('Recording completed:', blob);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n\n      // Start timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => {\n          const newTime = prev + 1;\n          setRecordingProgress((newTime / 60) * 100); // 60 second max\n          \n          // Auto-stop at 60 seconds\n          if (newTime >= 60) {\n            stopRecording();\n            return 60;\n          }\n          return newTime;\n        });\n      }, 1000);\n\n    } catch (error) {\n      console.error('Recording failed:', error);\n    }\n  }, []);\n\n  const stopRecording = useCallback(() => {\n    if (recordingRef.current && isRecording) {\n      recordingRef.current.stop();\n      recordingRef.current = null;\n    }\n\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    setIsRecording(false);\n    setIsPaused(false);\n    setRecordingProgress(0);\n  }, [isRecording]);\n\n  const togglePause = useCallback(() => {\n    if (recordingRef.current) {\n      if (isPaused) {\n        recordingRef.current.resume();\n        // Resume timer\n        timerRef.current = setInterval(() => {\n          setRecordingTime(prev => {\n            const newTime = prev + 1;\n            setRecordingProgress((newTime / 60) * 100);\n            if (newTime >= 60) {\n              stopRecording();\n              return 60;\n            }\n            return newTime;\n          });\n        }, 1000);\n      } else {\n        recordingRef.current.pause();\n        if (timerRef.current) {\n          clearInterval(timerRef.current);\n          timerRef.current = null;\n        }\n      }\n      setIsPaused(!isPaused);\n    }\n  }, [isPaused, stopRecording]);\n\n  const switchCamera = () => {\n    setCameraMode(prev => prev === 'front' ? 'back' : 'front');\n  };\n\n  const toggleEffect = (effectId: string) => {\n    setAudioEffects(prev => prev.map(effect => \n      effect.id === effectId \n        ? { ...effect, active: !effect.active }\n        : effect\n    ));\n  };\n\n  const selectBeat = (beat: Beat) => {\n    setSelectedBeat(beat);\n    setShowBeats(false);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"h-screen w-full bg-black relative overflow-hidden\">\n      {/* Camera view */}\n      <video\n        ref={videoRef}\n        autoPlay\n        muted\n        playsInline\n        className={`absolute inset-0 w-full h-full object-cover ${\n          !isVideoEnabled ? 'hidden' : ''\n        }`}\n      />\n\n      {/* No video overlay */}\n      {!isVideoEnabled && (\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900 via-blue-900 to-black flex items-center justify-center\">\n          <div className=\"text-center text-white\">\n            <Radio className=\"w-16 h-16 mx-auto mb-4\" />\n            <div className=\"text-xl font-semibold\">Audio Only Mode</div>\n            <div className=\"text-gray-300\">Voice recording active</div>\n          </div>\n        </div>\n      )}\n\n      {/* Countdown overlay */}\n      <AnimatePresence>\n        {countdown > 0 && (\n          <motion.div\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0, opacity: 0 }}\n            className=\"absolute inset-0 bg-black/50 flex items-center justify-center z-50\"\n          >\n            <motion.div\n              key={countdown}\n              initial={{ scale: 2, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0, opacity: 0 }}\n              className=\"text-white text-8xl font-bold\"\n            >\n              {countdown}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Top controls */}\n      <div className=\"absolute top-4 left-4 right-4 z-40\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"text-white bg-black/50 rounded-full\"\n          >\n            ×\n          </Button>\n\n          <div className=\"flex items-center space-x-2\">\n            {selectedBeat && (\n              <Badge className=\"bg-purple-500 text-white px-3 py-1\">\n                🎵 {selectedBeat.name}\n              </Badge>\n            )}\n            {audioEffects.some(e => e.active) && (\n              <Badge className=\"bg-blue-500 text-white px-3 py-1\">\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                Effects\n              </Badge>\n            )}\n          </div>\n\n          <Button\n            variant=\"ghost\"\n            onClick={switchCamera}\n            className=\"text-white bg-black/50 rounded-full\"\n            disabled={!isVideoEnabled}\n          >\n            <RotateCw className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Recording progress */}\n      {isRecording && (\n        <div className=\"absolute top-16 left-4 right-4 z-40\">\n          <div className=\"bg-black/50 rounded-full p-2\">\n            <div className=\"flex items-center justify-between text-white text-sm mb-1\">\n              <span className=\"flex items-center\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full mr-2 animate-pulse\" />\n                {formatTime(recordingTime)}\n              </span>\n              <span>{formatTime(60 - recordingTime)} left</span>\n            </div>\n            <div className=\"w-full bg-gray-700 rounded-full h-1\">\n              <div \n                className=\"bg-red-500 h-1 rounded-full transition-all\"\n                style={{ width: `${recordingProgress}%` }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Side effects panel */}\n      <AnimatePresence>\n        {showEffects && (\n          <motion.div\n            initial={{ x: '100%' }}\n            animate={{ x: 0 }}\n            exit={{ x: '100%' }}\n            className=\"absolute right-0 top-0 w-64 h-full bg-black/80 backdrop-blur-sm z-30 p-4\"\n          >\n            <div className=\"text-white\">\n              <h3 className=\"font-semibold mb-4\">Audio Effects</h3>\n              \n              <div className=\"space-y-3 mb-6\">\n                {audioEffects.map(effect => (\n                  <Button\n                    key={effect.id}\n                    variant={effect.active ? \"default\" : \"outline\"}\n                    className={`w-full justify-start ${\n                      effect.active ? 'bg-purple-500' : 'border-gray-600'\n                    }`}\n                    onClick={() => toggleEffect(effect.id)}\n                  >\n                    <span className=\"mr-2\">{effect.icon}</span>\n                    {effect.name}\n                  </Button>\n                ))}\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Mic Volume</label>\n                  <Slider\n                    value={micVolume}\n                    onValueChange={setMicVolume}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <div className=\"text-xs text-gray-400 mt-1\">{micVolume[0]}%</div>\n                </div>\n\n                {selectedBeat && (\n                  <div>\n                    <label className=\"text-sm text-gray-300 mb-2 block\">Beat Volume</label>\n                    <Slider\n                      value={beatVolume}\n                      onValueChange={setBeatVolume}\n                      max={100}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                    <div className=\"text-xs text-gray-400 mt-1\">{beatVolume[0]}%</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Beats panel */}\n      <AnimatePresence>\n        {showBeats && (\n          <motion.div\n            initial={{ y: '100%' }}\n            animate={{ y: 0 }}\n            exit={{ y: '100%' }}\n            className=\"absolute bottom-0 left-0 right-0 h-80 bg-black/90 backdrop-blur-sm z-30 p-4\"\n          >\n            <div className=\"text-white\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Trending Beats</h3>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowBeats(false)}\n                  className=\"text-white\"\n                >\n                  ×\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 gap-3 max-h-60 overflow-y-auto\">\n                {trendingBeats.map(beat => (\n                  <div\n                    key={beat.id}\n                    className={`p-3 rounded-lg border cursor-pointer transition-all ${\n                      selectedBeat?.id === beat.id \n                        ? 'border-purple-500 bg-purple-500/20' \n                        : 'border-gray-600 hover:border-gray-500'\n                    }`}\n                    onClick={() => selectBeat(beat)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"font-semibold\">{beat.name}</div>\n                          {beat.trending && (\n                            <Badge className=\"bg-red-500 text-xs\">🔥 Trending</Badge>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-gray-400\">\n                          by {beat.producer} • {beat.bpm} BPM • {beat.genre}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        {beat.price === 0 ? (\n                          <Badge className=\"bg-green-500\">Free</Badge>\n                        ) : (\n                          <div className=\"text-sm\">${beat.price}</div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Left side quick actions */}\n      <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 z-30 space-y-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setShowBeats(true)}\n          className=\"text-white bg-black/50 rounded-full\"\n        >\n          <Music className=\"w-5 h-5\" />\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setShowEffects(true)}\n          className=\"text-white bg-black/50 rounded-full\"\n        >\n          <Sparkles className=\"w-5 h-5\" />\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setIsVideoEnabled(!isVideoEnabled)}\n          className=\"text-white bg-black/50 rounded-full\"\n        >\n          {isVideoEnabled ? <Camera className=\"w-5 h-5\" /> : <CameraOff className=\"w-5 h-5\" />}\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setIsAudioEnabled(!isAudioEnabled)}\n          className=\"text-white bg-black/50 rounded-full\"\n        >\n          {isAudioEnabled ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\n        </Button>\n      </div>\n\n      {/* Bottom recording controls */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 z-40\">\n        <div className=\"flex items-center space-x-6\">\n          {/* Timer */}\n          <Button\n            variant=\"ghost\"\n            onClick={startCountdown}\n            className=\"text-white bg-black/50 rounded-full\"\n            disabled={isRecording}\n          >\n            <Timer className=\"w-5 h-5 mr-2\" />\n            3s\n          </Button>\n\n          {/* Main record button */}\n          <div className=\"relative\">\n            <Button\n              onMouseDown={isRecording ? undefined : startRecording}\n              onMouseUp={isRecording ? undefined : stopRecording}\n              onTouchStart={isRecording ? undefined : startRecording}\n              onTouchEnd={isRecording ? undefined : stopRecording}\n              onClick={isRecording ? (isPaused ? togglePause : stopRecording) : startCountdown}\n              className={`w-20 h-20 rounded-full border-4 transition-all ${\n                isRecording \n                  ? 'bg-red-500 border-red-300 scale-110' \n                  : 'bg-white border-gray-300 hover:scale-105'\n              }`}\n              disabled={countdown > 0}\n            >\n              {isRecording ? (\n                isPaused ? <Play className=\"w-8 h-8 text-white\" /> : <Square className=\"w-6 h-6 text-white\" />\n              ) : (\n                <div className=\"w-6 h-6 bg-red-500 rounded-full\" />\n              )}\n            </Button>\n            \n            {/* Recording ring */}\n            {isRecording && (\n              <div className=\"absolute inset-0 border-4 border-red-500 rounded-full animate-ping\" />\n            )}\n          </div>\n\n          {/* Upload existing */}\n          <Button\n            variant=\"ghost\"\n            className=\"text-white bg-black/50 rounded-full\"\n            disabled={isRecording}\n          >\n            <Upload className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Recording instructions */}\n      {!isRecording && countdown === 0 && (\n        <div className=\"absolute bottom-32 left-1/2 transform -translate-x-1/2 text-center text-white text-sm z-30\">\n          <div>Hold to record • Tap for 3s countdown</div>\n          <div className=\"text-xs text-gray-400 mt-1\">Up to 60 seconds</div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":18959},"client/src/components/live-battle-system.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport AudioStreamer from \"@/components/audio-streamer\";\nimport WebRTCManager from \"@/components/webrtc-manager\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { \n  Crown, Flame, Users, Timer, Mic, MicOff,\n  Volume2, VolumeX, ThumbsUp, ThumbsDown,\n  Star, Trophy, Medal, Zap, Target, Sword\n} from \"lucide-react\";\n\ninterface Contestant {\n  id: string;\n  username: string;\n  avatar: string;\n  isVerified: boolean;\n  votes: number;\n  isCurrentTurn: boolean;\n  streak: number;\n  rating: number;\n}\n\ninterface Battle {\n  id: string;\n  title: string;\n  type: 'freestyle' | 'cypher' | 'tournament' | 'challenge';\n  status: 'waiting' | 'active' | 'voting' | 'completed';\n  contestant1: Contestant;\n  contestant2: Contestant;\n  timeLeft: number;\n  totalTime: number;\n  viewerCount: number;\n  prize: number;\n  round: number;\n  maxRounds: number;\n  beat?: {\n    id: string;\n    name: string;\n    bpm: number;\n  };\n}\n\ninterface LiveBattleSystemProps {\n  battle?: Battle;\n  onVote?: (contestantId: string) => void;\n  onJoinBattle?: () => void;\n  onLeaveBattle?: () => void;\n  isParticipating?: boolean;\n  className?: string;\n}\n\nexport default function LiveBattleSystem({\n  battle,\n  onVote,\n  onJoinBattle,\n  onLeaveBattle,\n  isParticipating = false,\n  className = \"\"\n}: LiveBattleSystemProps) {\n  const { user } = useAuth();\n  const { joinRoom, leaveRoom, castVote } = useWebSocket();\n  \n  // Audio streaming state\n  const [audioStream, setAudioStream] = useState<MediaStream | null>(null);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [battleRoomId, setBattleRoomId] = useState<string>(\"\");\n  \n  // Default battle data\n  const defaultBattle: Battle = {\n    id: 'live-battle-1',\n    title: 'Epic Rap Battle: Fire vs Ice',\n    type: 'freestyle',\n    status: 'active',\n    contestant1: {\n      id: 'mc-fire',\n      username: 'MC_Fire',\n      avatar: '/api/placeholder/100/100?text=🔥',\n      isVerified: true,\n      votes: 234,\n      isCurrentTurn: true,\n      streak: 5,\n      rating: 1850\n    },\n    contestant2: {\n      id: 'ice-cold',\n      username: 'IceCold_Beats',\n      avatar: '/api/placeholder/100/100?text=❄️',\n      isVerified: false,\n      votes: 187,\n      isCurrentTurn: false,\n      streak: 3,\n      rating: 1720\n    },\n    timeLeft: 45,\n    totalTime: 60,\n    viewerCount: 1247,\n    prize: 500,\n    round: 2,\n    maxRounds: 3,\n    beat: {\n      id: 'battle-beat-1',\n      name: 'Heavy Artillery',\n      bpm: 140\n    }\n  };\n\n  const currentBattle = battle || defaultBattle;\n  \n  const [hasVoted, setHasVoted] = useState(false);\n  const [votedFor, setVotedFor] = useState<string | null>(null);\n  const [timeRemaining, setTimeRemaining] = useState(currentBattle.timeLeft);\n  const [showVotingResults, setShowVotingResults] = useState(false);\n  const [battleEffects, setBattleEffects] = useState<{ id: string; type: string; x: number; y: number }[]>([]);\n\n  const battleRef = useRef<HTMLDivElement>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Battle timer\n  useEffect(() => {\n    if (currentBattle.status === 'active') {\n      timerRef.current = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            // Time's up, switch to voting\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [currentBattle.status]);\n\n  // Handle voting\n  const handleVote = useCallback((contestantId: string) => {\n    if (hasVoted || currentBattle.status !== 'voting') return;\n    \n    setHasVoted(true);\n    setVotedFor(contestantId);\n    onVote?.(contestantId);\n\n    // Send real-time vote via WebSocket\n    if (user) {\n      castVote(currentBattle.id, contestantId);\n    }\n\n    // Add visual effect\n    const container = battleRef.current;\n    if (container) {\n      const rect = container.getBoundingClientRect();\n      const effect = {\n        id: `vote-${Date.now()}`,\n        type: 'vote',\n        x: Math.random() * rect.width,\n        y: Math.random() * rect.height\n      };\n      setBattleEffects(prev => [...prev, effect]);\n      \n      setTimeout(() => {\n        setBattleEffects(prev => prev.filter(e => e.id !== effect.id));\n      }, 2000);\n    }\n  }, [hasVoted, currentBattle.status, onVote, user, castVote, currentBattle.id]);\n\n  // Handle joining battle with audio streaming\n  const handleJoinBattle = () => {\n    if (user && currentBattle) {\n      const roomId = `battle-${currentBattle.id}`;\n      setBattleRoomId(roomId);\n      joinRoom(roomId, user.displayName || user.username || 'Anonymous', false);\n      onJoinBattle?.();\n    }\n  };\n  \n  // Handle leaving battle\n  const handleLeaveBattle = () => {\n    leaveRoom();\n    setAudioStream(null);\n    setBattleRoomId(\"\");\n    onLeaveBattle?.();\n  };\n  \n  // Audio stream handlers\n  const handleAudioStreamStart = (stream: MediaStream) => {\n    setAudioStream(stream);\n    setIsAudioEnabled(true);\n  };\n  \n  const handleAudioStreamEnd = () => {\n    setAudioStream(null);\n    setIsAudioEnabled(false);\n  };\n\n  // Calculate vote percentages\n  const totalVotes = currentBattle.contestant1.votes + currentBattle.contestant2.votes;\n  const contestant1Percentage = totalVotes > 0 ? (currentBattle.contestant1.votes / totalVotes) * 100 : 50;\n  const contestant2Percentage = totalVotes > 0 ? (currentBattle.contestant2.votes / totalVotes) * 100 : 50;\n\n  // Format time\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div \n      ref={battleRef}\n      className={`relative w-full h-full bg-gradient-to-br from-red-900 via-purple-900 to-blue-900 ${className}`}\n    >\n      {/* Battle background effects */}\n      <div className=\"absolute inset-0 bg-black/40\" />\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n\n      {/* Floating battle effects */}\n      <AnimatePresence>\n        {battleEffects.map(effect => (\n          <motion.div\n            key={effect.id}\n            initial={{ scale: 0, x: effect.x, y: effect.y, opacity: 1 }}\n            animate={{ \n              scale: [0, 1.5, 1],\n              y: effect.y - 100,\n              opacity: [1, 1, 0]\n            }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 2 }}\n            className=\"absolute pointer-events-none z-30\"\n          >\n            {effect.type === 'vote' && (\n              <div className=\"text-yellow-400\">\n                <Star className=\"w-8 h-8 fill-current\" />\n              </div>\n            )}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Header */}\n      <div className=\"absolute top-4 left-4 right-4 z-20\">\n        <div className=\"flex items-center justify-between text-white\">\n          <div className=\"flex items-center space-x-2\">\n            <Badge className=\"bg-red-500 text-white px-3 py-1 animate-pulse\">\n              🔴 LIVE BATTLE\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-white border-white\">\n              Round {currentBattle.round}/{currentBattle.maxRounds}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <Users className=\"w-4 h-4\" />\n              <span>{currentBattle.viewerCount.toLocaleString()}</span>\n            </div>\n            {currentBattle.prize > 0 && (\n              <div className=\"flex items-center space-x-1\">\n                <Trophy className=\"w-4 h-4 text-yellow-400\" />\n                <span>${currentBattle.prize}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Contestants */}\n      <div className=\"absolute inset-0 flex items-center\">\n        {/* Contestant 1 */}\n        <div className=\"flex-1 text-center text-white relative\">\n          <motion.div\n            animate={currentBattle.contestant1.isCurrentTurn ? { scale: [1, 1.05, 1] } : {}}\n            transition={{ duration: 1, repeat: Infinity }}\n            className={`relative ${currentBattle.contestant1.isCurrentTurn ? 'ring-4 ring-blue-500 rounded-full' : ''}`}\n          >\n            <div className=\"text-6xl mb-4\">{currentBattle.contestant1.avatar}</div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"text-xl font-bold\">{currentBattle.contestant1.username}</span>\n                {currentBattle.contestant1.isVerified && <Crown className=\"w-5 h-5 text-yellow-400\" />}\n              </div>\n              \n              <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-300\">\n                <div className=\"flex items-center space-x-1\">\n                  <Flame className=\"w-4 h-4\" />\n                  <span>{currentBattle.contestant1.streak} streak</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"w-4 h-4\" />\n                  <span>{currentBattle.contestant1.rating}</span>\n                </div>\n              </div>\n\n              {/* Vote count */}\n              <div className=\"mt-4\">\n                <div className=\"text-3xl font-bold text-blue-400\">{currentBattle.contestant1.votes}</div>\n                <div className=\"text-sm text-gray-300\">votes</div>\n                <div className=\"mt-2 bg-gray-700 rounded-full h-2\">\n                  <motion.div \n                    className=\"bg-blue-500 h-2 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${contestant1Percentage}%` }}\n                    transition={{ duration: 0.5 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Vote button */}\n          {currentBattle.status === 'voting' && (\n            <Button\n              onClick={() => handleVote(currentBattle.contestant1.id)}\n              disabled={hasVoted}\n              className={`mt-4 ${\n                votedFor === currentBattle.contestant1.id \n                  ? 'bg-blue-600 hover:bg-blue-700' \n                  : 'bg-blue-500 hover:bg-blue-600'\n              } ${hasVoted && votedFor !== currentBattle.contestant1.id ? 'opacity-50' : ''}`}\n              size=\"lg\"\n            >\n              {votedFor === currentBattle.contestant1.id ? (\n                <>\n                  <Star className=\"w-5 h-5 mr-2 fill-current\" />\n                  Voted!\n                </>\n              ) : (\n                <>\n                  <ThumbsUp className=\"w-5 h-5 mr-2\" />\n                  Vote\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n\n        {/* VS and Timer */}\n        <div className=\"w-32 text-center text-white\">\n          <motion.div\n            animate={{ scale: [1, 1.1, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n            className=\"text-6xl font-bold mb-4 text-transparent bg-gradient-to-r from-red-500 to-blue-500 bg-clip-text\"\n          >\n            VS\n          </motion.div>\n\n          {/* Timer */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-center space-x-1\">\n              <Timer className=\"w-5 h-5\" />\n              <span className=\"text-xl font-mono\">{formatTime(timeRemaining)}</span>\n            </div>\n            \n            <Progress \n              value={(timeRemaining / currentBattle.totalTime) * 100}\n              className=\"w-20 h-2 mx-auto\"\n            />\n\n            <div className=\"text-xs text-gray-300\">\n              {currentBattle.status === 'active' ? 'Battle Time' : \n               currentBattle.status === 'voting' ? 'Voting Time' : \n               currentBattle.status === 'waiting' ? 'Starting Soon' : 'Complete'}\n            </div>\n          </div>\n\n          {/* Beat info */}\n          {currentBattle.beat && (\n            <div className=\"mt-4 text-xs text-gray-300\">\n              <div className=\"flex items-center justify-center space-x-1\">\n                <Volume2 className=\"w-3 h-3\" />\n                <span>{currentBattle.beat.name}</span>\n              </div>\n              <div>{currentBattle.beat.bpm} BPM</div>\n            </div>\n          )}\n        </div>\n\n        {/* Contestant 2 */}\n        <div className=\"flex-1 text-center text-white relative\">\n          <motion.div\n            animate={currentBattle.contestant2.isCurrentTurn ? { scale: [1, 1.05, 1] } : {}}\n            transition={{ duration: 1, repeat: Infinity }}\n            className={`relative ${currentBattle.contestant2.isCurrentTurn ? 'ring-4 ring-red-500 rounded-full' : ''}`}\n          >\n            <div className=\"text-6xl mb-4\">{currentBattle.contestant2.avatar}</div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <span className=\"text-xl font-bold\">{currentBattle.contestant2.username}</span>\n                {currentBattle.contestant2.isVerified && <Crown className=\"w-5 h-5 text-yellow-400\" />}\n              </div>\n              \n              <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-300\">\n                <div className=\"flex items-center space-x-1\">\n                  <Flame className=\"w-4 h-4\" />\n                  <span>{currentBattle.contestant2.streak} streak</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"w-4 h-4\" />\n                  <span>{currentBattle.contestant2.rating}</span>\n                </div>\n              </div>\n\n              {/* Vote count */}\n              <div className=\"mt-4\">\n                <div className=\"text-3xl font-bold text-red-400\">{currentBattle.contestant2.votes}</div>\n                <div className=\"text-sm text-gray-300\">votes</div>\n                <div className=\"mt-2 bg-gray-700 rounded-full h-2\">\n                  <motion.div \n                    className=\"bg-red-500 h-2 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${contestant2Percentage}%` }}\n                    transition={{ duration: 0.5 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Vote button */}\n          {currentBattle.status === 'voting' && (\n            <Button\n              onClick={() => handleVote(currentBattle.contestant2.id)}\n              disabled={hasVoted}\n              className={`mt-4 ${\n                votedFor === currentBattle.contestant2.id \n                  ? 'bg-red-600 hover:bg-red-700' \n                  : 'bg-red-500 hover:bg-red-600'\n              } ${hasVoted && votedFor !== currentBattle.contestant2.id ? 'opacity-50' : ''}`}\n              size=\"lg\"\n            >\n              {votedFor === currentBattle.contestant2.id ? (\n                <>\n                  <Star className=\"w-5 h-5 mr-2 fill-current\" />\n                  Voted!\n                </>\n              ) : (\n                <>\n                  <ThumbsUp className=\"w-5 h-5 mr-2\" />\n                  Vote\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Audio streaming for participants */}\n      {isParticipating && battleRoomId && (\n        <div className=\"absolute bottom-20 left-4 right-4 z-20\">\n          <AudioStreamer\n            isStreaming={true}\n            onStreamStart={handleAudioStreamStart}\n            onStreamEnd={handleAudioStreamEnd}\n            quality=\"medium\"\n            roomId={battleRoomId}\n          />\n          \n          {/* WebRTC for peer connections */}\n          {user && (\n            <WebRTCManager\n              roomId={battleRoomId}\n              username={user.displayName || user.username || 'Anonymous'}\n              isHost={false}\n              enableAudio={isAudioEnabled}\n              enableVideo={false}\n              maxPeers={2}\n            />\n          )}\n        </div>\n      )}\n\n      {/* Bottom actions */}\n      <div className=\"absolute bottom-4 left-4 right-4 z-20\">\n        <div className=\"flex items-center justify-between\">\n          {!isParticipating ? (\n            <Button\n              onClick={handleJoinBattle}\n              className=\"bg-green-500 hover:bg-green-600 text-white\"\n              size=\"lg\"\n            >\n              <Mic className=\"w-5 h-5 mr-2\" />\n              Join Battle\n            </Button>\n          ) : (\n            <Button\n              onClick={handleLeaveBattle}\n              variant=\"outline\"\n              className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n              size=\"lg\"\n            >\n              <MicOff className=\"w-5 h-5 mr-2\" />\n              Leave\n            </Button>\n          )}\n\n          <div className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\" \n              className={`text-white border-white ${isAudioEnabled ? 'bg-green-500' : 'bg-red-500'}`}\n              onClick={() => setIsAudioEnabled(!isAudioEnabled)}\n              disabled={!isParticipating}\n            >\n              {isAudioEnabled ? <Volume2 className=\"w-5 h-5\" /> : <VolumeX className=\"w-5 h-5\" />}\n            </Button>\n            <Button variant=\"outline\" size=\"icon\" className=\"text-white border-white\">\n              <Target className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Status overlay */}\n      <AnimatePresence>\n        {currentBattle.status === 'waiting' && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black/80 flex items-center justify-center z-30\"\n          >\n            <div className=\"text-center text-white\">\n              <Sword className=\"w-16 h-16 mx-auto mb-4 text-yellow-400\" />\n              <div className=\"text-2xl font-bold mb-2\">Battle Starting Soon</div>\n              <div className=\"text-gray-300\">Waiting for contestants...</div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// Battle notification component\nexport function BattleNotification({ \n  battle, \n  onJoin, \n  onDismiss \n}: { \n  battle: Battle; \n  onJoin: () => void; \n  onDismiss: () => void; \n}) {\n  return (\n    <motion.div\n      initial={{ y: -100, opacity: 0 }}\n      animate={{ y: 0, opacity: 1 }}\n      exit={{ y: -100, opacity: 0 }}\n      className=\"fixed top-4 left-4 right-4 z-50 bg-gradient-to-r from-red-600 to-purple-600 text-white p-4 rounded-lg shadow-lg\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Sword className=\"w-6 h-6\" />\n          <div>\n            <div className=\"font-bold\">Live Battle Starting!</div>\n            <div className=\"text-sm opacity-90\">\n              {battle.contestant1.username} vs {battle.contestant2.username}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Button onClick={onJoin} size=\"sm\" className=\"bg-white text-black hover:bg-gray-100\">\n            Join\n          </Button>\n          <Button onClick={onDismiss} size=\"sm\" variant=\"ghost\" className=\"text-white\">\n            ×\n          </Button>\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":20095},"client/src/components/professional-tools.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Camera, Mic, Settings, Monitor, DollarSign,\n  BarChart3, TrendingUp, Eye, Clock, Users,\n  Wifi, Battery, Signal, Zap, Shield, Star,\n  Download, Upload, Video, Headphones, Radio\n} from \"lucide-react\";\n\ninterface StreamingPreset {\n  id: string;\n  name: string;\n  description: string;\n  quality: 'low' | 'medium' | 'high' | 'ultra';\n  videoBitrate: number;\n  audioBitrate: number;\n  fps: number;\n  resolution: string;\n  batteryImpact: 'low' | 'medium' | 'high';\n  dataUsage: string;\n  recommended: boolean;\n}\n\ninterface CameraSettings {\n  front: boolean;\n  back: boolean;\n  ultraWide?: boolean;\n  zoom: number;\n  stabilization: boolean;\n  nightMode: boolean;\n  autoFocus: boolean;\n}\n\ninterface AudioSettings {\n  noiseReduction: boolean;\n  echoCancel: boolean;\n  autoGain: boolean;\n  sampleRate: number;\n  bitDepth: number;\n  monitoring: boolean;\n}\n\ninterface AnalyticsData {\n  revenue: {\n    total: number;\n    thisMonth: number;\n    growth: number;\n  };\n  audience: {\n    liveViewers: number;\n    totalFollowers: number;\n    engagement: number;\n    demographics: {\n      age: { [key: string]: number };\n      location: { [key: string]: number };\n    };\n  };\n  performance: {\n    avgStreamDuration: number;\n    peakViewers: number;\n    chatActivity: number;\n    retention: number;\n  };\n  monetization: {\n    donations: number;\n    subscriptions: number;\n    sponsorships: number;\n    merchandise: number;\n  };\n}\n\ninterface ProfessionalToolsProps {\n  onPresetChange?: (preset: StreamingPreset) => void;\n  onSettingsUpdate?: (settings: any) => void;\n  className?: string;\n}\n\nexport default function ProfessionalTools({\n  onPresetChange,\n  onSettingsUpdate,\n  className = \"\"\n}: ProfessionalToolsProps) {\n  const [activeTab, setActiveTab] = useState<'streaming' | 'camera' | 'audio' | 'analytics' | 'monetization'>('streaming');\n  const [selectedPreset, setSelectedPreset] = useState<string>('balanced');\n  const [cameraSettings, setCameraSettings] = useState<CameraSettings>({\n    front: true,\n    back: false,\n    zoom: 1,\n    stabilization: true,\n    nightMode: false,\n    autoFocus: true\n  });\n  const [audioSettings, setAudioSettings] = useState<AudioSettings>({\n    noiseReduction: true,\n    echoCancel: true,\n    autoGain: true,\n    sampleRate: 44100,\n    bitDepth: 16,\n    monitoring: false\n  });\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\n  const [isLive, setIsLive] = useState(false);\n  const [streamHealth, setStreamHealth] = useState({\n    connection: 'excellent',\n    latency: 45,\n    bitrate: 2500,\n    droppedFrames: 0.2\n  });\n\n  // Streaming presets\n  const streamingPresets: StreamingPreset[] = [\n    {\n      id: 'mobile-optimized',\n      name: 'Mobile Optimized',\n      description: 'Best for streaming from mobile devices',\n      quality: 'medium',\n      videoBitrate: 1500,\n      audioBitrate: 64,\n      fps: 30,\n      resolution: '720p',\n      batteryImpact: 'low',\n      dataUsage: '1.1 GB/hour',\n      recommended: true\n    },\n    {\n      id: 'balanced',\n      name: 'Balanced Quality',\n      description: 'Good balance of quality and performance',\n      quality: 'medium',\n      videoBitrate: 2500,\n      audioBitrate: 96,\n      fps: 30,\n      resolution: '1080p',\n      batteryImpact: 'medium',\n      dataUsage: '1.8 GB/hour',\n      recommended: false\n    },\n    {\n      id: 'high-quality',\n      name: 'High Quality',\n      description: 'Best quality for professional streams',\n      quality: 'high',\n      videoBitrate: 4000,\n      audioBitrate: 128,\n      fps: 60,\n      resolution: '1080p',\n      batteryImpact: 'high',\n      dataUsage: '2.8 GB/hour',\n      recommended: false\n    },\n    {\n      id: 'ultra-hd',\n      name: 'Ultra HD',\n      description: 'Maximum quality for premium content',\n      quality: 'ultra',\n      videoBitrate: 8000,\n      audioBitrate: 256,\n      fps: 60,\n      resolution: '4K',\n      batteryImpact: 'high',\n      dataUsage: '5.5 GB/hour',\n      recommended: false\n    },\n    {\n      id: 'audio-only',\n      name: 'Audio Only',\n      description: 'Perfect for music and podcasts',\n      quality: 'high',\n      videoBitrate: 0,\n      audioBitrate: 320,\n      fps: 0,\n      resolution: 'N/A',\n      batteryImpact: 'low',\n      dataUsage: '0.3 GB/hour',\n      recommended: false\n    }\n  ];\n\n  // Mock analytics data\n  const generateAnalyticsData = useCallback((): AnalyticsData => {\n    return {\n      revenue: {\n        total: 12450,\n        thisMonth: 3200,\n        growth: 23.5\n      },\n      audience: {\n        liveViewers: 1247,\n        totalFollowers: 45678,\n        engagement: 8.7,\n        demographics: {\n          age: { '13-17': 15, '18-24': 35, '25-34': 30, '35-44': 15, '45+': 5 },\n          location: { 'US': 40, 'UK': 15, 'Canada': 12, 'Australia': 8, 'Other': 25 }\n        }\n      },\n      performance: {\n        avgStreamDuration: 145,\n        peakViewers: 3456,\n        chatActivity: 15.2,\n        retention: 67.8\n      },\n      monetization: {\n        donations: 8750,\n        subscriptions: 2100,\n        sponsorships: 1200,\n        merchandise: 400\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    setAnalyticsData(generateAnalyticsData());\n  }, [generateAnalyticsData]);\n\n  // Update preset\n  const handlePresetChange = useCallback((presetId: string) => {\n    const preset = streamingPresets.find(p => p.id === presetId);\n    if (preset) {\n      setSelectedPreset(presetId);\n      onPresetChange?.(preset);\n    }\n  }, [onPresetChange]);\n\n  // Get quality color\n  const getQualityColor = (quality: StreamingPreset['quality']) => {\n    switch (quality) {\n      case 'low': return 'text-red-400';\n      case 'medium': return 'text-yellow-400';\n      case 'high': return 'text-green-400';\n      case 'ultra': return 'text-purple-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getBatteryColor = (impact: 'low' | 'medium' | 'high') => {\n    switch (impact) {\n      case 'low': return 'text-green-400';\n      case 'medium': return 'text-yellow-400';\n      case 'high': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className={`h-screen w-full bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white ${className}`}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-800 bg-black/50 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Settings className=\"w-6 h-6 text-blue-400\" />\n            <h1 className=\"text-xl font-bold\">Professional Tools</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Stream status */}\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <div className={`w-2 h-2 rounded-full ${isLive ? 'bg-red-500 animate-pulse' : 'bg-gray-500'}`} />\n              <span>{isLive ? 'LIVE' : 'OFFLINE'}</span>\n            </div>\n            \n            {/* Connection indicators */}\n            <div className=\"flex items-center space-x-2 text-xs text-gray-400\">\n              <Wifi className=\"w-4 h-4\" />\n              <Signal className=\"w-4 h-4\" />\n              <Battery className=\"w-4 h-4\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex border-b border-gray-800\">\n        {[\n          { id: 'streaming', label: 'Streaming', icon: Video },\n          { id: 'camera', label: 'Camera', icon: Camera },\n          { id: 'audio', label: 'Audio', icon: Mic },\n          { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n          { id: 'monetization', label: 'Revenue', icon: DollarSign }\n        ].map((tab) => (\n          <Button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id as any)}\n            variant=\"ghost\"\n            className={`flex-1 rounded-none py-4 ${\n              activeTab === tab.id ? 'border-b-2 border-blue-500 text-blue-400' : 'text-gray-400'\n            }`}\n          >\n            <tab.icon className=\"w-4 h-4 mr-2\" />\n            {tab.label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {activeTab === 'streaming' && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Streaming Presets</h2>\n              <p className=\"text-gray-400\">Optimize your stream for different scenarios</p>\n            </div>\n\n            {/* Current Stream Health */}\n            {isLive && (\n              <Card className=\"bg-black/50 border-gray-700 p-4 mb-6\">\n                <h3 className=\"font-semibold mb-4 flex items-center\">\n                  <Monitor className=\"w-5 h-5 mr-2\" />\n                  Stream Health\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-400\">{streamHealth.connection}</div>\n                    <div className=\"text-xs text-gray-400\">Connection</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-400\">{streamHealth.latency}ms</div>\n                    <div className=\"text-xs text-gray-400\">Latency</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-400\">{streamHealth.bitrate}</div>\n                    <div className=\"text-xs text-gray-400\">Bitrate</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-400\">{streamHealth.droppedFrames}%</div>\n                    <div className=\"text-xs text-gray-400\">Dropped</div>\n                  </div>\n                </div>\n              </Card>\n            )}\n\n            {/* Presets Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {streamingPresets.map((preset) => (\n                <Card \n                  key={preset.id} \n                  className={`p-4 cursor-pointer transition-all border-2 ${\n                    selectedPreset === preset.id \n                      ? 'border-blue-500 bg-blue-500/10' \n                      : 'border-gray-700 bg-black/50 hover:border-gray-600'\n                  }`}\n                  onClick={() => handlePresetChange(preset.id)}\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-bold\">{preset.name}</h3>\n                        {preset.recommended && (\n                          <Badge className=\"bg-green-500 text-xs\">Recommended</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-gray-400\">{preset.description}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {/* Quality indicators */}\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <div className=\"text-gray-400\">Quality</div>\n                        <div className={`font-semibold ${getQualityColor(preset.quality)}`}>\n                          {preset.quality.toUpperCase()}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-400\">Resolution</div>\n                        <div className=\"font-semibold\">{preset.resolution}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <div className=\"text-gray-400\">Video</div>\n                        <div className=\"font-semibold\">\n                          {preset.videoBitrate > 0 ? `${preset.videoBitrate} kbps` : 'None'}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-400\">Audio</div>\n                        <div className=\"font-semibold\">{preset.audioBitrate} kbps</div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <div className=\"text-gray-400\">Battery</div>\n                        <div className={`font-semibold ${getBatteryColor(preset.batteryImpact)}`}>\n                          {preset.batteryImpact.toUpperCase()}\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-gray-400\">Data Usage</div>\n                        <div className=\"font-semibold\">{preset.dataUsage}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {selectedPreset === preset.id && (\n                    <div className=\"mt-4 pt-3 border-t border-gray-600\">\n                      <div className=\"flex items-center justify-center text-blue-400 text-sm\">\n                        <Zap className=\"w-4 h-4 mr-1\" />\n                        Active Preset\n                      </div>\n                    </div>\n                  )}\n                </Card>\n              ))}\n            </div>\n\n            {/* Advanced Settings */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Advanced Settings</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Custom Bitrate</label>\n                  <Slider\n                    value={[2500]}\n                    max={8000}\n                    min={500}\n                    step={100}\n                    className=\"w-full\"\n                  />\n                  <div className=\"text-xs text-gray-400 mt-1\">2500 kbps</div>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Frame Rate</label>\n                  <div className=\"flex space-x-2\">\n                    {[24, 30, 60].map((fps) => (\n                      <Button key={fps} variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                        {fps} FPS\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'camera' && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Camera Settings</h2>\n              <p className=\"text-gray-400\">Configure camera and video options</p>\n            </div>\n\n            {/* Camera Selection */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Camera Selection</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button\n                  onClick={() => setCameraSettings({...cameraSettings, front: true, back: false})}\n                  variant={cameraSettings.front ? \"default\" : \"outline\"}\n                  className=\"h-20 flex-col\"\n                >\n                  <Camera className=\"w-6 h-6 mb-2\" />\n                  Front Camera\n                </Button>\n                <Button\n                  onClick={() => setCameraSettings({...cameraSettings, front: false, back: true})}\n                  variant={cameraSettings.back ? \"default\" : \"outline\"}\n                  className=\"h-20 flex-col\"\n                >\n                  <Video className=\"w-6 h-6 mb-2\" />\n                  Back Camera\n                </Button>\n              </div>\n            </Card>\n\n            {/* Zoom Control */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Zoom Level</h3>\n              <Slider\n                value={[cameraSettings.zoom]}\n                onValueChange={(value) => setCameraSettings({...cameraSettings, zoom: value[0]})}\n                max={10}\n                min={1}\n                step={0.1}\n                className=\"w-full\"\n              />\n              <div className=\"text-sm text-gray-400 mt-2\">{cameraSettings.zoom.toFixed(1)}x zoom</div>\n            </Card>\n\n            {/* Camera Features */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Camera Features</h3>\n              <div className=\"space-y-4\">\n                {[\n                  { key: 'stabilization', label: 'Image Stabilization', description: 'Reduces camera shake' },\n                  { key: 'nightMode', label: 'Night Mode', description: 'Better low-light performance' },\n                  { key: 'autoFocus', label: 'Auto Focus', description: 'Automatic focus adjustment' }\n                ].map((feature) => (\n                  <div key={feature.key} className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">{feature.label}</div>\n                      <div className=\"text-sm text-gray-400\">{feature.description}</div>\n                    </div>\n                    <Button\n                      onClick={() => setCameraSettings({\n                        ...cameraSettings,\n                        [feature.key]: !cameraSettings[feature.key as keyof CameraSettings]\n                      })}\n                      variant={cameraSettings[feature.key as keyof CameraSettings] ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                    >\n                      {cameraSettings[feature.key as keyof CameraSettings] ? 'ON' : 'OFF'}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'audio' && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Audio Settings</h2>\n              <p className=\"text-gray-400\">Configure audio quality and processing</p>\n            </div>\n\n            {/* Audio Processing */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Audio Processing</h3>\n              <div className=\"space-y-4\">\n                {[\n                  { key: 'noiseReduction', label: 'Noise Reduction', description: 'Filter background noise' },\n                  { key: 'echoCancel', label: 'Echo Cancellation', description: 'Remove audio echo' },\n                  { key: 'autoGain', label: 'Auto Gain Control', description: 'Automatic volume adjustment' },\n                  { key: 'monitoring', label: 'Audio Monitoring', description: 'Hear your own audio' }\n                ].map((feature) => (\n                  <div key={feature.key} className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\">{feature.label}</div>\n                      <div className=\"text-sm text-gray-400\">{feature.description}</div>\n                    </div>\n                    <Button\n                      onClick={() => setAudioSettings({\n                        ...audioSettings,\n                        [feature.key]: !audioSettings[feature.key as keyof AudioSettings]\n                      })}\n                      variant={audioSettings[feature.key as keyof AudioSettings] ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                    >\n                      {audioSettings[feature.key as keyof AudioSettings] ? 'ON' : 'OFF'}\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </Card>\n\n            {/* Audio Quality */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Audio Quality</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Sample Rate</label>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {[22050, 44100, 48000].map((rate) => (\n                      <Button\n                        key={rate}\n                        onClick={() => setAudioSettings({...audioSettings, sampleRate: rate})}\n                        variant={audioSettings.sampleRate === rate ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                      >\n                        {rate} Hz\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm text-gray-300 mb-2 block\">Bit Depth</label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {[16, 24].map((depth) => (\n                      <Button\n                        key={depth}\n                        onClick={() => setAudioSettings({...audioSettings, bitDepth: depth})}\n                        variant={audioSettings.bitDepth === depth ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                      >\n                        {depth}-bit\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Audio Levels */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4 flex items-center\">\n                <Headphones className=\"w-5 h-5 mr-2\" />\n                Live Audio Levels\n              </h3>\n              <div className=\"space-y-3\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Microphone</span>\n                    <span>-12 dB</span>\n                  </div>\n                  <Progress value={75} className=\"h-2\" />\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>System Audio</span>\n                    <span>-18 dB</span>\n                  </div>\n                  <Progress value={60} className=\"h-2\" />\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Output</span>\n                    <span>-6 dB</span>\n                  </div>\n                  <Progress value={85} className=\"h-2\" />\n                </div>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'analytics' && analyticsData && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Analytics Dashboard</h2>\n              <p className=\"text-gray-400\">Track your performance and growth</p>\n            </div>\n\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Eye className=\"w-8 h-8 mx-auto mb-2 text-blue-500\" />\n                <div className=\"text-2xl font-bold\">{analyticsData.audience.liveViewers.toLocaleString()}</div>\n                <div className=\"text-xs text-gray-400\">Live Viewers</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Users className=\"w-8 h-8 mx-auto mb-2 text-green-500\" />\n                <div className=\"text-2xl font-bold\">{analyticsData.audience.totalFollowers.toLocaleString()}</div>\n                <div className=\"text-xs text-gray-400\">Followers</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <Clock className=\"w-8 h-8 mx-auto mb-2 text-purple-500\" />\n                <div className=\"text-2xl font-bold\">{analyticsData.performance.avgStreamDuration}m</div>\n                <div className=\"text-xs text-gray-400\">Avg Duration</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <TrendingUp className=\"w-8 h-8 mx-auto mb-2 text-yellow-500\" />\n                <div className=\"text-2xl font-bold\">{analyticsData.audience.engagement}%</div>\n                <div className=\"text-xs text-gray-400\">Engagement</div>\n              </Card>\n            </div>\n\n            {/* Revenue Overview */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4 flex items-center\">\n                <DollarSign className=\"w-5 h-5 mr-2\" />\n                Revenue Overview\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-400\">\n                    ${analyticsData.revenue.total.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">Total Revenue</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">\n                    ${analyticsData.revenue.thisMonth.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-gray-400\">This Month</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-400\">\n                    +{analyticsData.revenue.growth}%\n                  </div>\n                  <div className=\"text-sm text-gray-400\">Growth</div>\n                </div>\n              </div>\n            </Card>\n\n            {/* Audience Demographics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card className=\"bg-black/50 border-gray-700 p-4\">\n                <h3 className=\"font-semibold mb-4\">Age Demographics</h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(analyticsData.audience.demographics.age).map(([age, percentage]) => (\n                    <div key={age} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">{age}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Progress value={percentage} className=\"w-20 h-2\" />\n                        <span className=\"text-sm text-gray-400\">{percentage}%</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n\n              <Card className=\"bg-black/50 border-gray-700 p-4\">\n                <h3 className=\"font-semibold mb-4\">Top Locations</h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(analyticsData.audience.demographics.location).map(([location, percentage]) => (\n                    <div key={location} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">{location}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <Progress value={percentage} className=\"w-20 h-2\" />\n                        <span className=\"text-sm text-gray-400\">{percentage}%</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'monetization' && analyticsData && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold mb-2\">Revenue Tracking</h2>\n              <p className=\"text-gray-400\">Monitor your earnings and growth</p>\n            </div>\n\n            {/* Revenue Sources */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-400\">\n                  ${analyticsData.monetization.donations.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-gray-400\">Donations</div>\n                <div className=\"text-xs text-green-400 mt-1\">+12.5%</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <div className=\"text-2xl font-bold text-blue-400\">\n                  ${analyticsData.monetization.subscriptions.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-gray-400\">Subscriptions</div>\n                <div className=\"text-xs text-blue-400 mt-1\">+8.3%</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <div className=\"text-2xl font-bold text-purple-400\">\n                  ${analyticsData.monetization.sponsorships.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-gray-400\">Sponsorships</div>\n                <div className=\"text-xs text-purple-400 mt-1\">+45.2%</div>\n              </Card>\n              \n              <Card className=\"bg-black/50 border-gray-700 p-4 text-center\">\n                <div className=\"text-2xl font-bold text-yellow-400\">\n                  ${analyticsData.monetization.merchandise.toLocaleString()}\n                </div>\n                <div className=\"text-sm text-gray-400\">Merchandise</div>\n                <div className=\"text-xs text-yellow-400 mt-1\">+23.1%</div>\n              </Card>\n            </div>\n\n            {/* Monetization Tools */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Monetization Tools</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Button className=\"h-20 flex-col bg-green-600 hover:bg-green-700\">\n                  <DollarSign className=\"w-6 h-6 mb-2\" />\n                  Set Donation Goals\n                </Button>\n                <Button className=\"h-20 flex-col bg-blue-600 hover:bg-blue-700\">\n                  <Star className=\"w-6 h-6 mb-2\" />\n                  Subscription Tiers\n                </Button>\n                <Button className=\"h-20 flex-col bg-purple-600 hover:bg-purple-700\">\n                  <Shield className=\"w-6 h-6 mb-2\" />\n                  Brand Partnerships\n                </Button>\n                <Button className=\"h-20 flex-col bg-orange-600 hover:bg-orange-700\">\n                  <Download className=\"w-6 h-6 mb-2\" />\n                  Sell Beats/Content\n                </Button>\n              </div>\n            </Card>\n\n            {/* Payout Information */}\n            <Card className=\"bg-black/50 border-gray-700 p-4\">\n              <h3 className=\"font-semibold mb-4\">Payout Information</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-lg font-bold text-green-400\">$2,847.32</div>\n                  <div className=\"text-sm text-gray-400\">Available for Payout</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold\">$1,245.67</div>\n                  <div className=\"text-sm text-gray-400\">Pending Clearance</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold\">Next: March 15</div>\n                  <div className=\"text-sm text-gray-400\">Payout Date</div>\n                </div>\n              </div>\n              \n              <Button className=\"w-full mt-4 bg-green-500 hover:bg-green-600\">\n                Request Payout\n              </Button>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":32523},"client/src/components/quality-controls.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Settings, Monitor, Wifi, Zap, Activity, \n  HardDrive, Clock, Gauge, Volume2 \n} from \"lucide-react\";\n\ninterface QualitySettings {\n  video: {\n    resolution: string;\n    frameRate: number;\n    bitrate: number;\n    codec: string;\n  };\n  audio: {\n    sampleRate: number;\n    bitrate: number;\n    channels: number;\n    codec: string;\n  };\n  streaming: {\n    adaptiveBitrate: boolean;\n    lowLatencyMode: boolean;\n    bufferSize: number;\n    keyFrameInterval: number;\n  };\n  performance: {\n    hardwareAcceleration: boolean;\n    multiThreading: boolean;\n    cpuUsageLimit: number;\n    memoryUsageLimit: number;\n  };\n}\n\ninterface QualityControlsProps {\n  settings?: Partial<QualitySettings>;\n  onSettingsChange?: (settings: QualitySettings) => void;\n  presets?: Array<{ name: string; settings: QualitySettings }>;\n  showAdvanced?: boolean;\n  currentBitrate?: number;\n  currentFPS?: number;\n  cpuUsage?: number;\n  memoryUsage?: number;\n  networkLatency?: number;\n}\n\nexport default function QualityControls({\n  settings,\n  onSettingsChange,\n  presets = [],\n  showAdvanced = false,\n  currentBitrate = 0,\n  currentFPS = 0,\n  cpuUsage = 0,\n  memoryUsage = 0,\n  networkLatency = 0\n}: QualityControlsProps) {\n  const [currentSettings, setCurrentSettings] = useState<QualitySettings>({\n    video: {\n      resolution: '1280x720',\n      frameRate: 30,\n      bitrate: 2500,\n      codec: 'h264'\n    },\n    audio: {\n      sampleRate: 44100,\n      bitrate: 128,\n      channels: 2,\n      codec: 'aac'\n    },\n    streaming: {\n      adaptiveBitrate: true,\n      lowLatencyMode: true,\n      bufferSize: 1024,\n      keyFrameInterval: 2\n    },\n    performance: {\n      hardwareAcceleration: true,\n      multiThreading: true,\n      cpuUsageLimit: 80,\n      memoryUsageLimit: 75\n    },\n    ...settings\n  });\n\n  const [selectedPreset, setSelectedPreset] = useState<string>('custom');\n  const [showPerformanceMetrics, setShowPerformanceMetrics] = useState(true);\n\n  // Quality presets\n  // Mobile-first presets with better data usage\n  const defaultPresets = [\n    {\n      name: 'Mobile Data Saver',\n      settings: {\n        video: { resolution: '480x360', frameRate: 15, bitrate: 300, codec: 'h264' },\n        audio: { sampleRate: 22050, bitrate: 32, channels: 1, codec: 'aac' },\n        streaming: { adaptiveBitrate: true, lowLatencyMode: true, bufferSize: 128, keyFrameInterval: 4 },\n        performance: { hardwareAcceleration: false, multiThreading: false, cpuUsageLimit: 40, memoryUsageLimit: 30 }\n      }\n    },\n    {\n      name: 'Mobile Standard',\n      settings: {\n        video: { resolution: '640x480', frameRate: 20, bitrate: 600, codec: 'h264' },\n        audio: { sampleRate: 22050, bitrate: 64, channels: 1, codec: 'aac' },\n        streaming: { adaptiveBitrate: true, lowLatencyMode: true, bufferSize: 256, keyFrameInterval: 3 },\n        performance: { hardwareAcceleration: true, multiThreading: false, cpuUsageLimit: 50, memoryUsageLimit: 40 }\n      }\n    },\n    {\n      name: 'Mobile WiFi',\n      settings: {\n        video: { resolution: '854x480', frameRate: 24, bitrate: 1000, codec: 'h264' },\n        audio: { sampleRate: 44100, bitrate: 96, channels: 2, codec: 'aac' },\n        streaming: { adaptiveBitrate: true, lowLatencyMode: true, bufferSize: 512, keyFrameInterval: 2 },\n        performance: { hardwareAcceleration: true, multiThreading: true, cpuUsageLimit: 60, memoryUsageLimit: 50 }\n      }\n    },\n    {\n      name: 'Desktop High',\n      settings: {\n        video: { resolution: '1280x720', frameRate: 30, bitrate: 2500, codec: 'h264' },\n        audio: { sampleRate: 44100, bitrate: 128, channels: 2, codec: 'aac' },\n        streaming: { adaptiveBitrate: true, lowLatencyMode: true, bufferSize: 1024, keyFrameInterval: 2 },\n        performance: { hardwareAcceleration: true, multiThreading: true, cpuUsageLimit: 70, memoryUsageLimit: 65 }\n      }\n    },\n    {\n      name: 'Desktop Ultra',\n      settings: {\n        video: { resolution: '1920x1080', frameRate: 60, bitrate: 5000, codec: 'h264' },\n        audio: { sampleRate: 48000, bitrate: 192, channels: 2, codec: 'aac' },\n        streaming: { adaptiveBitrate: true, lowLatencyMode: false, bufferSize: 2048, keyFrameInterval: 2 },\n        performance: { hardwareAcceleration: true, multiThreading: true, cpuUsageLimit: 85, memoryUsageLimit: 80 }\n      }\n    }\n  ];\n\n  const allPresets = [...defaultPresets, ...presets];\n\n  // Update settings\n  const updateSettings = useCallback((newSettings: Partial<QualitySettings>) => {\n    const updated = {\n      ...currentSettings,\n      ...newSettings,\n      video: { ...currentSettings.video, ...newSettings.video },\n      audio: { ...currentSettings.audio, ...newSettings.audio },\n      streaming: { ...currentSettings.streaming, ...newSettings.streaming },\n      performance: { ...currentSettings.performance, ...newSettings.performance }\n    };\n    \n    setCurrentSettings(updated);\n    onSettingsChange?.(updated);\n  }, [currentSettings, onSettingsChange]);\n\n  // Apply preset\n  const applyPreset = useCallback((presetName: string) => {\n    const preset = allPresets.find(p => p.name === presetName);\n    if (preset) {\n      setCurrentSettings(preset.settings);\n      onSettingsChange?.(preset.settings);\n    }\n    setSelectedPreset(presetName);\n  }, [allPresets, onSettingsChange]);\n\n  // Get quality status\n  const getQualityStatus = () => {\n    const totalBitrate = currentSettings.video.bitrate + currentSettings.audio.bitrate;\n    \n    if (totalBitrate >= 6000) return { label: 'Ultra', color: 'bg-purple-500' };\n    if (totalBitrate >= 3000) return { label: 'High', color: 'bg-green-500' };\n    if (totalBitrate >= 1500) return { label: 'Medium', color: 'bg-yellow-500' };\n    return { label: 'Low', color: 'bg-red-500' };\n  };\n\n  const qualityStatus = getQualityStatus();\n\n  return (\n    <Card className=\"bg-dark-200 border-dark-400 p-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Settings className=\"w-5 h-5 text-purple-500\" />\n            <h3 className=\"text-lg font-semibold text-white\">Quality Controls</h3>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Badge className={`${qualityStatus.color} text-white`}>\n              {qualityStatus.label} Quality\n            </Badge>\n            {showPerformanceMetrics && (\n              <Button\n                onClick={() => setShowPerformanceMetrics(!showPerformanceMetrics)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-dark-400 text-white\"\n                data-testid=\"toggle-metrics\"\n              >\n                <Activity className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        {showPerformanceMetrics && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center space-x-1\">\n                <Gauge className=\"w-3 h-3 text-gray-400\" />\n                <span className=\"text-xs text-gray-400\">Bitrate</span>\n              </div>\n              <div className=\"text-sm font-medium text-white\">{currentBitrate}kbps</div>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"flex items-center space-x-1\">\n                <Monitor className=\"w-3 h-3 text-gray-400\" />\n                <span className=\"text-xs text-gray-400\">FPS</span>\n              </div>\n              <div className=\"text-sm font-medium text-white\">{currentFPS}</div>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"flex items-center space-x-1\">\n                <Zap className=\"w-3 h-3 text-gray-400\" />\n                <span className=\"text-xs text-gray-400\">CPU</span>\n              </div>\n              <div className={`text-sm font-medium ${\n                cpuUsage > 80 ? 'text-red-500' : cpuUsage > 60 ? 'text-yellow-500' : 'text-green-500'\n              }`}>\n                {cpuUsage}%\n              </div>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"w-3 h-3 text-gray-400\" />\n                <span className=\"text-xs text-gray-400\">Latency</span>\n              </div>\n              <div className={`text-sm font-medium ${\n                networkLatency > 100 ? 'text-red-500' : networkLatency > 50 ? 'text-yellow-500' : 'text-green-500'\n              }`}>\n                {networkLatency}ms\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Preset Selection */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm text-gray-400\">Quality Preset</label>\n          <Select value={selectedPreset} onValueChange={applyPreset}>\n            <SelectTrigger className=\"bg-dark-300 border-dark-400 text-white\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent className=\"bg-dark-300 border-dark-400\">\n              <SelectItem value=\"custom\">Custom</SelectItem>\n              {allPresets.map((preset) => (\n                <SelectItem key={preset.name} value={preset.name}>\n                  {preset.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Video Settings */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-sm font-semibold text-white flex items-center\">\n            <Monitor className=\"w-4 h-4 mr-2\" />\n            Video Settings\n          </h4>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-xs text-gray-400\">Resolution</label>\n              <Select \n                value={currentSettings.video.resolution} \n                onValueChange={(value) => updateSettings({ video: { ...currentSettings.video, resolution: value } })}\n              >\n                <SelectTrigger className=\"bg-dark-300 border-dark-400 text-white text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-dark-300 border-dark-400\">\n                  <SelectItem value=\"3840x2160\">4K (3840x2160)</SelectItem>\n                  <SelectItem value=\"1920x1080\">1080p (1920x1080)</SelectItem>\n                  <SelectItem value=\"1280x720\">720p (1280x720)</SelectItem>\n                  <SelectItem value=\"854x480\">480p (854x480)</SelectItem>\n                  <SelectItem value=\"640x360\">360p (640x360)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-xs text-gray-400\">Frame Rate</label>\n              <Select \n                value={currentSettings.video.frameRate.toString()} \n                onValueChange={(value) => updateSettings({ video: { ...currentSettings.video, frameRate: parseInt(value) } })}\n              >\n                <SelectTrigger className=\"bg-dark-300 border-dark-400 text-white text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-dark-300 border-dark-400\">\n                  <SelectItem value=\"15\">15 FPS</SelectItem>\n                  <SelectItem value=\"24\">24 FPS</SelectItem>\n                  <SelectItem value=\"30\">30 FPS</SelectItem>\n                  <SelectItem value=\"60\">60 FPS</SelectItem>\n                  <SelectItem value=\"120\">120 FPS</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs text-gray-400\">Video Bitrate</label>\n              <span className=\"text-xs text-white\">{currentSettings.video.bitrate} kbps</span>\n            </div>\n            <Slider\n              value={[currentSettings.video.bitrate]}\n              onValueChange={(value) => updateSettings({ video: { ...currentSettings.video, bitrate: value[0] } })}\n              min={100}\n              max={10000}\n              step={100}\n              className=\"w-full\"\n              data-testid=\"video-bitrate-slider\"\n            />\n          </div>\n        </div>\n\n        {/* Audio Settings */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-sm font-semibold text-white flex items-center\">\n            <Volume2 className=\"w-4 h-4 mr-2\" />\n            Audio Settings\n          </h4>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-xs text-gray-400\">Sample Rate</label>\n              <Select \n                value={currentSettings.audio.sampleRate.toString()} \n                onValueChange={(value) => updateSettings({ audio: { ...currentSettings.audio, sampleRate: parseInt(value) } })}\n              >\n                <SelectTrigger className=\"bg-dark-300 border-dark-400 text-white text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-dark-300 border-dark-400\">\n                  <SelectItem value=\"22050\">22.05 kHz</SelectItem>\n                  <SelectItem value=\"44100\">44.1 kHz</SelectItem>\n                  <SelectItem value=\"48000\">48 kHz</SelectItem>\n                  <SelectItem value=\"96000\">96 kHz</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-xs text-gray-400\">Channels</label>\n              <Select \n                value={currentSettings.audio.channels.toString()} \n                onValueChange={(value) => updateSettings({ audio: { ...currentSettings.audio, channels: parseInt(value) } })}\n              >\n                <SelectTrigger className=\"bg-dark-300 border-dark-400 text-white text-xs\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-dark-300 border-dark-400\">\n                  <SelectItem value=\"1\">Mono</SelectItem>\n                  <SelectItem value=\"2\">Stereo</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs text-gray-400\">Audio Bitrate</label>\n              <span className=\"text-xs text-white\">{currentSettings.audio.bitrate} kbps</span>\n            </div>\n            <Slider\n              value={[currentSettings.audio.bitrate]}\n              onValueChange={(value) => updateSettings({ audio: { ...currentSettings.audio, bitrate: value[0] } })}\n              min={32}\n              max={320}\n              step={8}\n              className=\"w-full\"\n              data-testid=\"audio-bitrate-slider\"\n            />\n          </div>\n        </div>\n\n        {/* Streaming Settings */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-sm font-semibold text-white flex items-center\">\n            <Wifi className=\"w-4 h-4 mr-2\" />\n            Streaming Settings\n          </h4>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <span className=\"text-sm text-white\">Adaptive Bitrate</span>\n                <p className=\"text-xs text-gray-400\">Automatically adjust quality based on connection</p>\n              </div>\n              <Switch\n                checked={currentSettings.streaming.adaptiveBitrate}\n                onCheckedChange={(checked) => updateSettings({ streaming: { ...currentSettings.streaming, adaptiveBitrate: checked } })}\n                data-testid=\"adaptive-bitrate-switch\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <span className=\"text-sm text-white\">Low Latency Mode</span>\n                <p className=\"text-xs text-gray-400\">Reduce delay for real-time interaction</p>\n              </div>\n              <Switch\n                checked={currentSettings.streaming.lowLatencyMode}\n                onCheckedChange={(checked) => updateSettings({ streaming: { ...currentSettings.streaming, lowLatencyMode: checked } })}\n                data-testid=\"low-latency-switch\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-xs text-gray-400\">Buffer Size</label>\n              <span className=\"text-xs text-white\">{currentSettings.streaming.bufferSize} KB</span>\n            </div>\n            <Slider\n              value={[currentSettings.streaming.bufferSize]}\n              onValueChange={(value) => updateSettings({ streaming: { ...currentSettings.streaming, bufferSize: value[0] } })}\n              min={256}\n              max={4096}\n              step={256}\n              className=\"w-full\"\n              data-testid=\"buffer-size-slider\"\n            />\n          </div>\n        </div>\n\n        {/* Advanced Settings */}\n        {showAdvanced && (\n          <div className=\"space-y-4\">\n            <h4 className=\"text-sm font-semibold text-white flex items-center\">\n              <HardDrive className=\"w-4 h-4 mr-2\" />\n              Performance Settings\n            </h4>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-sm text-white\">Hardware Acceleration</span>\n                  <p className=\"text-xs text-gray-400\">Use GPU for encoding when available</p>\n                </div>\n                <Switch\n                  checked={currentSettings.performance.hardwareAcceleration}\n                  onCheckedChange={(checked) => updateSettings({ performance: { ...currentSettings.performance, hardwareAcceleration: checked } })}\n                  data-testid=\"hardware-acceleration-switch\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-sm text-white\">Multi-threading</span>\n                  <p className=\"text-xs text-gray-400\">Use multiple CPU cores for processing</p>\n                </div>\n                <Switch\n                  checked={currentSettings.performance.multiThreading}\n                  onCheckedChange={(checked) => updateSettings({ performance: { ...currentSettings.performance, multiThreading: checked } })}\n                  data-testid=\"multi-threading-switch\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-xs text-gray-400\">CPU Usage Limit</label>\n                <span className=\"text-xs text-white\">{currentSettings.performance.cpuUsageLimit}%</span>\n              </div>\n              <Slider\n                value={[currentSettings.performance.cpuUsageLimit]}\n                onValueChange={(value) => updateSettings({ performance: { ...currentSettings.performance, cpuUsageLimit: value[0] } })}\n                min={30}\n                max={100}\n                step={5}\n                className=\"w-full\"\n                data-testid=\"cpu-limit-slider\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}","size_bytes":20165},"client/src/components/social-interactions.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Heart, MessageCircle, Share, Gift, Star,\n  Flame, Crown, Zap, Music, ThumbsUp,\n  Smile, Angry\n} from \"lucide-react\";\n\ninterface FloatingReaction {\n  id: string;\n  type: 'heart' | 'fire' | 'crown' | 'zap' | 'music';\n  x: number;\n  y: number;\n  color: string;\n  size: number;\n}\n\ninterface FloatingComment {\n  id: string;\n  text: string;\n  user: string;\n  avatar: string;\n  timestamp: number;\n  x: number;\n  y: number;\n}\n\ninterface Gift {\n  id: string;\n  name: string;\n  icon: string;\n  value: number;\n  animation: string;\n}\n\ninterface SocialInteractionsProps {\n  streamId: string;\n  onLike?: () => void;\n  onComment?: (comment: string) => void;\n  onShare?: () => void;\n  onGift?: (giftId: string) => void;\n  className?: string;\n}\n\nexport default function SocialInteractions({\n  streamId,\n  onLike,\n  onComment,\n  onShare,\n  onGift,\n  className = \"\"\n}: SocialInteractionsProps) {\n  const [reactions, setReactions] = useState<FloatingReaction[]>([]);\n  const [comments, setComments] = useState<FloatingComment[]>([]);\n  const [showGifts, setShowGifts] = useState(false);\n  const [showEmojis, setShowEmojis] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [likeCount, setLikeCount] = useState(0);\n  const [commentText, setCommentText] = useState('');\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Gift options\n  const gifts: Gift[] = [\n    { id: 'rose', name: 'Rose', icon: '🌹', value: 1, animation: 'pulse' },\n    { id: 'star', name: 'Star', icon: '⭐', value: 5, animation: 'spin' },\n    { id: 'fire', name: 'Fire', icon: '🔥', value: 10, animation: 'bounce' },\n    { id: 'crown', name: 'Crown', icon: '👑', value: 25, animation: 'glow' },\n    { id: 'diamond', name: 'Diamond', icon: '💎', value: 50, animation: 'sparkle' },\n    { id: 'rocket', name: 'Rocket', icon: '🚀', value: 100, animation: 'rocket' }\n  ];\n\n  // Emoji reactions\n  const emojiReactions = [\n    { id: 'heart', icon: '❤️', color: 'text-red-500' },\n    { id: 'fire', icon: '🔥', color: 'text-orange-500' },\n    { id: 'laugh', icon: '😂', color: 'text-yellow-500' },\n    { id: 'wow', icon: '😮', color: 'text-blue-500' },\n    { id: 'crown', icon: '👑', color: 'text-yellow-400' },\n    { id: 'clap', icon: '👏', color: 'text-green-500' }\n  ];\n\n  // Add floating reaction\n  const addReaction = useCallback((type: FloatingReaction['type'], event?: React.MouseEvent) => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const rect = container.getBoundingClientRect();\n    const x = event ? event.clientX - rect.left : Math.random() * rect.width;\n    const y = event ? event.clientY - rect.top : rect.height - 100;\n\n    const colors = {\n      heart: 'text-red-500',\n      fire: 'text-orange-500',\n      crown: 'text-yellow-400',\n      zap: 'text-blue-500',\n      music: 'text-purple-500'\n    };\n\n    const reactionId = `reaction-${Date.now()}-${Math.random()}`;\n    const newReaction: FloatingReaction = {\n      id: reactionId,\n      type,\n      x,\n      y,\n      color: colors[type],\n      size: 24 + Math.random() * 16\n    };\n\n    setReactions(prev => [...prev, newReaction]);\n\n    // Remove after animation\n    setTimeout(() => {\n      setReactions(prev => prev.filter(r => r.id !== reactionId));\n    }, 3000);\n  }, []);\n\n  // Add floating comment\n  const addFloatingComment = useCallback((text: string) => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const rect = container.getBoundingClientRect();\n    const commentId = `comment-${Date.now()}-${Math.random()}`;\n    \n    const newComment: FloatingComment = {\n      id: commentId,\n      text,\n      user: 'You', // Would come from user context\n      avatar: '👤',\n      timestamp: Date.now(),\n      x: Math.random() * (rect.width - 200),\n      y: rect.height - 150\n    };\n\n    setComments(prev => [...prev, newComment]);\n\n    // Remove after animation\n    setTimeout(() => {\n      setComments(prev => prev.filter(c => c.id !== commentId));\n    }, 5000);\n  }, []);\n\n  // Handle like\n  const handleLike = useCallback((event?: React.MouseEvent) => {\n    setIsLiked(!isLiked);\n    setLikeCount(prev => isLiked ? prev - 1 : prev + 1);\n    addReaction('heart', event);\n    onLike?.();\n  }, [isLiked, addReaction, onLike]);\n\n  // Handle comment submission\n  const handleCommentSubmit = useCallback(() => {\n    if (commentText.trim()) {\n      addFloatingComment(commentText);\n      onComment?.(commentText);\n      setCommentText('');\n    }\n  }, [commentText, addFloatingComment, onComment]);\n\n  // Handle gift sending\n  const handleGiftSend = useCallback((gift: Gift) => {\n    // Create special gift animation\n    const container = containerRef.current;\n    if (!container) return;\n\n    // Add gift reaction\n    addReaction('crown');\n    onGift?.(gift.id);\n    setShowGifts(false);\n\n    // Show gift notification\n    console.log(`Sent ${gift.name} worth ${gift.value} coins`);\n  }, [addReaction, onGift]);\n\n  // Render reaction icon\n  const renderReactionIcon = (type: FloatingReaction['type']) => {\n    const iconMap = {\n      heart: Heart,\n      fire: Flame,\n      crown: Crown,\n      zap: Zap,\n      music: Music\n    };\n    \n    const IconComponent = iconMap[type];\n    return <IconComponent className=\"w-full h-full\" />;\n  };\n\n  // Auto-generate reactions\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (Math.random() > 0.7) {\n        const types: FloatingReaction['type'][] = ['heart', 'fire', 'crown', 'zap', 'music'];\n        const randomType = types[Math.floor(Math.random() * types.length)];\n        addReaction(randomType);\n      }\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [addReaction]);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`relative h-full w-full ${className}`}\n    >\n      {/* Floating Reactions */}\n      <AnimatePresence>\n        {reactions.map(reaction => (\n          <motion.div\n            key={reaction.id}\n            initial={{ \n              scale: 0,\n              x: reaction.x,\n              y: reaction.y,\n              opacity: 1\n            }}\n            animate={{ \n              scale: [0, 1.2, 1],\n              y: reaction.y - 200,\n              x: reaction.x + (Math.random() - 0.5) * 100,\n              opacity: [1, 1, 0],\n              rotate: (Math.random() - 0.5) * 360\n            }}\n            exit={{ opacity: 0, scale: 0 }}\n            transition={{ \n              duration: 3,\n              ease: \"easeOut\"\n            }}\n            className={`absolute pointer-events-none z-50 ${reaction.color}`}\n            style={{ \n              width: reaction.size, \n              height: reaction.size \n            }}\n          >\n            {renderReactionIcon(reaction.type)}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Floating Comments */}\n      <AnimatePresence>\n        {comments.map(comment => (\n          <motion.div\n            key={comment.id}\n            initial={{ \n              x: comment.x,\n              y: comment.y,\n              opacity: 0,\n              scale: 0.8\n            }}\n            animate={{ \n              y: comment.y - 100,\n              opacity: [0, 1, 1, 0],\n              scale: 1\n            }}\n            exit={{ opacity: 0 }}\n            transition={{ \n              duration: 5,\n              ease: \"easeOut\"\n            }}\n            className=\"absolute z-40 pointer-events-none\"\n          >\n            <div className=\"bg-black/80 text-white px-3 py-2 rounded-full text-sm max-w-48 backdrop-blur-sm\">\n              <span className=\"font-semibold text-purple-400\">{comment.user}: </span>\n              <span>{comment.text}</span>\n            </div>\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Action Buttons Overlay */}\n      <div className=\"absolute bottom-20 right-4 z-30 space-y-4\">\n        {/* Like Button */}\n        <div className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className={`w-12 h-12 rounded-full backdrop-blur-sm transition-all ${\n              isLiked \n                ? 'bg-red-500/80 text-white scale-110' \n                : 'bg-black/50 text-white hover:bg-red-500/30'\n            }`}\n            onClick={handleLike}\n          >\n            <Heart className={`w-6 h-6 ${isLiked ? 'fill-current' : ''}`} />\n          </Button>\n          <div className=\"text-white text-xs mt-1\">{likeCount}</div>\n        </div>\n\n        {/* Comment Button */}\n        <div className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"w-12 h-12 rounded-full bg-black/50 text-white backdrop-blur-sm hover:bg-blue-500/30\"\n            onClick={() => setShowEmojis(!showEmojis)}\n          >\n            <MessageCircle className=\"w-6 h-6\" />\n          </Button>\n          <div className=\"text-white text-xs mt-1\">Chat</div>\n        </div>\n\n        {/* Gift Button */}\n        <div className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"w-12 h-12 rounded-full bg-black/50 text-white backdrop-blur-sm hover:bg-yellow-500/30\"\n            onClick={() => setShowGifts(!showGifts)}\n          >\n            <Gift className=\"w-6 h-6\" />\n          </Button>\n          <div className=\"text-white text-xs mt-1\">Gift</div>\n        </div>\n\n        {/* Share Button */}\n        <div className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"w-12 h-12 rounded-full bg-black/50 text-white backdrop-blur-sm hover:bg-green-500/30\"\n            onClick={onShare}\n          >\n            <Share className=\"w-6 h-6\" />\n          </Button>\n          <div className=\"text-white text-xs mt-1\">Share</div>\n        </div>\n      </div>\n\n      {/* Quick Emoji Reactions */}\n      <AnimatePresence>\n        {showEmojis && (\n          <motion.div\n            initial={{ opacity: 0, x: 100 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 100 }}\n            className=\"absolute bottom-20 right-20 z-40\"\n          >\n            <div className=\"flex flex-col space-y-2\">\n              {emojiReactions.map(emoji => (\n                <Button\n                  key={emoji.id}\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"w-10 h-10 rounded-full bg-black/70 backdrop-blur-sm hover:scale-110 transition-transform\"\n                  onClick={(e) => {\n                    addReaction(emoji.id as FloatingReaction['type'], e);\n                    setShowEmojis(false);\n                  }}\n                >\n                  <span className=\"text-lg\">{emoji.icon}</span>\n                </Button>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Gift Panel */}\n      <AnimatePresence>\n        {showGifts && (\n          <motion.div\n            initial={{ opacity: 0, y: 100 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 100 }}\n            className=\"absolute bottom-0 left-0 right-0 z-40 bg-black/90 backdrop-blur-sm p-4\"\n          >\n            <div className=\"text-white\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-semibold\">Send a Gift</h3>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setShowGifts(false)}\n                  className=\"text-white\"\n                >\n                  ×\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-3\">\n                {gifts.map(gift => (\n                  <Button\n                    key={gift.id}\n                    variant=\"outline\"\n                    className=\"flex flex-col items-center p-4 h-auto border-gray-600 hover:border-yellow-500 hover:bg-yellow-500/10\"\n                    onClick={() => handleGiftSend(gift)}\n                  >\n                    <span className=\"text-2xl mb-2\">{gift.icon}</span>\n                    <span className=\"text-sm font-medium\">{gift.name}</span>\n                    <span className=\"text-xs text-yellow-400\">{gift.value} coins</span>\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Comment Input */}\n      <div className=\"absolute bottom-4 left-4 right-20 z-30\">\n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            value={commentText}\n            onChange={(e) => setCommentText(e.target.value)}\n            placeholder=\"Add a comment...\"\n            className=\"flex-1 bg-black/70 text-white px-4 py-2 rounded-full backdrop-blur-sm border border-gray-600 focus:border-purple-500 focus:outline-none\"\n            onKeyPress={(e) => e.key === 'Enter' && handleCommentSubmit()}\n            maxLength={100}\n          />\n          <Button\n            onClick={handleCommentSubmit}\n            className=\"bg-purple-500 hover:bg-purple-600 rounded-full px-6\"\n            disabled={!commentText.trim()}\n          >\n            Send\n          </Button>\n        </div>\n      </div>\n\n      {/* Live Activity Indicator */}\n      <div className=\"absolute top-4 right-4 z-30\">\n        <div className=\"flex items-center space-x-2 text-white text-sm bg-black/70 px-3 py-1 rounded-full backdrop-blur-sm\">\n          <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n          <span>Live reactions</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Hook to trigger reactions from external components\nexport function useSocialInteractions() {\n  const triggerReaction = useCallback((type: string) => {\n    window.dispatchEvent(new CustomEvent('trigger-reaction', { \n      detail: { type } \n    }));\n  }, []);\n\n  const triggerComment = useCallback((text: string) => {\n    window.dispatchEvent(new CustomEvent('trigger-comment', { \n      detail: { text } \n    }));\n  }, []);\n\n  return { triggerReaction, triggerComment };\n}","size_bytes":14327},"client/src/components/stream-player.tsx":{"content":"import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Play, Pause, Volume2, VolumeX, Maximize, Minimize, \n  Settings, SkipBack, SkipForward, RotateCcw \n} from \"lucide-react\";\n\ninterface StreamPlayerProps {\n  src?: string;\n  streamUrl?: string;\n  isLive?: boolean;\n  title?: string;\n  streamer?: string;\n  viewers?: number;\n  quality?: 'auto' | 'low' | 'medium' | 'high' | 'ultra';\n  onQualityChange?: (quality: string) => void;\n  enableChapters?: boolean;\n  enableEffects?: boolean;\n}\n\nexport default function StreamPlayer({\n  src,\n  streamUrl,\n  isLive = false,\n  title,\n  streamer,\n  viewers,\n  quality = 'auto',\n  onQualityChange,\n  enableChapters = true,\n  enableEffects = true\n}: StreamPlayerProps) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [volume, setVolume] = useState([75]);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [buffered, setBuffered] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showControls, setShowControls] = useState(true);\n  const [bitrate, setBitrate] = useState(0);\n  const [fps, setFps] = useState(0);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const controlsTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // Quality settings\n  const qualityOptions = [\n    { value: 'auto', label: 'Auto', bitrate: 0 },\n    { value: 'low', label: '360p', bitrate: 500 },\n    { value: 'medium', label: '480p', bitrate: 1000 },\n    { value: 'high', label: '720p', bitrate: 2500 },\n    { value: 'ultra', label: '1080p', bitrate: 5000 }\n  ];\n\n  // Initialize video\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    const handleLoadStart = () => setIsLoading(true);\n    const handleLoadedData = () => {\n      setIsLoading(false);\n      if (!isLive) {\n        setDuration(video.duration);\n      }\n    };\n    \n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime);\n      updateBuffered();\n    };\n\n    const handleProgress = () => updateBuffered();\n    \n    const handleCanPlay = () => setIsLoading(false);\n    \n    const handleWaiting = () => setIsLoading(true);\n    \n    const handleError = (e: Event) => {\n      console.error('Video error:', e);\n      setIsLoading(false);\n    };\n\n    // Add event listeners\n    video.addEventListener('loadstart', handleLoadStart);\n    video.addEventListener('loadeddata', handleLoadedData);\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('progress', handleProgress);\n    video.addEventListener('canplay', handleCanPlay);\n    video.addEventListener('waiting', handleWaiting);\n    video.addEventListener('error', handleError);\n\n    return () => {\n      video.removeEventListener('loadstart', handleLoadStart);\n      video.removeEventListener('loadeddata', handleLoadedData);\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('progress', handleProgress);\n      video.removeEventListener('canplay', handleCanPlay);\n      video.removeEventListener('waiting', handleWaiting);\n      video.removeEventListener('error', handleError);\n    };\n  }, [isLive]);\n\n  // Update buffered progress\n  const updateBuffered = useCallback(() => {\n    const video = videoRef.current;\n    if (!video || !video.buffered.length) return;\n\n    const bufferedEnd = video.buffered.end(video.buffered.length - 1);\n    const bufferedPercent = (bufferedEnd / video.duration) * 100;\n    setBuffered(bufferedPercent);\n  }, []);\n\n  // Monitor stream quality\n  useEffect(() => {\n    if (!videoRef.current) return;\n\n    const video = videoRef.current;\n    const updateStats = () => {\n      // Get video quality stats (approximation)\n      if (video.videoWidth && video.videoHeight) {\n        const estimatedBitrate = quality === 'auto' ? \n          Math.round((video.videoWidth * video.videoHeight * 30) / 1000) :\n          qualityOptions.find(q => q.value === quality)?.bitrate || 0;\n        setBitrate(estimatedBitrate);\n      }\n      \n      // Estimate FPS (simplified)\n      setFps(isLive ? 30 : 24);\n    };\n\n    const interval = setInterval(updateStats, 2000);\n    return () => clearInterval(interval);\n  }, [quality, isLive]);\n\n  // Hide controls after inactivity\n  const resetControlsTimeout = useCallback(() => {\n    setShowControls(true);\n    \n    if (controlsTimeoutRef.current) {\n      clearTimeout(controlsTimeoutRef.current);\n    }\n    \n    if (isPlaying) {\n      controlsTimeoutRef.current = setTimeout(() => {\n        setShowControls(false);\n      }, 3000);\n    }\n  }, [isPlaying]);\n\n  // Play/pause\n  const togglePlay = useCallback(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isPlaying) {\n      video.pause();\n    } else {\n      video.play();\n    }\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]);\n\n  // Seek\n  const handleSeek = useCallback((value: number[]) => {\n    const video = videoRef.current;\n    if (!video || isLive) return;\n    \n    const seekTime = (value[0] / 100) * duration;\n    video.currentTime = seekTime;\n    setCurrentTime(seekTime);\n  }, [duration, isLive]);\n\n  // Volume control\n  const handleVolumeChange = useCallback((value: number[]) => {\n    const video = videoRef.current;\n    if (!video) return;\n    \n    setVolume(value);\n    video.volume = value[0] / 100;\n    setIsMuted(value[0] === 0);\n  }, []);\n\n  // Toggle mute\n  const toggleMute = useCallback(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isMuted) {\n      video.volume = volume[0] / 100;\n      setIsMuted(false);\n    } else {\n      video.volume = 0;\n      setIsMuted(true);\n    }\n  }, [isMuted, volume]);\n\n  // Skip functions\n  const skipBackward = useCallback(() => {\n    const video = videoRef.current;\n    if (!video || isLive) return;\n    video.currentTime = Math.max(0, video.currentTime - 10);\n  }, [isLive]);\n\n  const skipForward = useCallback(() => {\n    const video = videoRef.current;\n    if (!video || isLive) return;\n    video.currentTime = Math.min(duration, video.currentTime + 10);\n  }, [duration, isLive]);\n\n  // Format time\n  const formatTime = (time: number) => {\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor((time % 3600) / 60);\n    const seconds = Math.floor(time % 60);\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Progress percentage\n  const progressPercent = duration > 0 ? (currentTime / duration) * 100 : 0;\n\n  return (\n    <Card \n      ref={containerRef}\n      className=\"bg-dark-200 border-dark-400 overflow-hidden relative group\"\n      onMouseMove={resetControlsTimeout}\n      onMouseEnter={resetControlsTimeout}\n      data-testid=\"stream-player\"\n    >\n      {/* Video Element */}\n      <div className=\"relative aspect-video bg-black\">\n        <video\n          ref={videoRef}\n          src={src || streamUrl}\n          className=\"w-full h-full object-contain\"\n          onClick={togglePlay}\n          autoPlay={isLive}\n          muted={isMuted}\n          playsInline\n          data-testid=\"video-element\"\n        />\n\n        {/* Loading Spinner */}\n        {isLoading && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500\"></div>\n          </div>\n        )}\n\n        {/* Live Badge */}\n        {isLive && (\n          <div className=\"absolute top-4 left-4\">\n            <Badge className=\"bg-red-500 text-white animate-pulse\">\n              LIVE\n            </Badge>\n          </div>\n        )}\n\n        {/* Stream Info */}\n        {(title || streamer) && (\n          <div className=\"absolute top-4 right-4 text-right\">\n            {title && (\n              <div className=\"text-white font-semibold bg-black bg-opacity-50 px-2 py-1 rounded text-sm\">\n                {title}\n              </div>\n            )}\n            {streamer && (\n              <div className=\"text-gray-300 text-xs bg-black bg-opacity-50 px-2 py-1 rounded mt-1\">\n                {streamer}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Viewer Count */}\n        {viewers && (\n          <div className=\"absolute bottom-4 right-4\">\n            <Badge variant=\"outline\" className=\"bg-black bg-opacity-50 text-white border-gray-600\">\n              {viewers.toLocaleString()} viewers\n            </Badge>\n          </div>\n        )}\n\n        {/* Controls Overlay */}\n        <div \n          className={`absolute inset-0 transition-opacity duration-300 ${\n            showControls ? 'opacity-100' : 'opacity-0'\n          }`}\n        >\n          {/* Progress Bar */}\n          {!isLive && (\n            <div className=\"absolute bottom-20 left-4 right-4\">\n              <div className=\"space-y-1\">\n                {/* Buffered progress */}\n                <div className=\"w-full bg-gray-600 rounded-full h-1\">\n                  <div \n                    className=\"bg-gray-400 h-1 rounded-full transition-all duration-300\"\n                    style={{ width: `${buffered}%` }}\n                  />\n                  <div \n                    className=\"bg-purple-500 h-1 rounded-full transition-all duration-100\"\n                    style={{ width: `${progressPercent}%`, marginTop: '-4px' }}\n                  />\n                </div>\n                \n                {/* Time display */}\n                <div className=\"flex justify-between text-xs text-white\">\n                  <span>{formatTime(currentTime)}</span>\n                  <span>{formatTime(duration)}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Main Controls */}\n          <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {/* Play/Pause */}\n              <Button\n                onClick={togglePlay}\n                size=\"icon\"\n                className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n                data-testid=\"play-pause-button\"\n              >\n                {isPlaying ? <Pause className=\"w-5 h-5\" /> : <Play className=\"w-5 h-5\" />}\n              </Button>\n\n              {/* Skip Controls (not for live) */}\n              {!isLive && (\n                <>\n                  <Button\n                    onClick={skipBackward}\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    className=\"text-white hover:text-purple-500\"\n                    data-testid=\"skip-backward\"\n                  >\n                    <SkipBack className=\"w-4 h-4\" />\n                  </Button>\n                  \n                  <Button\n                    onClick={skipForward}\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    className=\"text-white hover:text-purple-500\"\n                    data-testid=\"skip-forward\"\n                  >\n                    <SkipForward className=\"w-4 h-4\" />\n                  </Button>\n                </>\n              )}\n\n              {/* Volume */}\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  onClick={toggleMute}\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"text-white hover:text-purple-500\"\n                  data-testid=\"mute-button\"\n                >\n                  {isMuted ? <VolumeX className=\"w-4 h-4\" /> : <Volume2 className=\"w-4 h-4\" />}\n                </Button>\n                \n                <div className=\"w-20\">\n                  <Slider\n                    value={volume}\n                    onValueChange={handleVolumeChange}\n                    max={100}\n                    step={1}\n                    className=\"w-full\"\n                    data-testid=\"volume-slider\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              {/* Quality Badge */}\n              <Badge variant=\"outline\" className=\"text-xs text-white border-gray-600\">\n                {quality === 'auto' ? 'AUTO' : qualityOptions.find(q => q.value === quality)?.label}\n              </Badge>\n\n              {/* Stream Stats */}\n              {(bitrate > 0 || fps > 0) && (\n                <div className=\"text-xs text-gray-300 bg-black bg-opacity-50 px-2 py-1 rounded\">\n                  {bitrate > 0 && <span>{bitrate}kbps</span>}\n                  {fps > 0 && <span className=\"ml-2\">{fps}fps</span>}\n                </div>\n              )}\n\n              {/* Settings */}\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"text-white hover:text-purple-500\"\n                data-testid=\"settings-button\"\n              >\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n\n              {/* Fullscreen */}\n              <Button\n                onClick={() => setIsFullscreen(!isFullscreen)}\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"text-white hover:text-purple-500\"\n                data-testid=\"fullscreen-button\"\n              >\n                {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":13884},"client/src/components/video-streamer.tsx":{"content":"import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Video, VideoOff, Camera, Settings, Radio, RotateCcw } from \"lucide-react\";\n\ninterface VideoStreamerProps {\n  isStreaming?: boolean;\n  onStreamStart?: (stream: MediaStream) => void;\n  onStreamEnd?: () => void;\n  quality?: 'low' | 'medium' | 'high' | 'ultra';\n  enableEffects?: boolean;\n  roomId?: string;\n}\n\nexport default function VideoStreamer({\n  isStreaming = false,\n  onStreamStart,\n  onStreamEnd,\n  quality = 'high',\n  enableEffects = true,\n  roomId\n}: VideoStreamerProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [selectedCamera, setSelectedCamera] = useState<string>('');\n  const [cameras, setCameras] = useState<MediaDeviceInfo[]>([]);\n  const [resolution, setResolution] = useState({ width: 854, height: 480 }); // Mobile default\n  const [frameRate, setFrameRate] = useState(24); // Lower for mobile\n  const [bitrate, setBitrate] = useState(1000); // Mobile optimized\n  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('user');\n  const [isMobileDevice, setIsMobileDevice] = useState(false);\n  const [isPortrait, setIsPortrait] = useState(false);\n  \n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\n\n  // Mobile-optimized video quality settings\n  const getVideoConstraints = useCallback(() => {\n    const qualitySettings = isMobileDevice ? {\n      low: { width: 480, height: 360, frameRate: 15, bitrate: 300 }, // Very mobile friendly\n      medium: { width: 640, height: 480, frameRate: 20, bitrate: 600 }, // Standard mobile\n      high: { width: 854, height: 480, frameRate: 24, bitrate: 1000 }, // WiFi mobile\n      ultra: { width: 1280, height: 720, frameRate: 30, bitrate: 1500 } // Mobile max\n    } : {\n      low: { width: 640, height: 360, frameRate: 15, bitrate: 500 },\n      medium: { width: 854, height: 480, frameRate: 24, bitrate: 1000 },\n      high: { width: 1280, height: 720, frameRate: 30, bitrate: 2500 },\n      ultra: { width: 1920, height: 1080, frameRate: 60, bitrate: 5000 }\n    };\n\n    const settings = qualitySettings[quality];\n    setResolution({ width: settings.width, height: settings.height });\n    setFrameRate(settings.frameRate);\n    setBitrate(settings.bitrate);\n\n    return {\n      video: {\n        deviceId: selectedCamera ? { exact: selectedCamera } : undefined,\n        width: { ideal: isPortrait ? settings.height : settings.width },\n        height: { ideal: isPortrait ? settings.width : settings.height },\n        frameRate: { ideal: settings.frameRate, max: settings.frameRate },\n        facingMode: isMobileDevice ? facingMode : 'user'\n      },\n      audio: false // Audio handled separately by AudioStreamer\n    };\n  }, [quality, selectedCamera, isMobileDevice, facingMode, isPortrait]);\n\n  // Get available cameras\n  const getAvailableCameras = useCallback(async () => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const videoDevices = devices.filter(device => device.kind === 'videoinput');\n      setCameras(videoDevices);\n      \n      if (videoDevices.length > 0 && !selectedCamera) {\n        setSelectedCamera(videoDevices[0].deviceId);\n      }\n    } catch (error) {\n      console.error('Failed to get cameras:', error);\n    }\n  }, [selectedCamera]);\n\n  // Initialize video effects canvas\n  const initializeVideoProcessing = useCallback(() => {\n    if (canvasRef.current && videoRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      \n      canvas.width = resolution.width;\n      canvas.height = resolution.height;\n      contextRef.current = canvas.getContext('2d');\n\n      if (enableEffects && contextRef.current) {\n        // Setup real-time video processing\n        const processFrame = () => {\n          if (contextRef.current && video && !video.paused && !video.ended) {\n            contextRef.current.drawImage(video, 0, 0, canvas.width, canvas.height);\n            \n            // Apply video effects here (filters, overlays, etc.)\n            if (enableEffects) {\n              const imageData = contextRef.current.getImageData(0, 0, canvas.width, canvas.height);\n              // Example: Apply basic processing\n              contextRef.current.putImageData(imageData, 0, 0);\n            }\n          }\n          \n          if (isRecording) {\n            requestAnimationFrame(processFrame);\n          }\n        };\n\n        video.addEventListener('play', processFrame);\n      }\n    }\n  }, [resolution, enableEffects, isRecording]);\n\n  // Start video streaming\n  const startStreaming = useCallback(async () => {\n    try {\n      const constraints = getVideoConstraints();\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      \n      streamRef.current = stream;\n      setIsRecording(true);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n      }\n\n      initializeVideoProcessing();\n      onStreamStart?.(stream);\n      \n    } catch (error) {\n      console.error('Failed to start video stream:', error);\n    }\n  }, [getVideoConstraints, initializeVideoProcessing, onStreamStart]);\n\n  // Stop video streaming\n  const stopStreaming = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n\n    if (videoRef.current) {\n      videoRef.current.srcObject = null;\n    }\n\n    setIsRecording(false);\n    onStreamEnd?.();\n  }, [onStreamEnd]);\n\n  // Toggle video\n  const toggleVideo = useCallback(() => {\n    if (streamRef.current) {\n      const videoTrack = streamRef.current.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !isVideoOn;\n        setIsVideoOn(!isVideoOn);\n      }\n    }\n  }, [isVideoOn]);\n\n  // Switch camera\n  const switchCamera = useCallback(async (deviceId: string) => {\n    setSelectedCamera(deviceId);\n    \n    if (isRecording) {\n      // Restart stream with new camera\n      stopStreaming();\n      setTimeout(() => {\n        startStreaming();\n      }, 500);\n    }\n  }, [isRecording, stopStreaming, startStreaming]);\n\n  // Mobile device detection and orientation handling\n  useEffect(() => {\n    const checkMobileAndOrientation = () => {\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||\n                       window.innerWidth <= 768;\n      setIsMobileDevice(isMobile);\n      setIsPortrait(window.innerHeight > window.innerWidth);\n    };\n\n    checkMobileAndOrientation();\n    window.addEventListener('resize', checkMobileAndOrientation);\n    window.addEventListener('orientationchange', checkMobileAndOrientation);\n    \n    return () => {\n      window.removeEventListener('resize', checkMobileAndOrientation);\n      window.removeEventListener('orientationchange', checkMobileAndOrientation);\n    };\n  }, []);\n\n  // Initialize cameras on mount\n  useEffect(() => {\n    getAvailableCameras();\n  }, [getAvailableCameras]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopStreaming();\n    };\n  }, [stopStreaming]);\n\n  return (\n    <Card className=\"bg-dark-200 border-dark-400 p-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Radio className={`w-5 h-5 ${isRecording ? 'text-red-500 animate-pulse' : 'text-gray-400'}`} />\n            <h3 className=\"text-lg font-semibold text-white\">Video Stream</h3>\n            {roomId && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Room: {roomId}\n              </Badge>\n            )}\n          </div>\n          <Badge \n            className={`${isRecording ? 'bg-red-500' : 'bg-gray-500'} text-white`}\n            data-testid=\"video-stream-status\"\n          >\n            {isRecording ? 'LIVE' : 'OFFLINE'}\n          </Badge>\n        </div>\n\n        {/* Video Preview */}\n        <div className=\"relative aspect-video bg-dark-400 rounded-lg overflow-hidden\">\n          <video\n            ref={videoRef}\n            autoPlay\n            muted\n            playsInline\n            className={`w-full h-full object-cover ${!isVideoOn ? 'opacity-0' : ''}`}\n            data-testid=\"video-preview\"\n          />\n          {enableEffects && (\n            <canvas\n              ref={canvasRef}\n              className=\"absolute inset-0 w-full h-full object-cover\"\n              style={{ display: isRecording && enableEffects ? 'block' : 'none' }}\n            />\n          )}\n          \n          {!isVideoOn && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-dark-300\">\n              <VideoOff className=\"w-16 h-16 text-gray-500\" />\n            </div>\n          )}\n\n          {/* Video overlay info */}\n          {isRecording && (\n            <div className=\"absolute top-4 left-4 space-y-1\">\n              <Badge className=\"bg-red-500 text-white text-xs\">\n                LIVE\n              </Badge>\n              <div className=\"text-xs text-white bg-black bg-opacity-50 px-2 py-1 rounded\">\n                {resolution.width}x{resolution.height} • {frameRate}fps\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Camera Selection - Mobile Optimized */}\n        <div className=\"space-y-3\">\n          <label className=\"text-sm text-gray-400\">Camera</label>\n          \n          {isMobileDevice ? (\n            // Mobile camera switching (front/back)\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => setFacingMode('user')}\n                variant={facingMode === 'user' ? 'default' : 'outline'}\n                className={`flex-1 h-12 ${\n                  facingMode === 'user' \n                    ? 'bg-purple-500 text-white' \n                    : 'border-dark-400 text-white'\n                }`}\n                data-testid=\"front-camera\"\n              >\n                <Camera className=\"w-5 h-5 mr-2\" />\n                Front\n              </Button>\n              <Button\n                onClick={() => setFacingMode('environment')}\n                variant={facingMode === 'environment' ? 'default' : 'outline'}\n                className={`flex-1 h-12 ${\n                  facingMode === 'environment' \n                    ? 'bg-purple-500 text-white' \n                    : 'border-dark-400 text-white'\n                }`}\n                data-testid=\"back-camera\"\n              >\n                <Camera className=\"w-5 h-5 mr-2\" />\n                Back\n              </Button>\n            </div>\n          ) : (\n            // Desktop camera selection\n            <div className=\"flex items-center space-x-2\">\n              <Select value={selectedCamera} onValueChange={switchCamera}>\n                <SelectTrigger className=\"flex-1 bg-dark-300 border-dark-400 text-white\">\n                  <SelectValue placeholder=\"Select camera\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-dark-300 border-dark-400\">\n                  {cameras.map((camera) => (\n                    <SelectItem key={camera.deviceId} value={camera.deviceId}>\n                      {camera.label || `Camera ${cameras.indexOf(camera) + 1}`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"border-dark-400 text-white\"\n                onClick={() => getAvailableCameras()}\n                data-testid=\"refresh-cameras\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n          \n          {isMobileDevice && (\n            <div className=\"text-xs text-gray-400 space-y-1\">\n              <div>Orientation: {isPortrait ? 'Portrait' : 'Landscape'}</div>\n              <div>Resolution: {resolution.width}x{resolution.height}</div>\n            </div>\n          )}\n        </div>\n\n        {/* Quality Settings */}\n        <div className=\"grid grid-cols-3 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-400\">Quality:</span>\n            <div className=\"text-white font-medium\">{quality.toUpperCase()}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-400\">Resolution:</span>\n            <div className=\"text-white font-medium\">{resolution.width}x{resolution.height}</div>\n          </div>\n          <div>\n            <span className=\"text-gray-400\">Bitrate:</span>\n            <div className=\"text-white font-medium\">{bitrate}kbps</div>\n          </div>\n        </div>\n\n        {/* Stream Controls - Mobile Touch Friendly */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Button\n            onClick={isRecording ? stopStreaming : startStreaming}\n            className={`${\n              isRecording \n                ? 'bg-red-500 hover:bg-red-600' \n                : 'bg-purple-500 hover:bg-purple-600'\n            } text-white font-medium h-12 text-base flex-1 sm:flex-initial`}\n            data-testid=\"video-stream-toggle\"\n          >\n            {isRecording ? 'Stop Stream' : 'Start Stream'}\n          </Button>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={toggleVideo}\n              variant=\"outline\"\n              className={`border-dark-400 ${!isVideoOn ? 'text-red-500' : 'text-white'} h-12 px-4 flex-1 sm:flex-initial`}\n              disabled={!isRecording}\n              data-testid=\"video-toggle\"\n            >\n              {isVideoOn ? <Video className=\"w-5 h-5 mr-2\" /> : <VideoOff className=\"w-5 h-5 mr-2\" />}\n              {isVideoOn ? 'Video' : 'No Video'}\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              className=\"border-dark-400 text-white h-12 px-4\"\n              data-testid=\"video-settings\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Stream Info */}\n        {isRecording && (\n          <div className=\"text-xs text-gray-400 space-y-1\">\n            <div>Resolution: {resolution.width}x{resolution.height}</div>\n            <div>Frame Rate: {frameRate}fps</div>\n            <div>Bitrate: {bitrate}kbps</div>\n            <div>Codec: H.264</div>\n            {enableEffects && <div>Effects: Enabled</div>}\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}","size_bytes":14949},"client/src/components/webrtc-manager.tsx":{"content":"import { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, Wifi, WifiOff, Settings, PhoneCall, PhoneOff,\n  Mic, MicOff, Video, VideoOff, Monitor, MonitorOff\n} from \"lucide-react\";\n\ninterface Peer {\n  id: string;\n  connection: RTCPeerConnection;\n  stream?: MediaStream;\n  username?: string;\n  isAudioEnabled: boolean;\n  isVideoEnabled: boolean;\n  isScreenSharing: boolean;\n}\n\ninterface WebRTCManagerProps {\n  roomId: string;\n  username: string;\n  isHost?: boolean;\n  onPeerJoined?: (peerId: string, username?: string) => void;\n  onPeerLeft?: (peerId: string) => void;\n  onStreamReceived?: (peerId: string, stream: MediaStream) => void;\n  enableAudio?: boolean;\n  enableVideo?: boolean;\n  enableScreenShare?: boolean;\n  maxPeers?: number;\n}\n\nexport default function WebRTCManager({\n  roomId,\n  username,\n  isHost = false,\n  onPeerJoined,\n  onPeerLeft,\n  onStreamReceived,\n  enableAudio = true,\n  enableVideo = true,\n  enableScreenShare = true,\n  maxPeers = 8\n}: WebRTCManagerProps) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [peers, setPeers] = useState<Map<string, Peer>>(new Map());\n  const [localStream, setLocalStream] = useState<MediaStream | null>(null);\n  const [screenStream, setScreenStream] = useState<MediaStream | null>(null);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [connectionQuality, setConnectionQuality] = useState<'excellent' | 'good' | 'fair' | 'poor'>('excellent');\n  \n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const { toast } = useToast();\n\n  // WebRTC configuration\n  const rtcConfig: RTCConfiguration = {\n    iceServers: [\n      { urls: 'stun:stun.l.google.com:19302' },\n      { urls: 'stun:stun1.l.google.com:19302' },\n      { urls: 'stun:stun2.l.google.com:19302' }\n    ],\n    iceCandidatePoolSize: 10\n  };\n\n  // Initialize WebSocket connection\n  const initializeWebSocket = useCallback(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    wsRef.current = new WebSocket(wsUrl);\n\n    wsRef.current.onopen = () => {\n      console.log('WebSocket connected');\n      // Join room\n      wsRef.current?.send(JSON.stringify({\n        type: 'join-room',\n        roomId,\n        username,\n        isHost\n      }));\n    };\n\n    wsRef.current.onmessage = async (event) => {\n      const message = JSON.parse(event.data);\n      await handleWebSocketMessage(message);\n    };\n\n    wsRef.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      toast({\n        title: \"Disconnected\",\n        description: \"Connection to the room was lost.\",\n        variant: \"destructive\"\n      });\n    };\n\n    wsRef.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      toast({\n        title: \"Connection Error\",\n        description: \"Failed to connect to the room.\",\n        variant: \"destructive\"\n      });\n    };\n  }, [roomId, username, isHost, toast]);\n\n  // Handle WebSocket messages\n  const handleWebSocketMessage = useCallback(async (message: any) => {\n    switch (message.type) {\n      case 'room-joined':\n        setIsConnected(true);\n        setIsConnecting(false);\n        toast({\n          title: \"Connected\",\n          description: `Joined room ${roomId} successfully.`\n        });\n        break;\n\n      case 'peer-joined':\n        await createPeerConnection(message.peerId, message.username, true);\n        onPeerJoined?.(message.peerId, message.username);\n        break;\n\n      case 'peer-left':\n        removePeer(message.peerId);\n        onPeerLeft?.(message.peerId);\n        break;\n\n      case 'offer':\n        await handleOffer(message.peerId, message.offer);\n        break;\n\n      case 'answer':\n        await handleAnswer(message.peerId, message.answer);\n        break;\n\n      case 'ice-candidate':\n        await handleIceCandidate(message.peerId, message.candidate);\n        break;\n\n      case 'peer-media-state':\n        updatePeerMediaState(message.peerId, message.audioEnabled, message.videoEnabled, message.screenSharing);\n        break;\n    }\n  }, [roomId, onPeerJoined, onPeerLeft, toast]);\n\n  // Create peer connection\n  const createPeerConnection = useCallback(async (peerId: string, peerUsername?: string, isInitiator = false) => {\n    const peerConnection = new RTCPeerConnection(rtcConfig);\n    \n    const peer: Peer = {\n      id: peerId,\n      connection: peerConnection,\n      username: peerUsername,\n      isAudioEnabled: true,\n      isVideoEnabled: true,\n      isScreenSharing: false\n    };\n\n    // Add local stream to peer connection\n    if (localStream) {\n      localStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, localStream);\n      });\n    }\n\n    // Handle remote stream\n    peerConnection.ontrack = (event) => {\n      console.log('Received remote stream from:', peerId);\n      peer.stream = event.streams[0];\n      onStreamReceived?.(peerId, event.streams[0]);\n    };\n\n    // Handle ICE candidates\n    peerConnection.onicecandidate = (event) => {\n      if (event.candidate && wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          peerId,\n          candidate: event.candidate\n        }));\n      }\n    };\n\n    // Monitor connection state\n    peerConnection.onconnectionstatechange = () => {\n      console.log(`Connection state with ${peerId}:`, peerConnection.connectionState);\n      updateConnectionQuality();\n    };\n\n    setPeers(prev => new Map(prev.set(peerId, peer)));\n\n    // Create offer if initiator\n    if (isInitiator) {\n      const offer = await peerConnection.createOffer();\n      await peerConnection.setLocalDescription(offer);\n      \n      wsRef.current?.send(JSON.stringify({\n        type: 'offer',\n        peerId,\n        offer\n      }));\n    }\n\n    return peer;\n  }, [localStream, onStreamReceived]);\n\n  // Handle offer\n  const handleOffer = useCallback(async (peerId: string, offer: RTCSessionDescriptionInit) => {\n    const peer = peers.get(peerId) || await createPeerConnection(peerId, undefined, false);\n    \n    await peer.connection.setRemoteDescription(offer);\n    const answer = await peer.connection.createAnswer();\n    await peer.connection.setLocalDescription(answer);\n    \n    wsRef.current?.send(JSON.stringify({\n      type: 'answer',\n      peerId,\n      answer\n    }));\n  }, [peers, createPeerConnection]);\n\n  // Handle answer\n  const handleAnswer = useCallback(async (peerId: string, answer: RTCSessionDescriptionInit) => {\n    const peer = peers.get(peerId);\n    if (peer) {\n      await peer.connection.setRemoteDescription(answer);\n    }\n  }, [peers]);\n\n  // Handle ICE candidate\n  const handleIceCandidate = useCallback(async (peerId: string, candidate: RTCIceCandidateInit) => {\n    const peer = peers.get(peerId);\n    if (peer) {\n      await peer.connection.addIceCandidate(candidate);\n    }\n  }, [peers]);\n\n  // Remove peer\n  const removePeer = useCallback((peerId: string) => {\n    const peer = peers.get(peerId);\n    if (peer) {\n      peer.connection.close();\n      setPeers(prev => {\n        const newPeers = new Map(prev);\n        newPeers.delete(peerId);\n        return newPeers;\n      });\n    }\n  }, [peers]);\n\n  // Update peer media state\n  const updatePeerMediaState = useCallback((peerId: string, audioEnabled: boolean, videoEnabled: boolean, screenSharing: boolean) => {\n    setPeers(prev => {\n      const newPeers = new Map(prev);\n      const peer = newPeers.get(peerId);\n      if (peer) {\n        peer.isAudioEnabled = audioEnabled;\n        peer.isVideoEnabled = videoEnabled;\n        peer.isScreenSharing = screenSharing;\n      }\n      return newPeers;\n    });\n  }, []);\n\n  // Update connection quality\n  const updateConnectionQuality = useCallback(() => {\n    // Simplified quality assessment based on peer connections\n    const connectedPeers = Array.from(peers.values()).filter(\n      peer => peer.connection.connectionState === 'connected'\n    );\n    \n    if (connectedPeers.length === peers.size) {\n      setConnectionQuality('excellent');\n    } else if (connectedPeers.length >= peers.size * 0.75) {\n      setConnectionQuality('good');\n    } else if (connectedPeers.length >= peers.size * 0.5) {\n      setConnectionQuality('fair');\n    } else {\n      setConnectionQuality('poor');\n    }\n  }, [peers]);\n\n  // Get user media\n  const getUserMedia = useCallback(async () => {\n    try {\n      const constraints = {\n        audio: enableAudio ? {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        } : false,\n        video: enableVideo ? {\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          frameRate: { ideal: 30 }\n        } : false\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      setLocalStream(stream);\n      \n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n\n      return stream;\n    } catch (error) {\n      console.error('Failed to get user media:', error);\n      toast({\n        title: \"Media Access Error\",\n        description: \"Failed to access camera/microphone.\",\n        variant: \"destructive\"\n      });\n      return null;\n    }\n  }, [enableAudio, enableVideo, toast]);\n\n  // Join room\n  const joinRoom = useCallback(async () => {\n    if (isConnecting || isConnected) return;\n    \n    setIsConnecting(true);\n    \n    // Get user media first\n    await getUserMedia();\n    \n    // Initialize WebSocket\n    initializeWebSocket();\n  }, [isConnecting, isConnected, getUserMedia, initializeWebSocket]);\n\n  // Leave room\n  const leaveRoom = useCallback(() => {\n    // Close all peer connections\n    peers.forEach(peer => {\n      peer.connection.close();\n    });\n    setPeers(new Map());\n\n    // Stop local streams\n    if (localStream) {\n      localStream.getTracks().forEach(track => track.stop());\n      setLocalStream(null);\n    }\n\n    if (screenStream) {\n      screenStream.getTracks().forEach(track => track.stop());\n      setScreenStream(null);\n    }\n\n    // Close WebSocket\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    setIsScreenSharing(false);\n  }, [peers, localStream, screenStream]);\n\n  // Toggle audio\n  const toggleAudio = useCallback(() => {\n    if (localStream) {\n      const audioTrack = localStream.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !isAudioEnabled;\n        setIsAudioEnabled(!isAudioEnabled);\n        \n        // Notify peers\n        wsRef.current?.send(JSON.stringify({\n          type: 'media-state-change',\n          audioEnabled: !isAudioEnabled,\n          videoEnabled: isVideoEnabled,\n          screenSharing: isScreenSharing\n        }));\n      }\n    }\n  }, [localStream, isAudioEnabled, isVideoEnabled, isScreenSharing]);\n\n  // Toggle video\n  const toggleVideo = useCallback(() => {\n    if (localStream) {\n      const videoTrack = localStream.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !isVideoEnabled;\n        setIsVideoEnabled(!isVideoEnabled);\n        \n        // Notify peers\n        wsRef.current?.send(JSON.stringify({\n          type: 'media-state-change',\n          audioEnabled: isAudioEnabled,\n          videoEnabled: !isVideoEnabled,\n          screenSharing: isScreenSharing\n        }));\n      }\n    }\n  }, [localStream, isAudioEnabled, isVideoEnabled, isScreenSharing]);\n\n  // Toggle screen share\n  const toggleScreenShare = useCallback(async () => {\n    if (!enableScreenShare) return;\n\n    try {\n      if (!isScreenSharing) {\n        const stream = await navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: true\n        });\n        \n        setScreenStream(stream);\n        setIsScreenSharing(true);\n\n        // Replace video track in all peer connections\n        const videoTrack = stream.getVideoTracks()[0];\n        peers.forEach(peer => {\n          const sender = peer.connection.getSenders().find(\n            s => s.track && s.track.kind === 'video'\n          );\n          if (sender) {\n            sender.replaceTrack(videoTrack);\n          }\n        });\n\n        // Handle screen share end\n        videoTrack.onended = () => {\n          setIsScreenSharing(false);\n          setScreenStream(null);\n          \n          // Switch back to camera\n          if (localStream) {\n            const cameraTrack = localStream.getVideoTracks()[0];\n            peers.forEach(peer => {\n              const sender = peer.connection.getSenders().find(\n                s => s.track && s.track.kind === 'video'\n              );\n              if (sender && cameraTrack) {\n                sender.replaceTrack(cameraTrack);\n              }\n            });\n          }\n        };\n      } else {\n        // Stop screen sharing\n        if (screenStream) {\n          screenStream.getTracks().forEach(track => track.stop());\n          setScreenStream(null);\n        }\n        setIsScreenSharing(false);\n\n        // Switch back to camera\n        if (localStream) {\n          const videoTrack = localStream.getVideoTracks()[0];\n          peers.forEach(peer => {\n            const sender = peer.connection.getSenders().find(\n              s => s.track && s.track.kind === 'video'\n            );\n            if (sender && videoTrack) {\n              sender.replaceTrack(videoTrack);\n            }\n          });\n        }\n      }\n\n      // Notify peers\n      wsRef.current?.send(JSON.stringify({\n        type: 'media-state-change',\n        audioEnabled: isAudioEnabled,\n        videoEnabled: isVideoEnabled,\n        screenSharing: !isScreenSharing\n      }));\n\n    } catch (error) {\n      console.error('Screen share error:', error);\n      toast({\n        title: \"Screen Share Error\",\n        description: \"Failed to start screen sharing.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [enableScreenShare, isScreenSharing, screenStream, localStream, peers, isAudioEnabled, isVideoEnabled, toast]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      leaveRoom();\n    };\n  }, [leaveRoom]);\n\n  return (\n    <Card className=\"bg-dark-200 border-dark-400 p-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Users className=\"w-5 h-5 text-purple-500\" />\n            <h3 className=\"text-lg font-semibold text-white\">Room Connection</h3>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {roomId}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-2 h-2 rounded-full ${\n              connectionQuality === 'excellent' ? 'bg-green-500' :\n              connectionQuality === 'good' ? 'bg-yellow-500' :\n              connectionQuality === 'fair' ? 'bg-orange-500' : 'bg-red-500'\n            }`} />\n            <Badge \n              className={`${\n                isConnected ? 'bg-green-500' : 'bg-gray-500'\n              } text-white`}\n              data-testid=\"connection-status\"\n            >\n              {isConnected ? 'CONNECTED' : isConnecting ? 'CONNECTING...' : 'DISCONNECTED'}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Local Video Preview */}\n        {localStream && (\n          <div className=\"relative aspect-video bg-dark-400 rounded-lg overflow-hidden max-w-xs\">\n            <video\n              ref={localVideoRef}\n              autoPlay\n              muted\n              playsInline\n              className={`w-full h-full object-cover ${!isVideoEnabled ? 'opacity-0' : ''}`}\n              data-testid=\"local-video\"\n            />\n            {!isVideoEnabled && (\n              <div className=\"absolute inset-0 flex items-center justify-center bg-dark-300\">\n                <VideoOff className=\"w-8 h-8 text-gray-500\" />\n              </div>\n            )}\n            \n            <div className=\"absolute bottom-2 left-2 text-xs text-white bg-black bg-opacity-50 px-2 py-1 rounded\">\n              You {isScreenSharing && '(Screen)'}\n            </div>\n          </div>\n        )}\n\n        {/* Participants */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-400\">\n              Participants ({peers.size + 1}/{maxPeers})\n            </span>\n          </div>\n          \n          <div className=\"space-y-1\">\n            {/* Self */}\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n              <span className=\"text-white\">{username} (You)</span>\n              {isHost && <Badge className=\"bg-purple-500 text-white text-xs\">HOST</Badge>}\n            </div>\n            \n            {/* Peers */}\n            {Array.from(peers.values()).map(peer => (\n              <div key={peer.id} className=\"flex items-center space-x-2 text-sm\">\n                <div className={`w-2 h-2 rounded-full ${\n                  peer.connection.connectionState === 'connected' ? 'bg-green-500' : 'bg-gray-500'\n                }`} />\n                <span className=\"text-white\">{peer.username || `User ${peer.id.slice(0, 8)}`}</span>\n                <div className=\"flex items-center space-x-1\">\n                  {!peer.isAudioEnabled && <MicOff className=\"w-3 h-3 text-red-500\" />}\n                  {!peer.isVideoEnabled && <VideoOff className=\"w-3 h-3 text-red-500\" />}\n                  {peer.isScreenSharing && <Monitor className=\"w-3 h-3 text-blue-500\" />}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            {isConnected ? (\n              <>\n                <Button\n                  onClick={toggleAudio}\n                  size=\"icon\"\n                  variant=\"outline\"\n                  className={`border-dark-400 ${!isAudioEnabled ? 'text-red-500' : 'text-white'}`}\n                  data-testid=\"toggle-audio\"\n                >\n                  {isAudioEnabled ? <Mic className=\"w-4 h-4\" /> : <MicOff className=\"w-4 h-4\" />}\n                </Button>\n\n                <Button\n                  onClick={toggleVideo}\n                  size=\"icon\"\n                  variant=\"outline\"\n                  className={`border-dark-400 ${!isVideoEnabled ? 'text-red-500' : 'text-white'}`}\n                  data-testid=\"toggle-video\"\n                >\n                  {isVideoEnabled ? <Video className=\"w-4 h-4\" /> : <VideoOff className=\"w-4 h-4\" />}\n                </Button>\n\n                {enableScreenShare && (\n                  <Button\n                    onClick={toggleScreenShare}\n                    size=\"icon\"\n                    variant=\"outline\"\n                    className={`border-dark-400 ${isScreenSharing ? 'text-blue-500' : 'text-white'}`}\n                    data-testid=\"toggle-screen-share\"\n                  >\n                    {isScreenSharing ? <MonitorOff className=\"w-4 h-4\" /> : <Monitor className=\"w-4 h-4\" />}\n                  </Button>\n                )}\n              </>\n            ) : null}\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={isConnected ? leaveRoom : joinRoom}\n              className={`${\n                isConnected \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-purple-500 hover:bg-purple-600'\n              } text-white font-medium`}\n              disabled={isConnecting}\n              data-testid=\"connection-toggle\"\n            >\n              {isConnected ? (\n                <>\n                  <PhoneOff className=\"w-4 h-4 mr-2\" />\n                  Leave Room\n                </>\n              ) : (\n                <>\n                  <PhoneCall className=\"w-4 h-4 mr-2\" />\n                  {isConnecting ? 'Joining...' : 'Join Room'}\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":20650},"client/src/components/battles/battle-card.tsx":{"content":"import { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Play, Pause, Users, Clock, Trophy, Vote } from 'lucide-react';\nimport { useState } from 'react';\nimport { useVoteInBattle } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { cn } from '@/lib/utils';\nimport type { Battle } from '@shared/schema';\n\ninterface BattleCardProps {\n  battle: Battle;\n  className?: string;\n  showVoting?: boolean;\n}\n\nexport default function BattleCard({ battle, className, showVoting = true }: BattleCardProps) {\n  const { user } = useAuth();\n  const { castVote } = useWebSocket();\n  const voteInBattle = useVoteInBattle();\n  const [isPlaying1, setIsPlaying1] = useState(false);\n  const [isPlaying2, setIsPlaying2] = useState(false);\n\n  const totalVotes = (battle.contestant1Votes || 0) + (battle.contestant2Votes || 0);\n  const contestant1Percentage = totalVotes > 0 ? ((battle.contestant1Votes || 0) / totalVotes) * 100 : 50;\n  const contestant2Percentage = totalVotes > 0 ? ((battle.contestant2Votes || 0) / totalVotes) * 100 : 50;\n\n  const handleVote = (contestantId: string) => {\n    if (!user) return;\n    \n    voteInBattle.mutate({\n      battleId: battle.id,\n      userId: user.id,\n      contestantId,\n    });\n\n    // Send real-time vote update\n    castVote(battle.id, contestantId);\n  };\n\n  const getBattleStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500';\n      case 'completed':\n        return 'bg-blue-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'freestyle':\n        return 'bg-purple-500';\n      case 'championship':\n        return 'bg-gold-500';\n      case 'team':\n        return 'bg-blue-500';\n      case 'open_mic':\n        return 'bg-green-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const formatTimeRemaining = (endTime: Date | null) => {\n    if (!endTime) return null;\n    \n    const now = new Date();\n    const end = new Date(endTime);\n    const diff = end.getTime() - now.getTime();\n    \n    if (diff <= 0) return 'Ended';\n    \n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m left`;\n    }\n    return `${minutes}m left`;\n  };\n\n  return (\n    <Card className={cn(\"bg-dark-200 border-dark-400 hover:shadow-lg transition-all duration-200\", className)}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <h3 className=\"text-lg font-semibold text-white\" data-testid={`text-battle-title-${battle.id}`}>\n              {battle.title}\n            </h3>\n            <Badge className={getCategoryColor(battle.category)}>\n              {battle.category.replace('_', ' ').toUpperCase()}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"outline\" className={getBattleStatusColor(battle.status || 'active')}>\n              {(battle.status || 'active').toUpperCase()}\n            </Badge>\n            \n            {battle.endTime && (\n              <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n                <Clock className=\"w-3 h-3\" />\n                <span>{formatTimeRemaining(battle.endTime)}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Battle Contestants */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Contestant 1 */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-medium text-white\" data-testid={`text-contestant1-${battle.id}`}>\n                {battle.contestant1Name}\n              </h4>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {battle.contestant1Votes} votes ({contestant1Percentage.toFixed(1)}%)\n              </Badge>\n            </div>\n            \n            <Progress \n              value={contestant1Percentage} \n              className=\"h-2 bg-dark-300\"\n              data-testid={`progress-contestant1-${battle.id}`}\n            />\n            \n            <div className=\"flex items-center space-x-2\">\n              {battle.contestant1Track && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid={`button-play-contestant1-${battle.id}`}\n                  onClick={() => setIsPlaying1(!isPlaying1)}\n                >\n                  {isPlaying1 ? <Pause className=\"w-3 h-3 mr-1\" /> : <Play className=\"w-3 h-3 mr-1\" />}\n                  Play Track\n                </Button>\n              )}\n              \n              {showVoting && battle.status === 'active' && user && (\n                <Button\n                  size=\"sm\"\n                  variant=\"default\"\n                  className=\"bg-purple-500 hover:bg-purple-600\"\n                  data-testid={`button-vote-contestant1-${battle.id}`}\n                  onClick={() => handleVote(battle.contestant1Id)}\n                  disabled={voteInBattle.isPending}\n                >\n                  <Vote className=\"w-3 h-3 mr-1\" />\n                  Vote\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* VS Divider */}\n          <div className=\"flex items-center justify-center md:col-span-1\">\n            <div className=\"bg-gradient-to-r from-purple-500 to-electric-500 text-white px-3 py-1 rounded-full font-bold text-sm\">\n              VS\n            </div>\n          </div>\n\n          {/* Contestant 2 */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-medium text-white\" data-testid={`text-contestant2-${battle.id}`}>\n                {battle.contestant2Name}\n              </h4>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {battle.contestant2Votes} votes ({contestant2Percentage.toFixed(1)}%)\n              </Badge>\n            </div>\n            \n            <Progress \n              value={contestant2Percentage} \n              className=\"h-2 bg-dark-300\"\n              data-testid={`progress-contestant2-${battle.id}`}\n            />\n            \n            <div className=\"flex items-center space-x-2\">\n              {battle.contestant2Track && (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid={`button-play-contestant2-${battle.id}`}\n                  onClick={() => setIsPlaying2(!isPlaying2)}\n                >\n                  {isPlaying2 ? <Pause className=\"w-3 h-3 mr-1\" /> : <Play className=\"w-3 h-3 mr-1\" />}\n                  Play Track\n                </Button>\n              )}\n              \n              {showVoting && battle.status === 'active' && user && (\n                <Button\n                  size=\"sm\"\n                  variant=\"default\"\n                  className=\"bg-purple-500 hover:bg-purple-600\"\n                  data-testid={`button-vote-contestant2-${battle.id}`}\n                  onClick={() => handleVote(battle.contestant2Id)}\n                  disabled={voteInBattle.isPending}\n                >\n                  <Vote className=\"w-3 h-3 mr-1\" />\n                  Vote\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Battle Stats */}\n        <div className=\"flex items-center justify-between pt-3 border-t border-dark-400\">\n          <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n            <div className=\"flex items-center space-x-1\">\n              <Users className=\"w-4 h-4\" />\n              <span data-testid={`text-total-votes-${battle.id}`}>\n                {totalVotes} total votes\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Trophy className=\"w-4 h-4\" />\n              <span data-testid={`text-views-${battle.id}`}>\n                {battle.views?.toLocaleString() || 0} views\n              </span>\n            </div>\n          </div>\n          \n          {battle.status === 'completed' && totalVotes > 0 && (\n            <Badge className=\"bg-gold-500\">\n              Winner: {(battle.contestant1Votes || 0) > (battle.contestant2Votes || 0) \n                ? battle.contestant1Name \n                : battle.contestant2Name}\n            </Badge>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9012},"client/src/components/battles/battle-list.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Filter, Plus, Trophy, Zap } from 'lucide-react';\nimport { useBattles, useActiveBattles } from '@/hooks/useApi';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { useAuth } from '@/hooks/useAuth';\nimport BattleCard from './battle-card';\nimport CreateBattleDialog from './create-battle-dialog';\nimport LoadingSpinner from '@/components/ui/loading-spinner';\nimport type { Battle } from '@shared/schema';\n\nconst CATEGORIES = ['freestyle', 'championship', 'team', 'open_mic'];\nconst STATUSES = ['active', 'completed', 'pending'];\n\nexport default function BattleList() {\n  const { user } = useAuth();\n  const { subscribeToMessage } = useWebSocket();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedStatus, setSelectedStatus] = useState<string>('active');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [liveUpdates, setLiveUpdates] = useState<Map<string, Partial<Battle>>>(new Map());\n  \n  const { data: allBattles, isLoading: loadingAll } = useBattles();\n  const { data: activeBattles, isLoading: loadingActive } = useActiveBattles();\n  \n  const battles = selectedStatus === 'active' ? activeBattles : allBattles;\n  const isLoading = selectedStatus === 'active' ? loadingActive : loadingAll;\n\n  // Subscribe to real-time battle updates\n  useEffect(() => {\n    const unsubscribeVote = subscribeToMessage('vote-update', (data) => {\n      setLiveUpdates(prev => new Map(prev.set(data.battleId, {\n        contestant1Votes: data.contestant1Votes,\n        contestant2Votes: data.contestant2Votes,\n        totalVotes: data.totalVotes,\n      })));\n    });\n\n    const unsubscribeBattleUpdate = subscribeToMessage('battle-update', (data) => {\n      setLiveUpdates(prev => new Map(prev.set(data.battleId, data.updates)));\n    });\n\n    return () => {\n      unsubscribeVote();\n      unsubscribeBattleUpdate();\n    };\n  }, [subscribeToMessage]);\n  \n  const filteredBattles = battles?.filter((battle: Battle) => {\n    // Apply live updates if available\n    const updatedBattle = liveUpdates.has(battle.id) \n      ? { ...battle, ...liveUpdates.get(battle.id) }\n      : battle;\n      \n    const matchesSearch = updatedBattle.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         updatedBattle.contestant1Name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         updatedBattle.contestant2Name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = !selectedCategory || updatedBattle.category === selectedCategory;\n    const matchesStatus = !selectedStatus || updatedBattle.status === selectedStatus;\n    \n    return matchesSearch && matchesCategory && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Trophy className=\"w-6 h-6 text-gold-400\" />\n          <h1 className=\"text-2xl font-bold text-white\">Battles</h1>\n          <Badge variant=\"secondary\">{battles?.length || 0}</Badge>\n          {selectedStatus === 'active' && (\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-green-400 font-medium\">LIVE</span>\n            </div>\n          )}\n        </div>\n        \n        {user && (user.role === 'artist' || user.role === 'producer') && (\n          <Button\n            data-testid=\"button-create-battle\"\n            onClick={() => setShowCreateDialog(true)}\n            className=\"bg-gold-500 hover:bg-gold-600 text-black font-medium\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Battle\n          </Button>\n        )}\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Search */}\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            data-testid=\"input-search-battles\"\n            placeholder=\"Search battles or contestants...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-dark-200 border-dark-400 text-white\"\n          />\n        </div>\n\n        {/* Status Filter */}\n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"w-4 h-4 text-gray-400\" />\n          <div className=\"flex space-x-2\">\n            {STATUSES.map((status) => (\n              <Button\n                key={status}\n                data-testid={`filter-status-${status}`}\n                variant={selectedStatus === status ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedStatus(status)}\n                className=\"text-xs\"\n              >\n                {status === 'active' && <Zap className=\"w-3 h-3 mr-1\" />}\n                {status.charAt(0).toUpperCase() + status.slice(1)}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"flex flex-wrap gap-2\">\n          <Button\n            data-testid=\"filter-all-categories\"\n            variant={!selectedCategory ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setSelectedCategory('')}\n            className=\"text-xs\"\n          >\n            All Categories\n          </Button>\n          {CATEGORIES.map((category) => (\n            <Button\n              key={category}\n              data-testid={`filter-category-${category}`}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(selectedCategory === category ? '' : category)}\n              className=\"text-xs\"\n            >\n              {category.replace('_', ' ').toUpperCase()}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Battle List */}\n      <div className=\"space-y-4\">\n        {filteredBattles?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-300 mb-2\">No battles found</h3>\n            <p className=\"text-gray-500\">\n              {searchTerm || selectedCategory \n                ? 'Try adjusting your search or filters'\n                : selectedStatus === 'active' \n                  ? 'No active battles right now. Check back soon!'\n                  : 'Create the first battle to get started!'\n              }\n            </p>\n          </div>\n        ) : (\n          filteredBattles?.map((battle: Battle) => {\n            // Apply live updates if available\n            const updatedBattle = liveUpdates.has(battle.id) \n              ? { ...battle, ...liveUpdates.get(battle.id) }\n              : battle;\n              \n            return (\n              <BattleCard\n                key={battle.id}\n                battle={updatedBattle as Battle}\n                showVoting={selectedStatus === 'active'}\n              />\n            );\n          })\n        )}\n      </div>\n\n      {/* Create Battle Dialog */}\n      {showCreateDialog && (\n        <CreateBattleDialog\n          open={showCreateDialog}\n          onOpenChange={setShowCreateDialog}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":7833},"client/src/components/battles/create-battle-dialog.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertBattleSchema } from '@shared/schema';\nimport { useCreateBattle, useUsers } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Trophy, Calendar } from 'lucide-react';\nimport type { InsertBattle } from '@shared/schema';\n\ninterface CreateBattleDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst CATEGORIES = [\n  { value: 'freestyle', label: 'Freestyle Battle' },\n  { value: 'championship', label: 'Championship Battle' },\n  { value: 'team', label: 'Team Battle' },\n  { value: 'open_mic', label: 'Open Mic Battle' },\n];\n\nexport default function CreateBattleDialog({ open, onOpenChange }: CreateBattleDialogProps) {\n  const { user } = useAuth();\n  const createBattle = useCreateBattle();\n  const { data: users } = useUsers();\n\n  // Filter to artists and producers only\n  const contestants = users?.filter(u => \n    u.role === 'artist' || u.role === 'producer'\n  );\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<InsertBattle>({\n    resolver: zodResolver(insertBattleSchema),\n    defaultValues: {\n      contestant1Id: user?.id || '',\n      contestant1Name: user?.displayName || '',\n    },\n  });\n\n  const selectedContestant2 = watch('contestant2Id');\n\n  const onSubmit = async (data: InsertBattle) => {\n    try {\n      // Set end time to 24 hours from now if not specified\n      if (!data.endTime) {\n        const endTime = new Date();\n        endTime.setHours(endTime.getHours() + 24);\n        data.endTime = endTime;\n      }\n      \n      await createBattle.mutateAsync(data);\n      reset();\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to create battle:', error);\n    }\n  };\n\n  const handleContestant2Change = (userId: string) => {\n    const selectedUser = contestants?.find(u => u.id === userId);\n    if (selectedUser) {\n      setValue('contestant2Id', userId);\n      setValue('contestant2Name', selectedUser.displayName);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md bg-dark-200 border-dark-400\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Trophy className=\"w-5 h-5 text-gold-400\" />\n            <span>Create New Battle</span>\n          </DialogTitle>\n          <DialogDescription>\n            Challenge another artist to an epic battle\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Battle Title */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Battle Title*</Label>\n            <Input\n              id=\"title\"\n              data-testid=\"input-battle-title\"\n              {...register('title')}\n              placeholder=\"Epic Rap Battle of History\"\n              className=\"bg-dark-300 border-dark-400\"\n            />\n            {errors.title && (\n              <p className=\"text-red-400 text-sm\">{errors.title.message}</p>\n            )}\n          </div>\n\n          {/* Category */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"category\">Battle Category*</Label>\n            <Select onValueChange={(value) => setValue('category', value)} data-testid=\"select-battle-category\">\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select battle type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {CATEGORIES.map((category) => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors.category && (\n              <p className=\"text-red-400 text-sm\">{errors.category.message}</p>\n            )}\n          </div>\n\n          {/* Contestants */}\n          <div className=\"space-y-4\">\n            <Label>Contestants</Label>\n            \n            {/* Contestant 1 (You) */}\n            <div className=\"flex items-center space-x-3 p-3 bg-dark-300 rounded-lg\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-electric-500 rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-sm font-bold\">\n                  {user?.displayName?.charAt(0)}\n                </span>\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-white\">{user?.displayName}</p>\n                <p className=\"text-sm text-gray-400\">You • {user?.role}</p>\n              </div>\n              <Badge className=\"bg-purple-500\">Challenger</Badge>\n            </div>\n\n            {/* VS Divider */}\n            <div className=\"flex items-center justify-center\">\n              <div className=\"bg-gradient-to-r from-gold-400 to-gold-600 text-black px-3 py-1 rounded-full font-bold text-sm\">\n                VS\n              </div>\n            </div>\n\n            {/* Contestant 2 */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"opponent\">Choose Your Opponent*</Label>\n              <Select onValueChange={handleContestant2Change} data-testid=\"select-opponent\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select opponent\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {contestants?.filter(u => u.id !== user?.id).map((contestant) => (\n                    <SelectItem key={contestant.id} value={contestant.id}>\n                      <div className=\"flex items-center space-x-2\">\n                        <span>{contestant.displayName}</span>\n                        <Badge variant=\"outline\" className=\"ml-2\">\n                          {contestant.role}\n                        </Badge>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.contestant2Id && (\n                <p className=\"text-red-400 text-sm\">{errors.contestant2Id.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Battle Duration */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"endTime\">Battle End Time</Label>\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-4 h-4 text-gray-400\" />\n              <Input\n                id=\"endTime\"\n                data-testid=\"input-battle-end-time\"\n                {...register('endTime', { \n                  setValueAs: (value) => value ? new Date(value) : undefined \n                })}\n                type=\"datetime-local\"\n                className=\"bg-dark-300 border-dark-400\"\n              />\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              Leave empty to set battle duration to 24 hours\n            </p>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createBattle.isPending || !selectedContestant2}\n              className=\"bg-gold-500 hover:bg-gold-600 text-black font-medium\"\n              data-testid=\"button-create-battle\"\n            >\n              {createBattle.isPending ? 'Creating...' : 'Create Battle'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8192},"client/src/components/beats/beat-card.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Play, Pause, Heart, ShoppingCart, Download, DollarSign, Clock } from 'lucide-react';\nimport { useState } from 'react';\nimport { useUpdateBeatPlays, useUpdateBeatLikes, usePurchaseBeat } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { cn } from '@/lib/utils';\nimport type { Beat } from '@shared/schema';\n\ninterface BeatCardProps {\n  beat: Beat;\n  isPlaying?: boolean;\n  onPlayToggle?: () => void;\n  className?: string;\n}\n\nexport default function BeatCard({ beat, isPlaying = false, onPlayToggle, className }: BeatCardProps) {\n  const { user } = useAuth();\n  const [isLiked, setIsLiked] = useState(false);\n  const updatePlays = useUpdateBeatPlays();\n  const updateLikes = useUpdateBeatLikes();\n  const purchaseBeat = usePurchaseBeat();\n\n  const handlePlayToggle = () => {\n    if (!isPlaying && onPlayToggle) {\n      updatePlays.mutate(beat.id);\n    }\n    onPlayToggle?.();\n  };\n\n  const handleLike = () => {\n    updateLikes.mutate(beat.id);\n    setIsLiked(!isLiked);\n  };\n\n  const handlePurchase = () => {\n    purchaseBeat.mutate(beat.id);\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getLicenseColor = (licenseType: string) => {\n    switch (licenseType) {\n      case 'exclusive':\n        return 'bg-gold-500';\n      case 'premium':\n        return 'bg-purple-500';\n      case 'basic':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <Card className={cn(\"group hover:shadow-lg transition-all duration-200 bg-dark-200 border-dark-400\", className)}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-4\">\n          {/* Beat Artwork */}\n          <div className=\"relative\">\n            {beat.coverImage ? (\n              <img\n                src={beat.coverImage}\n                alt={beat.title}\n                className=\"w-16 h-16 rounded-lg object-cover\"\n              />\n            ) : (\n              <div className=\"w-16 h-16 rounded-lg bg-gradient-to-br from-gold-400 to-electric-500 flex items-center justify-center\">\n                <Play className=\"text-white w-6 h-6\" />\n              </div>\n            )}\n            \n            {/* Play/Pause Overlay */}\n            <Button\n              data-testid={`button-play-${beat.id}`}\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute inset-0 bg-black/60 hover:bg-black/80 text-white opacity-0 group-hover:opacity-100 transition-opacity\"\n              onClick={handlePlayToggle}\n            >\n              {isPlaying ? (\n                <Pause className=\"w-5 h-5\" />\n              ) : (\n                <Play className=\"w-5 h-5\" />\n              )}\n            </Button>\n          </div>\n\n          {/* Beat Info */}\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold text-white truncate\" data-testid={`text-beat-title-${beat.id}`}>\n              {beat.title}\n            </h3>\n            <p className=\"text-sm text-gray-400 truncate\" data-testid={`text-producer-${beat.id}`}>\n              by {beat.producerName}\n            </p>\n            \n            {/* Beat Metadata */}\n            <div className=\"flex items-center space-x-4 mt-2\">\n              {beat.genre && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {beat.genre}\n                </Badge>\n              )}\n              {beat.bpm && (\n                <span className=\"text-xs text-gray-500\">\n                  {beat.bpm} BPM\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Price & License */}\n          <div className=\"flex flex-col items-end space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"w-4 h-4 text-green-400\" />\n              <span className=\"text-lg font-bold text-green-400\" data-testid={`text-price-${beat.id}`}>\n                ${beat.price}\n              </span>\n            </div>\n            \n            <Badge className={cn(\"text-xs\", getLicenseColor(beat.licenseType))}>\n              {beat.licenseType.toUpperCase()}\n            </Badge>\n          </div>\n\n          {/* Beat Actions */}\n          <div className=\"flex flex-col space-y-2\">\n            {/* Stats */}\n            <div className=\"flex items-center space-x-3 text-xs text-gray-500\">\n              <span data-testid={`text-plays-${beat.id}`}>\n                {beat.plays?.toLocaleString() || 0} plays\n              </span>\n              <span data-testid={`text-likes-${beat.id}`}>\n                {beat.likes?.toLocaleString() || 0} likes\n              </span>\n              <span data-testid={`text-purchases-${beat.id}`}>\n                {beat.purchases?.toLocaleString() || 0} sales\n              </span>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex items-center space-x-1\">\n              <Button\n                data-testid={`button-like-${beat.id}`}\n                size=\"icon\"\n                variant=\"ghost\"\n                className={cn(\n                  \"text-gray-400 hover:text-red-400\",\n                  isLiked && \"text-red-400\"\n                )}\n                onClick={handleLike}\n              >\n                <Heart className={cn(\"w-4 h-4\", isLiked && \"fill-current\")} />\n              </Button>\n              \n              {user && user.id !== beat.producerId && (\n                <Button\n                  data-testid={`button-purchase-${beat.id}`}\n                  size=\"sm\"\n                  variant=\"default\"\n                  className=\"bg-green-500 hover:bg-green-600\"\n                  onClick={handlePurchase}\n                  disabled={purchaseBeat.isPending}\n                >\n                  {purchaseBeat.isPending ? (\n                    <Download className=\"w-3 h-3 mr-1 animate-spin\" />\n                  ) : (\n                    <ShoppingCart className=\"w-3 h-3 mr-1\" />\n                  )}\n                  Buy\n                </Button>\n              )}\n              \n              {user && user.id === beat.producerId && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Your Beat\n                </Badge>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6587},"client/src/components/beats/beat-list.tsx":{"content":"import { useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Filter, Plus, Music4, TrendingUp, DollarSign } from 'lucide-react';\nimport { useBeats } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport BeatCard from './beat-card';\nimport CreateBeatDialog from './create-beat-dialog';\nimport LoadingSpinner from '@/components/ui/loading-spinner';\nimport type { Beat } from '@shared/schema';\n\nconst GENRES = ['Hip Hop', 'R&B', 'Pop', 'Electronic', 'Rock', 'Jazz', 'Country', 'Reggae'];\nconst LICENSE_TYPES = ['basic', 'premium', 'exclusive'];\nconst SORT_OPTIONS = [\n  { value: 'newest', label: 'Newest' },\n  { value: 'popular', label: 'Most Popular' },\n  { value: 'price_low', label: 'Price: Low to High' },\n  { value: 'price_high', label: 'Price: High to Low' },\n];\n\nexport default function BeatList() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState<string>('');\n  const [selectedLicense, setSelectedLicense] = useState<string>('');\n  const [sortBy, setSortBy] = useState('newest');\n  const [priceRange, setPriceRange] = useState<{ min: number; max: number }>({ min: 0, max: 1000 });\n  const [playingBeat, setPlayingBeat] = useState<string | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  \n  const { data: beats, isLoading, error } = useBeats(selectedGenre || undefined);\n  \n  const filteredAndSortedBeats = beats?.filter((beat: Beat) => {\n    const matchesSearch = beat.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         beat.producerName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || beat.genre === selectedGenre;\n    const matchesLicense = !selectedLicense || beat.licenseType === selectedLicense;\n    const beatPrice = parseFloat(beat.price as string) || 0;\n    const matchesPrice = beatPrice >= priceRange.min && beatPrice <= priceRange.max;\n    \n    return matchesSearch && matchesGenre && matchesLicense && matchesPrice;\n  })?.sort((a: Beat, b: Beat) => {\n    switch (sortBy) {\n      case 'popular':\n        return (b.plays || 0) - (a.plays || 0);\n      case 'price_low':\n        return (parseFloat(a.price as string) || 0) - (parseFloat(b.price as string) || 0);\n      case 'price_high':\n        return (parseFloat(b.price as string) || 0) - (parseFloat(a.price as string) || 0);\n      case 'newest':\n      default:\n        return (new Date(b.createdAt || 0).getTime()) - (new Date(a.createdAt || 0).getTime());\n    }\n  });\n\n  const handlePlayToggle = (beatId: string) => {\n    setPlayingBeat(playingBeat === beatId ? null : beatId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-red-400\">Failed to load beats. Please try again.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Music4 className=\"w-6 h-6 text-gold-400\" />\n          <h1 className=\"text-2xl font-bold text-white\">Beat Marketplace</h1>\n          <Badge variant=\"secondary\">{beats?.length || 0}</Badge>\n        </div>\n        \n        {user && user.role === 'producer' && (\n          <Button\n            data-testid=\"button-list-beat\"\n            onClick={() => setShowCreateDialog(true)}\n            className=\"bg-gold-500 hover:bg-gold-600 text-black font-medium\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            List Beat\n          </Button>\n        )}\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"space-y-4\">\n        {/* Search and Sort */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              data-testid=\"input-search-beats\"\n              placeholder=\"Search beats or producers...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-dark-200 border-dark-400 text-white\"\n            />\n          </div>\n\n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value)}\n            className=\"px-3 py-2 bg-dark-200 border border-dark-400 rounded-md text-white text-sm\"\n            data-testid=\"select-sort-beats\"\n          >\n            {SORT_OPTIONS.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Filter Row */}\n        <div className=\"flex flex-wrap gap-4\">\n          {/* Genre Filter */}\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"w-4 h-4 text-gray-400\" />\n            <Button\n              data-testid=\"filter-all-genres\"\n              variant={!selectedGenre ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedGenre('')}\n              className=\"text-xs\"\n            >\n              All Genres\n            </Button>\n            {GENRES.map((genre) => (\n              <Button\n                key={genre}\n                data-testid={`filter-genre-${genre.toLowerCase().replace(' ', '-')}`}\n                variant={selectedGenre === genre ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedGenre(selectedGenre === genre ? '' : genre)}\n                className=\"text-xs\"\n              >\n                {genre}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* License and Price Filter */}\n        <div className=\"flex flex-wrap gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-400\">License:</span>\n            {LICENSE_TYPES.map((license) => (\n              <Button\n                key={license}\n                data-testid={`filter-license-${license}`}\n                variant={selectedLicense === license ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedLicense(selectedLicense === license ? '' : license)}\n                className=\"text-xs\"\n              >\n                {license.toUpperCase()}\n              </Button>\n            ))}\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <DollarSign className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-sm text-gray-400\">Price Range:</span>\n            <Input\n              type=\"number\"\n              placeholder=\"Min\"\n              value={priceRange.min}\n              onChange={(e) => setPriceRange(prev => ({ ...prev, min: Number(e.target.value) }))}\n              className=\"w-20 bg-dark-200 border-dark-400 text-white text-xs\"\n              data-testid=\"input-price-min\"\n            />\n            <span className=\"text-gray-400\">-</span>\n            <Input\n              type=\"number\"\n              placeholder=\"Max\"\n              value={priceRange.max}\n              onChange={(e) => setPriceRange(prev => ({ ...prev, max: Number(e.target.value) }))}\n              className=\"w-20 bg-dark-200 border-dark-400 text-white text-xs\"\n              data-testid=\"input-price-max\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Row */}\n      <div className=\"flex items-center justify-between p-4 bg-dark-200 rounded-lg border border-dark-400\">\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"w-4 h-4 text-green-400\" />\n            <span className=\"text-sm text-gray-300\">\n              {filteredAndSortedBeats?.length || 0} beats found\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <DollarSign className=\"w-4 h-4 text-gold-400\" />\n            <span className=\"text-sm text-gray-300\">\n              Avg: ${filteredAndSortedBeats && filteredAndSortedBeats.length > 0 ? (filteredAndSortedBeats.reduce((sum, beat) => sum + (parseFloat(beat.price as string) || 0), 0) / filteredAndSortedBeats.length).toFixed(2) : '0.00'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Beat List */}\n      <div className=\"space-y-3\">\n        {filteredAndSortedBeats?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Music4 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-300 mb-2\">No beats found</h3>\n            <p className=\"text-gray-500\">\n              {searchTerm || selectedGenre || selectedLicense\n                ? 'Try adjusting your search or filters'\n                : 'List the first beat to get started!'\n              }\n            </p>\n          </div>\n        ) : (\n          filteredAndSortedBeats?.map((beat: Beat) => (\n            <BeatCard\n              key={beat.id}\n              beat={beat}\n              isPlaying={playingBeat === beat.id}\n              onPlayToggle={() => handlePlayToggle(beat.id)}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Create Beat Dialog */}\n      {showCreateDialog && (\n        <CreateBeatDialog\n          open={showCreateDialog}\n          onOpenChange={setShowCreateDialog}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":9744},"client/src/components/beats/create-beat-dialog.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertBeatSchema } from '@shared/schema';\nimport { useCreateBeat } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Upload, Music4, DollarSign, Loader2 } from 'lucide-react';\nimport type { InsertBeat } from '@shared/schema';\n\ninterface CreateBeatDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst GENRES = ['Hip Hop', 'R&B', 'Pop', 'Electronic', 'Rock', 'Jazz', 'Country', 'Reggae'];\nconst KEYS = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\nconst LICENSE_TYPES = [\n  { value: 'basic', label: 'Basic License', desc: 'Standard commercial use' },\n  { value: 'premium', label: 'Premium License', desc: 'Enhanced commercial rights' },\n  { value: 'exclusive', label: 'Exclusive License', desc: 'Full ownership transfer' },\n];\n\nexport default function CreateBeatDialog({ open, onOpenChange }: CreateBeatDialogProps) {\n  const { user } = useAuth();\n  const createBeat = useCreateBeat();\n  const { toast } = useToast();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isUploadingAudio, setIsUploadingAudio] = useState(false);\n  const [isUploadingCover, setIsUploadingCover] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<InsertBeat>({\n    resolver: zodResolver(insertBeatSchema),\n    defaultValues: {\n      producerId: user?.id || '',\n      producerName: user?.displayName || '',\n      licenseType: 'basic',\n      price: '29.99',\n    },\n  });\n\n  const selectedLicenseType = watch('licenseType');\n\n  const onSubmit = async (data: InsertBeat) => {\n    try {\n      setIsUploading(true);\n      await createBeat.mutateAsync(data);\n      reset();\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to create beat:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleAudioUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploadingAudio(true);\n    try {\n      const formData = new FormData();\n      formData.append('audio', file);\n\n      const response = await fetch('/api/upload/audio', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      setValue('audioUrl', result.url);\n\n      toast({\n        title: 'Success',\n        description: 'Beat audio uploaded successfully',\n      });\n    } catch (error) {\n      console.error('Audio upload failed:', error);\n      toast({\n        title: 'Upload Failed',\n        description: 'Failed to upload beat audio. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsUploadingAudio(false);\n    }\n  };\n\n  const handleCoverUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploadingCover(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload/image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      setValue('coverImage', result.url);\n\n      toast({\n        title: 'Success',\n        description: 'Cover artwork uploaded successfully',\n      });\n    } catch (error) {\n      console.error('Cover upload failed:', error);\n      toast({\n        title: 'Upload Failed',\n        description: 'Failed to upload cover artwork. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsUploadingCover(false);\n    }\n  };\n\n  const getSuggestedPrice = (licenseType: string) => {\n    switch (licenseType) {\n      case 'basic':\n        return 29.99;\n      case 'premium':\n        return 99.99;\n      case 'exclusive':\n        return 499.99;\n      default:\n        return 29.99;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl bg-dark-200 border-dark-400 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Music4 className=\"w-5 h-5 text-gold-400\" />\n            <span>List New Beat</span>\n          </DialogTitle>\n          <DialogDescription>\n            Share your beats with artists and earn from your music\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Audio Upload */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"audioFile\">Beat Audio File*</Label>\n            <div className=\"border-2 border-dashed border-dark-400 rounded-lg p-6 text-center\">\n              <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n              <input\n                id=\"audioFile\"\n                type=\"file\"\n                accept=\"audio/*\"\n                onChange={handleAudioUpload}\n                className=\"hidden\"\n                data-testid=\"input-beat-audio\"\n                disabled={isUploadingAudio}\n              />\n              <Label htmlFor=\"audioFile\" className=\"cursor-pointer\">\n                {isUploadingAudio ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-gold-400\">Uploading beat...</span>\n                  </div>\n                ) : (\n                  <>\n                    <span className=\"text-gold-400 hover:text-gold-300\">Upload beat audio</span>\n                    <p className=\"text-sm text-gray-500 mt-1\">MP3, WAV, or M4A (max 100MB)</p>\n                  </>\n                )}\n              </Label>\n            </div>\n          </div>\n\n          {/* Beat Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Beat Title*</Label>\n              <Input\n                id=\"title\"\n                data-testid=\"input-beat-title\"\n                {...register('title')}\n                placeholder=\"Fire Beat 2024\"\n                className=\"bg-dark-300 border-dark-400\"\n              />\n              {errors.title && (\n                <p className=\"text-red-400 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"genre\">Genre*</Label>\n              <Select onValueChange={(value) => setValue('genre', value)}>\n                <SelectTrigger data-testid=\"select-beat-genre\">\n                  <SelectValue placeholder=\"Select genre\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {GENRES.map((genre) => (\n                    <SelectItem key={genre} value={genre}>\n                      {genre}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.genre && (\n                <p className=\"text-red-400 text-sm\">{errors.genre.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Beat Properties */}\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bpm\">BPM*</Label>\n              <Input\n                id=\"bpm\"\n                data-testid=\"input-beat-bpm\"\n                {...register('bpm', { valueAsNumber: true })}\n                type=\"number\"\n                placeholder=\"140\"\n                className=\"bg-dark-300 border-dark-400\"\n              />\n              {errors.bpm && (\n                <p className=\"text-red-400 text-sm\">{errors.bpm.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"key\">Key</Label>\n              <Select onValueChange={(value) => console.log('Key selected:', value)}>\n                <SelectTrigger data-testid=\"select-beat-key\">\n                  <SelectValue placeholder=\"Select key\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {KEYS.map((key) => (\n                    <SelectItem key={key} value={key}>\n                      {key}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mood\">Mood/Style</Label>\n              <Input\n                id=\"mood\"\n                data-testid=\"input-beat-mood\"\n                onChange={(e) => console.log('Mood:', e.target.value)}\n                placeholder=\"Dark, Melodic, etc.\"\n                className=\"bg-dark-300 border-dark-400\"\n              />\n            </div>\n          </div>\n\n          {/* License and Pricing */}\n          <div className=\"space-y-4\">\n            <Label>License Type & Pricing</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {LICENSE_TYPES.map((license) => (\n                <div\n                  key={license.value}\n                  className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                    selectedLicenseType === license.value\n                      ? 'border-gold-400 bg-gold-400/10'\n                      : 'border-dark-400 hover:border-dark-300'\n                  }`}\n                  onClick={() => {\n                    setValue('licenseType', license.value);\n                    setValue('price', getSuggestedPrice(license.value).toString());\n                  }}\n                  data-testid={`license-${license.value}`}\n                >\n                  <h4 className=\"font-medium text-white\">{license.label}</h4>\n                  <p className=\"text-sm text-gray-400 mt-1\">{license.desc}</p>\n                  <div className=\"flex items-center space-x-1 mt-2\">\n                    <DollarSign className=\"w-4 h-4 text-green-400\" />\n                    <span className=\"text-green-400 font-semibold\">\n                      ${getSuggestedPrice(license.value)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"price\">Custom Price*</Label>\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"w-4 h-4 text-green-400\" />\n                <Input\n                  id=\"price\"\n                  data-testid=\"input-beat-price\"\n                  {...register('price', { valueAsNumber: true })}\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"1\"\n                  placeholder=\"29.99\"\n                  className=\"bg-dark-300 border-dark-400 flex-1\"\n                />\n              </div>\n              {errors.price && (\n                <p className=\"text-red-400 text-sm\">{errors.price.message}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              data-testid=\"input-beat-description\"\n              onChange={(e) => console.log('Description:', e.target.value)}\n              placeholder=\"Describe your beat, its style, and what makes it unique...\"\n              className=\"bg-dark-300 border-dark-400 min-h-[80px]\"\n              rows={4}\n            />\n          </div>\n\n          {/* Cover Image Upload */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"coverImage\">Cover Artwork</Label>\n            <div className=\"border border-dark-400 rounded-lg p-4\">\n              <input\n                id=\"coverImage\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleCoverUpload}\n                className=\"hidden\"\n                data-testid=\"input-beat-cover\"\n                disabled={isUploadingCover}\n              />\n              <Label htmlFor=\"coverImage\" className=\"cursor-pointer flex items-center space-x-2\">\n                {isUploadingCover ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin text-gray-400\" />\n                    <span className=\"text-sm text-gray-300\">Uploading cover...</span>\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-sm text-gray-300\">Upload cover art</span>\n                  </>\n                )}\n              </Label>\n            </div>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isUploading || createBeat.isPending}\n              className=\"bg-gold-500 hover:bg-gold-600 text-black font-medium\"\n              data-testid=\"button-list-beat\"\n            >\n              {isUploading || createBeat.isPending ? 'Listing...' : 'List Beat'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":14123},"client/src/components/collaborations/collaboration-card.tsx":{"content":"import { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Users, Clock, Play, Pause, CheckCircle, X, MessageSquare } from 'lucide-react';\nimport { useState } from 'react';\nimport { useUpdateCollaborationStatus } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { cn } from '@/lib/utils';\nimport type { Collaboration } from '@shared/schema';\n\ninterface CollaborationCardProps {\n  collaboration: Collaboration;\n  className?: string;\n  onJoinSession?: () => void;\n}\n\nexport default function CollaborationCard({ collaboration, className, onJoinSession }: CollaborationCardProps) {\n  const { user } = useAuth();\n  const { joinCollaboration } = useWebSocket();\n  const updateStatus = useUpdateCollaborationStatus();\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const handleStatusUpdate = (status: string) => {\n    updateStatus.mutate({\n      id: collaboration.id,\n      status,\n    });\n  };\n\n  const handleJoinSession = () => {\n    joinCollaboration(collaboration.id);\n    onJoinSession?.();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500';\n      case 'completed':\n        return 'bg-blue-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'lead':\n        return 'bg-purple-500';\n      case 'featured':\n        return 'bg-gold-500';\n      case 'producer':\n        return 'bg-blue-500';\n      case 'writer':\n        return 'bg-green-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const isInvolved = user && (\n    collaboration.initiatorId === user.id || \n    collaboration.collaboratorId === user.id\n  );\n\n  const canManageStatus = user && collaboration.initiatorId === user.id;\n  const isPending = collaboration.status === 'pending';\n  const isActive = collaboration.status === 'active';\n\n  return (\n    <Card className={cn(\"bg-dark-200 border-dark-400 hover:shadow-lg transition-all duration-200\", className)}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <h3 className=\"text-lg font-semibold text-white\" data-testid={`text-collab-track-${collaboration.id}`}>\n              {collaboration.trackTitle}\n            </h3>\n            <Badge className={getStatusColor(collaboration.status || 'pending')}>\n              {(collaboration.status || 'pending').toUpperCase()}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Badge className={getRoleColor(collaboration.role)} data-testid={`badge-role-${collaboration.id}`}>\n              {collaboration.role.toUpperCase()}\n            </Badge>\n            \n            <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n              <Clock className=\"w-3 h-3\" />\n              <span>{formatDate(collaboration.createdAt || new Date())}</span>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Collaborators */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            {/* Initiator */}\n            <div className=\"flex items-center space-x-2\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarFallback>{collaboration.initiatorName.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-medium text-white\" data-testid={`text-initiator-${collaboration.id}`}>\n                  {collaboration.initiatorName}\n                </p>\n                <p className=\"text-xs text-gray-400\">Initiator</p>\n              </div>\n            </div>\n\n            {/* Collaboration Arrow */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-6 h-0.5 bg-gradient-to-r from-purple-500 to-electric-500\"></div>\n              <Users className=\"w-4 h-4 text-purple-400\" />\n              <div className=\"w-6 h-0.5 bg-gradient-to-r from-purple-500 to-electric-500\"></div>\n            </div>\n\n            {/* Collaborator */}\n            <div className=\"flex items-center space-x-2\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarFallback>{collaboration.collaboratorName.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <div>\n                <p className=\"text-sm font-medium text-white\" data-testid={`text-collaborator-${collaboration.id}`}>\n                  {collaboration.collaboratorName}\n                </p>\n                <p className=\"text-xs text-gray-400\">{collaboration.role}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Play Track */}\n          {collaboration.trackId && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              data-testid={`button-play-track-${collaboration.id}`}\n              onClick={() => setIsPlaying(!isPlaying)}\n            >\n              {isPlaying ? <Pause className=\"w-3 h-3 mr-1\" /> : <Play className=\"w-3 h-3 mr-1\" />}\n              Play Track\n            </Button>\n          )}\n        </div>\n\n        {/* Description */}\n        {collaboration.description && (\n          <div className=\"p-3 bg-dark-300 rounded-lg\">\n            <p className=\"text-sm text-gray-300\" data-testid={`text-description-${collaboration.id}`}>\n              {collaboration.description}\n            </p>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center justify-between pt-3 border-t border-dark-400\">\n          <div className=\"flex items-center space-x-2\">\n            {/* Status Management for Initiator */}\n            {canManageStatus && isPending && (\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"default\"\n                  className=\"bg-green-500 hover:bg-green-600\"\n                  data-testid={`button-approve-${collaboration.id}`}\n                  onClick={() => handleStatusUpdate('active')}\n                  disabled={updateStatus.isPending}\n                >\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Approve\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  data-testid={`button-decline-${collaboration.id}`}\n                  onClick={() => handleStatusUpdate('declined')}\n                  disabled={updateStatus.isPending}\n                >\n                  <X className=\"w-3 h-3 mr-1\" />\n                  Decline\n                </Button>\n              </div>\n            )}\n\n            {/* Response for Collaborator */}\n            {user && collaboration.collaboratorId === user.id && isPending && (\n              <div className=\"flex space-x-2\">\n                <Button\n                  size=\"sm\"\n                  variant=\"default\"\n                  className=\"bg-green-500 hover:bg-green-600\"\n                  data-testid={`button-accept-${collaboration.id}`}\n                  onClick={() => handleStatusUpdate('active')}\n                  disabled={updateStatus.isPending}\n                >\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Accept\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  data-testid={`button-reject-${collaboration.id}`}\n                  onClick={() => handleStatusUpdate('declined')}\n                  disabled={updateStatus.isPending}\n                >\n                  <X className=\"w-3 h-3 mr-1\" />\n                  Reject\n                </Button>\n              </div>\n            )}\n\n            {/* Join Live Session */}\n            {isInvolved && isActive && (\n              <Button\n                size=\"sm\"\n                variant=\"default\"\n                className=\"bg-purple-500 hover:bg-purple-600\"\n                data-testid={`button-join-session-${collaboration.id}`}\n                onClick={handleJoinSession}\n              >\n                <Users className=\"w-3 h-3 mr-1\" />\n                Join Session\n              </Button>\n            )}\n          </div>\n\n          {/* Chat/Messages */}\n          <div className=\"flex items-center space-x-2\">\n            {isInvolved && (\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"text-gray-400 hover:text-white\"\n                data-testid={`button-chat-${collaboration.id}`}\n              >\n                <MessageSquare className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Progress Indicator for Active Collaborations */}\n        {isActive && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-xs text-gray-400\">\n              <span>Progress</span>\n              <span>75%</span>\n            </div>\n            <div className=\"w-full bg-dark-300 rounded-full h-1.5\">\n              <div className=\"bg-gradient-to-r from-purple-500 to-electric-500 h-1.5 rounded-full w-3/4\"></div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9817},"client/src/components/collaborations/collaboration-list.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Filter, Plus, Users, Zap } from 'lucide-react';\nimport { useCollaborations, useUserCollaborations } from '@/hooks/useApi';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { useAuth } from '@/hooks/useAuth';\nimport CollaborationCard from './collaboration-card';\nimport CreateCollaborationDialog from './create-collaboration-dialog';\nimport LoadingSpinner from '@/components/ui/loading-spinner';\nimport type { Collaboration } from '@shared/schema';\n\nconst STATUSES = ['all', 'pending', 'active', 'completed', 'declined'];\nconst ROLES = ['all', 'lead', 'featured', 'producer', 'writer'];\n\nexport default function CollaborationList() {\n  const { user } = useAuth();\n  const { subscribeToMessage } = useWebSocket();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [selectedRole, setSelectedRole] = useState('all');\n  const [viewType, setViewType] = useState<'all' | 'my'>('my');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [liveUpdates, setLiveUpdates] = useState<Map<string, Partial<Collaboration>>>(new Map());\n  \n  const { data: allCollaborations, isLoading: loadingAll } = useCollaborations();\n  const { data: myCollaborations, isLoading: loadingMy } = useUserCollaborations(user?.id || '');\n  \n  const collaborations = viewType === 'all' ? allCollaborations : myCollaborations;\n  const isLoading = viewType === 'all' ? loadingAll : loadingMy;\n\n  // Subscribe to real-time collaboration updates\n  useEffect(() => {\n    const unsubscribeUpdate = subscribeToMessage('collaboration-update', (data) => {\n      setLiveUpdates(prev => new Map(prev.set(data.collaborationId, data.updates)));\n    });\n\n    const unsubscribeStatusChange = subscribeToMessage('collaboration-status-change', (data) => {\n      setLiveUpdates(prev => new Map(prev.set(data.collaborationId, {\n        status: data.status,\n        // updatedAt: new Date(), // Remove this field as it doesn't exist in schema\n      })));\n    });\n\n    return () => {\n      unsubscribeUpdate();\n      unsubscribeStatusChange();\n    };\n  }, [subscribeToMessage]);\n  \n  const filteredCollaborations = collaborations?.filter((collab: Collaboration) => {\n    // Apply live updates if available\n    const updatedCollab = liveUpdates.has(collab.id) \n      ? { ...collab, ...liveUpdates.get(collab.id) }\n      : collab;\n      \n    const matchesSearch = updatedCollab.trackTitle.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         updatedCollab.initiatorName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         updatedCollab.collaboratorName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = selectedStatus === 'all' || updatedCollab.status === selectedStatus;\n    const matchesRole = selectedRole === 'all' || updatedCollab.role === selectedRole;\n    \n    return matchesSearch && matchesStatus && matchesRole;\n  });\n\n  const handleJoinSession = () => {\n    // Navigate to live collaboration session\n    console.log('Joining live collaboration session...');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Users className=\"w-6 h-6 text-purple-400\" />\n          <h1 className=\"text-2xl font-bold text-white\">Collaborations</h1>\n          <Badge variant=\"secondary\">{collaborations?.length || 0}</Badge>\n        </div>\n        \n        {user && (user.role === 'artist' || user.role === 'producer') && (\n          <Button\n            data-testid=\"button-invite-collaboration\"\n            onClick={() => setShowCreateDialog(true)}\n            className=\"bg-purple-500 hover:bg-purple-600\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Invite Collaborator\n          </Button>\n        )}\n      </div>\n\n      {/* View Toggle */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex space-x-1\">\n          <Button\n            data-testid=\"button-view-my\"\n            variant={viewType === 'my' ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewType('my')}\n          >\n            My Collaborations\n          </Button>\n          <Button\n            data-testid=\"button-view-all\"\n            variant={viewType === 'all' ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewType('all')}\n          >\n            All Collaborations\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Search */}\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            data-testid=\"input-search-collaborations\"\n            placeholder=\"Search tracks or collaborators...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-dark-200 border-dark-400 text-white\"\n          />\n        </div>\n\n        {/* Status Filter */}\n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"w-4 h-4 text-gray-400\" />\n          <div className=\"flex space-x-2\">\n            {STATUSES.map((status) => (\n              <Button\n                key={status}\n                data-testid={`filter-status-${status}`}\n                variant={selectedStatus === status ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedStatus(status)}\n                className=\"text-xs\"\n              >\n                {status === 'active' && <Zap className=\"w-3 h-3 mr-1\" />}\n                {status.charAt(0).toUpperCase() + status.slice(1)}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Role Filter */}\n        <div className=\"flex flex-wrap gap-2\">\n          {ROLES.map((role) => (\n            <Button\n              key={role}\n              data-testid={`filter-role-${role}`}\n              variant={selectedRole === role ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedRole(role)}\n              className=\"text-xs\"\n            >\n              {role.charAt(0).toUpperCase() + role.slice(1)}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {[\n          { label: 'Pending', count: filteredCollaborations?.filter(c => c.status === 'pending').length || 0, color: 'text-yellow-400' },\n          { label: 'Active', count: filteredCollaborations?.filter(c => c.status === 'active').length || 0, color: 'text-green-400' },\n          { label: 'Completed', count: filteredCollaborations?.filter(c => c.status === 'completed').length || 0, color: 'text-blue-400' },\n          { label: 'Total', count: filteredCollaborations?.length || 0, color: 'text-purple-400' },\n        ].map((stat) => (\n          <div key={stat.label} className=\"p-4 bg-dark-200 rounded-lg border border-dark-400\">\n            <p className=\"text-sm text-gray-400\">{stat.label}</p>\n            <p className={`text-2xl font-bold ${stat.color}`}>{stat.count}</p>\n          </div>\n        ))}\n      </div>\n\n      {/* Collaboration List */}\n      <div className=\"space-y-4\">\n        {filteredCollaborations?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-300 mb-2\">No collaborations found</h3>\n            <p className=\"text-gray-500\">\n              {searchTerm || selectedStatus !== 'all' || selectedRole !== 'all'\n                ? 'Try adjusting your search or filters'\n                : viewType === 'my'\n                  ? 'Start collaborating with other artists!'\n                  : 'No collaborations available right now.'\n              }\n            </p>\n          </div>\n        ) : (\n          filteredCollaborations?.map((collaboration: Collaboration) => {\n            // Apply live updates if available\n            const updatedCollab = liveUpdates.has(collaboration.id) \n              ? { ...collaboration, ...liveUpdates.get(collaboration.id) }\n              : collaboration;\n              \n            return (\n              <CollaborationCard\n                key={collaboration.id}\n                collaboration={updatedCollab as Collaboration}\n                onJoinSession={handleJoinSession}\n              />\n            );\n          })\n        )}\n      </div>\n\n      {/* Create Collaboration Dialog */}\n      {showCreateDialog && (\n        <CreateCollaborationDialog\n          open={showCreateDialog}\n          onOpenChange={setShowCreateDialog}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":9211},"client/src/components/collaborations/create-collaboration-dialog.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertCollaborationSchema } from '@shared/schema';\nimport { useCreateCollaboration, useUsers, useTracks } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Users, Music, MessageSquare } from 'lucide-react';\nimport type { InsertCollaboration } from '@shared/schema';\n\ninterface CreateCollaborationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst ROLES = [\n  { value: 'featured', label: 'Featured Artist', desc: 'Main vocal or rap feature' },\n  { value: 'producer', label: 'Producer', desc: 'Beat production and mixing' },\n  { value: 'writer', label: 'Writer', desc: 'Lyrics and songwriting' },\n  { value: 'lead', label: 'Lead Artist', desc: 'Primary artist on track' },\n];\n\nexport default function CreateCollaborationDialog({ open, onOpenChange }: CreateCollaborationDialogProps) {\n  const { user } = useAuth();\n  const createCollaboration = useCreateCollaboration();\n  const { data: users } = useUsers();\n  const { data: tracks } = useTracks(user?.id);\n\n  // Filter to artists and producers only\n  const collaborators = users?.filter(u => \n    u.id !== user?.id && (u.role === 'artist' || u.role === 'producer')\n  );\n\n  // Filter to user's tracks only\n  const myTracks = tracks?.filter(t => t.artistId === user?.id);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<InsertCollaboration>({\n    resolver: zodResolver(insertCollaborationSchema),\n    defaultValues: {\n      initiatorId: user?.id || '',\n      initiatorName: user?.displayName || '',\n      // status: 'pending', // Remove this field as it's not in the form schema\n    },\n  });\n\n  const selectedTrackId = watch('trackId');\n  const selectedCollaboratorId = watch('collaboratorId');\n  const selectedRole = watch('role');\n\n  const selectedTrack = myTracks?.find(t => t.id === selectedTrackId);\n  const selectedCollaborator = collaborators?.find(u => u.id === selectedCollaboratorId);\n\n  const onSubmit = async (data: InsertCollaboration) => {\n    try {\n      // Set track title if a track is selected\n      if (selectedTrack) {\n        data.trackTitle = selectedTrack.title;\n      }\n\n      await createCollaboration.mutateAsync(data);\n      reset();\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to create collaboration:', error);\n    }\n  };\n\n  const handleCollaboratorChange = (userId: string) => {\n    const selectedUser = collaborators?.find(u => u.id === userId);\n    if (selectedUser) {\n      setValue('collaboratorId', userId);\n      setValue('collaboratorName', selectedUser.displayName);\n    }\n  };\n\n  const handleTrackChange = (trackId: string) => {\n    const track = myTracks?.find(t => t.id === trackId);\n    if (track) {\n      setValue('trackId', trackId);\n      setValue('trackTitle', track.title);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl bg-dark-200 border-dark-400\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Users className=\"w-5 h-5 text-purple-400\" />\n            <span>Invite Collaborator</span>\n          </DialogTitle>\n          <DialogDescription>\n            Invite another artist or producer to collaborate on your track\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit(onSubmit as any)} className=\"space-y-6\">\n          {/* Track Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"track\">Select Track*</Label>\n            <Select onValueChange={handleTrackChange} data-testid=\"select-track\">\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose a track to collaborate on\" />\n              </SelectTrigger>\n              <SelectContent>\n                {myTracks?.map((track) => (\n                  <SelectItem key={track.id} value={track.id}>\n                    <div className=\"flex items-center space-x-2\">\n                      <Music className=\"w-4 h-4\" />\n                      <span>{track.title}</span>\n                      {track.genre && (\n                        <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                          {track.genre}\n                        </Badge>\n                      )}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors.trackId && (\n              <p className=\"text-red-400 text-sm\">{errors.trackId.message}</p>\n            )}\n          </div>\n\n          {/* Collaborator Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"collaborator\">Choose Collaborator*</Label>\n            <Select onValueChange={handleCollaboratorChange} data-testid=\"select-collaborator\">\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select an artist or producer\" />\n              </SelectTrigger>\n              <SelectContent>\n                {collaborators?.map((collaborator) => (\n                  <SelectItem key={collaborator.id} value={collaborator.id}>\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarFallback className=\"text-xs\">\n                          {collaborator.displayName.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span>{collaborator.displayName}</span>\n                      <Badge variant=\"outline\" className=\"ml-2\">\n                        {collaborator.role}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {errors.collaboratorId && (\n              <p className=\"text-red-400 text-sm\">{errors.collaboratorId.message}</p>\n            )}\n          </div>\n\n          {/* Role Assignment */}\n          <div className=\"space-y-3\">\n            <Label>Collaboration Role*</Label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {ROLES.map((role) => (\n                <div\n                  key={role.value}\n                  className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                    selectedRole === role.value\n                      ? 'border-purple-400 bg-purple-400/10'\n                      : 'border-dark-400 hover:border-dark-300'\n                  }`}\n                  onClick={() => setValue('role', role.value)}\n                  data-testid={`role-${role.value}`}\n                >\n                  <h4 className=\"font-medium text-white\">{role.label}</h4>\n                  <p className=\"text-sm text-gray-400 mt-1\">{role.desc}</p>\n                </div>\n              ))}\n            </div>\n            {errors.role && (\n              <p className=\"text-red-400 text-sm\">{errors.role.message}</p>\n            )}\n          </div>\n\n          {/* Description/Message */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Collaboration Message</Label>\n            <Textarea\n              id=\"description\"\n              data-testid=\"input-collaboration-message\"\n              {...register('description')}\n              placeholder=\"Tell them about your vision for this collaboration...\"\n              className=\"bg-dark-300 border-dark-400 min-h-[100px]\"\n              rows={4}\n            />\n            <p className=\"text-xs text-gray-500\">\n              Explain what you're looking for and how they can contribute to the track\n            </p>\n          </div>\n\n          {/* Preview */}\n          {selectedTrack && selectedCollaborator && selectedRole && (\n            <div className=\"p-4 bg-dark-300 rounded-lg border border-dark-400\">\n              <h4 className=\"font-medium text-white mb-3 flex items-center\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                Collaboration Preview\n              </h4>\n              <div className=\"space-y-2 text-sm\">\n                <p className=\"text-gray-300\">\n                  <span className=\"text-purple-400\">Track:</span> {selectedTrack.title}\n                </p>\n                <p className=\"text-gray-300\">\n                  <span className=\"text-purple-400\">Inviting:</span> {selectedCollaborator.displayName}\n                </p>\n                <p className=\"text-gray-300\">\n                  <span className=\"text-purple-400\">Role:</span> {ROLES.find(r => r.value === selectedRole)?.label}\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createCollaboration.isPending || !selectedTrackId || !selectedCollaboratorId}\n              className=\"bg-purple-500 hover:bg-purple-600\"\n              data-testid=\"button-send-invitation\"\n            >\n              {createCollaboration.isPending ? 'Sending...' : 'Send Invitation'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10015},"client/src/components/tracks/create-track-dialog.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { insertTrackSchema } from '@shared/schema';\nimport { useCreateTrack } from '@/hooks/useApi';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Upload, Music, Loader2 } from 'lucide-react';\nimport type { InsertTrack } from '@shared/schema';\n\ninterface CreateTrackDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst GENRES = ['Hip Hop', 'R&B', 'Pop', 'Electronic', 'Rock', 'Jazz', 'Country', 'Reggae'];\n\nexport default function CreateTrackDialog({ open, onOpenChange }: CreateTrackDialogProps) {\n  const { user } = useAuth();\n  const createTrack = useCreateTrack();\n  const { toast } = useToast();\n  const [isUploading, setIsUploading] = useState(false);\n  const [isUploadingAudio, setIsUploadingAudio] = useState(false);\n  const [isUploadingCover, setIsUploadingCover] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<InsertTrack>({\n    resolver: zodResolver(insertTrackSchema),\n    defaultValues: {\n      artistId: user?.id || '',\n      artistName: user?.displayName || '',\n      isCollaborative: false,\n      collaborators: [],\n    },\n  });\n\n  const isCollaborative = watch('isCollaborative');\n\n  const onSubmit = async (data: InsertTrack) => {\n    try {\n      setIsUploading(true);\n      await createTrack.mutateAsync(data);\n      reset();\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to create track:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploadingAudio(true);\n    try {\n      const formData = new FormData();\n      formData.append('audio', file);\n\n      const response = await fetch('/api/upload/audio', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      setValue('audioUrl', result.url);\n      \n      // Extract duration from file\n      const audio = new Audio();\n      audio.src = URL.createObjectURL(file);\n      audio.addEventListener('loadedmetadata', () => {\n        setValue('duration', Math.floor(audio.duration));\n        URL.revokeObjectURL(audio.src);\n      });\n\n      toast({\n        title: 'Success',\n        description: 'Audio file uploaded successfully',\n      });\n    } catch (error) {\n      console.error('Audio upload failed:', error);\n      toast({\n        title: 'Upload Failed',\n        description: 'Failed to upload audio file. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsUploadingAudio(false);\n    }\n  };\n\n  const handleCoverUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setIsUploadingCover(true);\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await fetch('/api/upload/image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const result = await response.json();\n      setValue('coverImage', result.url);\n\n      toast({\n        title: 'Success',\n        description: 'Cover image uploaded successfully',\n      });\n    } catch (error) {\n      console.error('Cover upload failed:', error);\n      toast({\n        title: 'Upload Failed',\n        description: 'Failed to upload cover image. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsUploadingCover(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md bg-dark-200 border-dark-400\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Music className=\"w-5 h-5 text-purple-400\" />\n            <span>Upload New Track</span>\n          </DialogTitle>\n          <DialogDescription>\n            Share your music with the Viral Views community\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Audio File Upload */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"audioFile\">Audio File*</Label>\n            <div className=\"border-2 border-dashed border-dark-400 rounded-lg p-6 text-center\">\n              <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n              <input\n                id=\"audioFile\"\n                type=\"file\"\n                accept=\"audio/*\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n                data-testid=\"input-audio-file\"\n                disabled={isUploadingAudio}\n              />\n              <Label htmlFor=\"audioFile\" className=\"cursor-pointer\">\n                {isUploadingAudio ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-purple-400\">Uploading audio...</span>\n                  </div>\n                ) : (\n                  <>\n                    <span className=\"text-purple-400 hover:text-purple-300\">Choose audio file</span>\n                    <p className=\"text-sm text-gray-500 mt-1\">MP3, WAV, or M4A (max 100MB)</p>\n                  </>\n                )}\n              </Label>\n            </div>\n          </div>\n\n          {/* Track Details */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title*</Label>\n              <Input\n                id=\"title\"\n                data-testid=\"input-track-title\"\n                {...register('title')}\n                placeholder=\"Track title\"\n                className=\"bg-dark-300 border-dark-400\"\n              />\n              {errors.title && (\n                <p className=\"text-red-400 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"genre\">Genre</Label>\n              <Select onValueChange={(value) => setValue('genre', value)}>\n                <SelectTrigger data-testid=\"select-track-genre\">\n                  <SelectValue placeholder=\"Select genre\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {GENRES.map((genre) => (\n                    <SelectItem key={genre} value={genre}>\n                      {genre}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bpm\">BPM</Label>\n            <Input\n              id=\"bpm\"\n              data-testid=\"input-track-bpm\"\n              {...register('bpm', { valueAsNumber: true })}\n              type=\"number\"\n              placeholder=\"120\"\n              className=\"bg-dark-300 border-dark-400\"\n            />\n          </div>\n\n          {/* Cover Image Upload */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"coverImage\">Cover Image</Label>\n            <div className=\"border border-dark-400 rounded-lg p-4\">\n              <input\n                id=\"coverImage\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleCoverUpload}\n                className=\"hidden\"\n                data-testid=\"input-cover-image\"\n                disabled={isUploadingCover}\n              />\n              <Label htmlFor=\"coverImage\" className=\"cursor-pointer flex items-center space-x-2\">\n                {isUploadingCover ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 animate-spin text-gray-400\" />\n                    <span className=\"text-sm text-gray-300\">Uploading cover...</span>\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-sm text-gray-300\">Upload cover art</span>\n                  </>\n                )}\n              </Label>\n            </div>\n          </div>\n\n          {/* Collaboration Settings */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label htmlFor=\"collaborative\">Enable Collaboration</Label>\n              <p className=\"text-sm text-gray-500\">Allow other artists to collaborate on this track</p>\n            </div>\n            <Switch\n              id=\"collaborative\"\n              data-testid=\"switch-collaborative\"\n              checked={isCollaborative || false}\n              onCheckedChange={(checked) => setValue('isCollaborative', checked || false)}\n            />\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isUploading || createTrack.isPending}\n              data-testid=\"button-upload-track\"\n            >\n              {isUploading || createTrack.isPending ? 'Uploading...' : 'Upload Track'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10220},"client/src/components/tracks/track-card.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Play, Pause, Heart, Share2, Users, Clock } from 'lucide-react';\nimport { useState } from 'react';\nimport { useUpdateTrackPlays, useUpdateTrackLikes } from '@/hooks/useApi';\nimport { cn } from '@/lib/utils';\nimport type { Track } from '@shared/schema';\n\ninterface TrackCardProps {\n  track: Track;\n  isPlaying?: boolean;\n  onPlayToggle?: () => void;\n  className?: string;\n}\n\nexport default function TrackCard({ track, isPlaying = false, onPlayToggle, className }: TrackCardProps) {\n  const [isLiked, setIsLiked] = useState(false);\n  const updatePlays = useUpdateTrackPlays();\n  const updateLikes = useUpdateTrackLikes();\n\n  const handlePlayToggle = () => {\n    if (!isPlaying && onPlayToggle) {\n      updatePlays.mutate(track.id);\n    }\n    onPlayToggle?.();\n  };\n\n  const handleLike = () => {\n    updateLikes.mutate(track.id);\n    setIsLiked(!isLiked);\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Card className={cn(\"group hover:shadow-lg transition-all duration-200 bg-dark-200 border-dark-400\", className)}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center space-x-4\">\n          {/* Album Art / Cover */}\n          <div className=\"relative\">\n            {track.coverImage ? (\n              <img\n                src={track.coverImage}\n                alt={track.title}\n                className=\"w-16 h-16 rounded-lg object-cover\"\n              />\n            ) : (\n              <div className=\"w-16 h-16 rounded-lg bg-gradient-to-br from-purple-500 to-electric-500 flex items-center justify-center\">\n                <Play className=\"text-white w-6 h-6\" />\n              </div>\n            )}\n            \n            {/* Play/Pause Overlay */}\n            <Button\n              data-testid={`button-play-${track.id}`}\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute inset-0 bg-black/60 hover:bg-black/80 text-white opacity-0 group-hover:opacity-100 transition-opacity\"\n              onClick={handlePlayToggle}\n            >\n              {isPlaying ? (\n                <Pause className=\"w-5 h-5\" />\n              ) : (\n                <Play className=\"w-5 h-5\" />\n              )}\n            </Button>\n          </div>\n\n          {/* Track Info */}\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold text-white truncate\" data-testid={`text-title-${track.id}`}>\n              {track.title}\n            </h3>\n            <p className=\"text-sm text-gray-400 truncate\" data-testid={`text-artist-${track.id}`}>\n              {track.artistName}\n            </p>\n            \n            {/* Track Metadata */}\n            <div className=\"flex items-center space-x-4 mt-2\">\n              {track.genre && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {track.genre}\n                </Badge>\n              )}\n              {track.bpm && (\n                <span className=\"text-xs text-gray-500\">\n                  {track.bpm} BPM\n                </span>\n              )}\n              {track.duration && (\n                <div className=\"flex items-center space-x-1 text-xs text-gray-500\">\n                  <Clock className=\"w-3 h-3\" />\n                  <span>{formatDuration(track.duration)}</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Track Actions */}\n          <div className=\"flex items-center space-x-2\">\n            {track.isCollaborative && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <Users className=\"w-3 h-3 mr-1\" />\n                Collab\n              </Badge>\n            )}\n            \n            {/* Stats */}\n            <div className=\"flex items-center space-x-3 text-xs text-gray-500\">\n              <span data-testid={`text-plays-${track.id}`}>\n                {track.plays?.toLocaleString() || 0} plays\n              </span>\n              <span data-testid={`text-likes-${track.id}`}>\n                {track.likes?.toLocaleString() || 0} likes\n              </span>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button\n                data-testid={`button-like-${track.id}`}\n                size=\"icon\"\n                variant=\"ghost\"\n                className={cn(\n                  \"text-gray-400 hover:text-red-400\",\n                  isLiked && \"text-red-400\"\n                )}\n                onClick={handleLike}\n              >\n                <Heart className={cn(\"w-4 h-4\", isLiked && \"fill-current\")} />\n              </Button>\n              \n              <Button\n                data-testid={`button-share-${track.id}`}\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"text-gray-400 hover:text-white\"\n                onClick={() => navigator.share?.({ \n                  title: track.title, \n                  text: `Check out \"${track.title}\" by ${track.artistName}`,\n                  url: window.location.href \n                })}\n              >\n                <Share2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5573},"client/src/components/tracks/track-list.tsx":{"content":"import { useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, Filter, Plus, Music } from 'lucide-react';\nimport { useTracks } from '@/hooks/useApi';\nimport TrackCard from './track-card';\nimport { useAuth } from '@/hooks/useAuth';\nimport CreateTrackDialog from './create-track-dialog';\nimport LoadingSpinner from '@/components/ui/loading-spinner';\nimport type { Track } from '@shared/schema';\n\nconst GENRES = ['Hip Hop', 'R&B', 'Pop', 'Electronic', 'Rock', 'Jazz', 'Country', 'Reggae'];\n\nexport default function TrackList() {\n  const { user } = useAuth();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedGenre, setSelectedGenre] = useState<string>('');\n  const [playingTrack, setPlayingTrack] = useState<string | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  \n  const { data: tracks, isLoading, error } = useTracks();\n  \n  const filteredTracks = tracks?.filter((track: Track) => {\n    const matchesSearch = track.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         track.artistName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesGenre = !selectedGenre || track.genre === selectedGenre;\n    return matchesSearch && matchesGenre;\n  });\n\n  const handlePlayToggle = (trackId: string) => {\n    setPlayingTrack(playingTrack === trackId ? null : trackId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-red-400\">Failed to load tracks. Please try again.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Music className=\"w-6 h-6 text-purple-400\" />\n          <h1 className=\"text-2xl font-bold text-white\">Tracks</h1>\n          <Badge variant=\"secondary\">{tracks?.length || 0}</Badge>\n        </div>\n        \n        {user && (user.role === 'artist' || user.role === 'producer') && (\n          <Button\n            data-testid=\"button-create-track\"\n            onClick={() => setShowCreateDialog(true)}\n            className=\"bg-purple-500 hover:bg-purple-600\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Upload Track\n          </Button>\n        )}\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        {/* Search */}\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          <Input\n            data-testid=\"input-search-tracks\"\n            placeholder=\"Search tracks or artists...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-dark-200 border-dark-400 text-white\"\n          />\n        </div>\n\n        {/* Genre Filter */}\n        <div className=\"flex items-center space-x-2\">\n          <Filter className=\"w-4 h-4 text-gray-400\" />\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              data-testid=\"filter-all-genres\"\n              variant={!selectedGenre ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedGenre('')}\n              className=\"text-xs\"\n            >\n              All\n            </Button>\n            {GENRES.map((genre) => (\n              <Button\n                key={genre}\n                data-testid={`filter-genre-${genre.toLowerCase().replace(' ', '-')}`}\n                variant={selectedGenre === genre ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedGenre(selectedGenre === genre ? '' : genre)}\n                className=\"text-xs\"\n              >\n                {genre}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Track List */}\n      <div className=\"space-y-3\">\n        {filteredTracks?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Music className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-300 mb-2\">No tracks found</h3>\n            <p className=\"text-gray-500\">\n              {searchTerm || selectedGenre \n                ? 'Try adjusting your search or filters'\n                : 'Upload the first track to get started!'\n              }\n            </p>\n          </div>\n        ) : (\n          filteredTracks?.map((track: Track) => (\n            <TrackCard\n              key={track.id}\n              track={track}\n              isPlaying={playingTrack === track.id}\n              onPlayToggle={() => handlePlayToggle(track.id)}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Create Track Dialog */}\n      {showCreateDialog && (\n        <CreateTrackDialog\n          open={showCreateDialog}\n          onOpenChange={setShowCreateDialog}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":5218},"client/src/components/ui/loading-spinner.tsx":{"content":"import { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport default function LoadingSpinner({ size = 'md', className }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-8 h-8', \n    lg: 'w-12 h-12'\n  };\n\n  return (\n    <Loader2 \n      className={cn(\n        'animate-spin text-purple-400',\n        sizeClasses[size],\n        className\n      )} \n    />\n  );\n}","size_bytes":494},"client/src/hooks/useApi.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport type { \n  User, InsertUser,\n  Track, InsertTrack,\n  Battle, InsertBattle,\n  Beat, InsertBeat,\n  Collaboration, InsertCollaboration,\n  Vote, InsertVote,\n  File, InsertFile\n} from '@shared/schema';\n\n// User API Hooks\nexport function useUsers() {\n  return useQuery({\n    queryKey: ['/api/users'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/users');\n      return await response.json() as User[];\n    },\n  });\n}\n\nexport function useUser(id: string) {\n  return useQuery({\n    queryKey: ['/api/users', id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/users/${id}`);\n      return await response.json() as User;\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useCreateUser() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const response = await apiRequest('POST', '/api/users', data);\n      return await response.json() as User;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: 'Success',\n        description: 'User created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create user',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\n// Track API Hooks\nexport function useTracks(artistId?: string) {\n  return useQuery({\n    queryKey: artistId ? ['/api/tracks', { artist: artistId }] : ['/api/tracks'],\n    queryFn: async () => {\n      const url = artistId ? `/api/tracks?artist=${artistId}` : '/api/tracks';\n      const response = await apiRequest('GET', url);\n      return await response.json() as Track[];\n    },\n  });\n}\n\nexport function useTrack(id: string) {\n  return useQuery({\n    queryKey: ['/api/tracks', id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/tracks/${id}`);\n      return await response.json() as Track;\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useCreateTrack() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertTrack) => {\n      const response = await apiRequest('POST', '/api/tracks', data);\n      return await response.json() as Track;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tracks'] });\n      toast({\n        title: 'Success',\n        description: 'Track created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create track',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\nexport function useUpdateTrackPlays() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('PATCH', `/api/tracks/${id}/play`);\n      return await response.json() as Track;\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/tracks', data.id], data);\n      queryClient.invalidateQueries({ queryKey: ['/api/tracks'] });\n    },\n  });\n}\n\nexport function useUpdateTrackLikes() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('PATCH', `/api/tracks/${id}/like`);\n      return await response.json() as Track;\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/tracks', data.id], data);\n      queryClient.invalidateQueries({ queryKey: ['/api/tracks'] });\n    },\n  });\n}\n\n// Battle API Hooks\nexport function useBattles() {\n  return useQuery({\n    queryKey: ['/api/battles'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/battles');\n      return await response.json() as Battle[];\n    },\n  });\n}\n\nexport function useActiveBattles() {\n  return useQuery({\n    queryKey: ['/api/battles/active'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/battles/active');\n      return await response.json() as Battle[];\n    },\n  });\n}\n\nexport function useBattle(id: string) {\n  return useQuery({\n    queryKey: ['/api/battles', id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/battles/${id}`);\n      return await response.json() as Battle;\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useUserBattles(userId: string) {\n  return useQuery({\n    queryKey: ['/api/battles/user', userId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/battles/user/${userId}`);\n      return await response.json() as Battle[];\n    },\n    enabled: !!userId,\n  });\n}\n\nexport function useCreateBattle() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertBattle) => {\n      const response = await apiRequest('POST', '/api/battles', data);\n      return await response.json() as Battle;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/battles'] });\n      toast({\n        title: 'Battle Created!',\n        description: 'Your battle has been created and is now live',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create battle',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\nexport function useVoteInBattle() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertVote) => {\n      const response = await apiRequest('POST', '/api/battles/vote', data);\n      return await response.json() as Vote;\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/battles', variables.battleId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/battles'] });\n      toast({\n        title: 'Vote Cast!',\n        description: 'Your vote has been recorded',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to cast vote',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\n// Beat API Hooks\nexport function useBeats(genre?: string, producerId?: string) {\n  return useQuery({\n    queryKey: genre || producerId \n      ? ['/api/beats', { genre, producerId }] \n      : ['/api/beats'],\n    queryFn: async () => {\n      let url = '/api/beats';\n      const params = new URLSearchParams();\n      if (genre) params.append('genre', genre);\n      if (producerId) params.append('producer', producerId);\n      if (params.toString()) url += `?${params.toString()}`;\n      \n      const response = await apiRequest('GET', url);\n      return await response.json() as Beat[];\n    },\n  });\n}\n\nexport function useBeat(id: string) {\n  return useQuery({\n    queryKey: ['/api/beats', id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/beats/${id}`);\n      return await response.json() as Beat;\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useCreateBeat() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertBeat) => {\n      const response = await apiRequest('POST', '/api/beats', data);\n      return await response.json() as Beat;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/beats'] });\n      toast({\n        title: 'Beat Listed!',\n        description: 'Your beat is now available in the marketplace',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to list beat',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\nexport function useUpdateBeatPlays() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('PATCH', `/api/beats/${id}/play`);\n      return await response.json() as Beat;\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/beats', data.id], data);\n      queryClient.invalidateQueries({ queryKey: ['/api/beats'] });\n    },\n  });\n}\n\nexport function useUpdateBeatLikes() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('PATCH', `/api/beats/${id}/like`);\n      return await response.json() as Beat;\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/beats', data.id], data);\n      queryClient.invalidateQueries({ queryKey: ['/api/beats'] });\n    },\n  });\n}\n\nexport function usePurchaseBeat() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('POST', `/api/beats/${id}/purchase`);\n      return await response.json() as Beat;\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/beats', data.id], data);\n      queryClient.invalidateQueries({ queryKey: ['/api/beats'] });\n      toast({\n        title: 'Beat Purchased!',\n        description: 'You now own this beat and can use it in your projects',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Purchase Failed',\n        description: error.message || 'Failed to purchase beat',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\n// Collaboration API Hooks\nexport function useCollaborations() {\n  return useQuery({\n    queryKey: ['/api/collaborations'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/collaborations');\n      return await response.json() as Collaboration[];\n    },\n  });\n}\n\nexport function useTrackCollaborations(trackId: string) {\n  return useQuery({\n    queryKey: ['/api/collaborations/track', trackId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/collaborations/track/${trackId}`);\n      return await response.json() as Collaboration[];\n    },\n    enabled: !!trackId,\n  });\n}\n\nexport function useUserCollaborations(userId: string) {\n  return useQuery({\n    queryKey: ['/api/collaborations/user', userId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/collaborations/user/${userId}`);\n      return await response.json() as Collaboration[];\n    },\n    enabled: !!userId,\n  });\n}\n\nexport function useCreateCollaboration() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertCollaboration) => {\n      const response = await apiRequest('POST', '/api/collaborations', data);\n      return await response.json() as Collaboration;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/collaborations'] });\n      toast({\n        title: 'Collaboration Invited!',\n        description: 'Collaboration request sent successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create collaboration',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\nexport function useUpdateCollaborationStatus() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest('PATCH', `/api/collaborations/${id}`, { status });\n      return await response.json() as Collaboration;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/collaborations'] });\n      toast({\n        title: 'Status Updated',\n        description: 'Collaboration status updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update status',\n        variant: 'destructive',\n      });\n    },\n  });\n}\n\n// File API Hooks  \nexport function useFiles(directory?: string, fileType?: string) {\n  return useQuery({\n    queryKey: directory || fileType \n      ? ['/api/files', { directory, fileType }] \n      : ['/api/files'],\n    queryFn: async () => {\n      let url = '/api/files';\n      const params = new URLSearchParams();\n      if (directory) params.append('directory', directory);\n      if (fileType) params.append('type', fileType);\n      if (params.toString()) url += `?${params.toString()}`;\n      \n      const response = await apiRequest('GET', url);\n      return await response.json() as File[];\n    },\n  });\n}\n\nexport function useUploadFile() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (data: InsertFile) => {\n      const response = await apiRequest('POST', '/api/files', data);\n      return await response.json() as File;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/files'] });\n      toast({\n        title: 'File Uploaded!',\n        description: 'Your file has been uploaded successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Upload Failed',\n        description: error.message || 'Failed to upload file',\n        variant: 'destructive',\n      });\n    },\n  });\n}","size_bytes":13548},"client/src/hooks/useAuth.tsx":{"content":"import { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { User } from '@shared/schema';\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/user'],\n    queryFn: async () => {\n      try {\n        const response = await apiRequest('GET', '/api/auth/user');\n        const userData = await response.json() as User;\n        return userData;\n      } catch (error: any) {\n        // If user is not authenticated, return null instead of throwing\n        if (error.message?.includes('401') || error.message?.includes('Unauthorized')) {\n          return null;\n        }\n        throw error;\n      }\n    },\n    retry: (failureCount, error: any) => {\n      // Retry up to 2 times for network errors, but not for auth errors\n      if (error?.message?.includes('401') || error?.message?.includes('Unauthorized')) {\n        return false;\n      }\n      return failureCount < 2;\n    },\n    staleTime: 1000 * 30, // Cache for 30 seconds to prevent excessive requests\n    gcTime: 1000 * 60 * 5, // Keep in cache for 5 minutes\n    refetchOnWindowFocus: true, // Refetch when user returns to tab\n  });\n\n  const logout = async () => {\n    try {\n      // Redirect to Replit logout endpoint\n      window.location.href = '/api/logout';\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const isAuthenticated = !!user && user !== null;\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    logout,\n    refetch: () => queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] }),\n  };\n}","size_bytes":1669},"client/src/hooks/useWebSocket.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { useAuth } from './useAuth';\n\nexport interface WebSocketMessage {\n  type: string;\n  data?: any;\n  [key: string]: any;\n}\n\nexport function useWebSocket() {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const messageHandlers = useRef<Map<string, (data: any) => void>>(new Map());\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (!user) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    \n    ws.onopen = () => {\n      setIsConnected(true);\n      setSocket(ws);\n      console.log('WebSocket connected');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        setLastMessage(message);\n        \n        const handler = messageHandlers.current.get(message.type);\n        if (handler) {\n          handler(message);\n        }\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      setSocket(null);\n      console.log('WebSocket disconnected');\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [user]);\n\n  const sendMessage = useCallback((message: WebSocketMessage) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    }\n  }, [socket]);\n\n  const subscribeToMessage = useCallback((messageType: string, handler: (data: any) => void) => {\n    messageHandlers.current.set(messageType, handler);\n    \n    return () => {\n      messageHandlers.current.delete(messageType);\n    };\n  }, []);\n\n  // Room management for live features\n  const joinRoom = useCallback((roomId: string, username: string, isHost = false) => {\n    sendMessage({\n      type: 'join-room',\n      roomId,\n      username,\n      isHost\n    });\n  }, [sendMessage]);\n\n  const leaveRoom = useCallback(() => {\n    sendMessage({\n      type: 'leave-room'\n    });\n  }, [sendMessage]);\n\n  // Battle real-time updates\n  const joinBattle = useCallback((battleId: string) => {\n    sendMessage({\n      type: 'join-battle',\n      battleId\n    });\n  }, [sendMessage]);\n\n  const castVote = useCallback((battleId: string, contestantId: string) => {\n    sendMessage({\n      type: 'cast-vote',\n      battleId,\n      contestantId\n    });\n  }, [sendMessage]);\n\n  // Collaboration real-time updates\n  const joinCollaboration = useCallback((collaborationId: string) => {\n    sendMessage({\n      type: 'join-collaboration',\n      collaborationId\n    });\n  }, [sendMessage]);\n\n  const updateCollaborationLayer = useCallback((collaborationId: string, layerData: any) => {\n    sendMessage({\n      type: 'update-layer',\n      collaborationId,\n      layerData\n    });\n  }, [sendMessage]);\n\n  // WebRTC signaling for live features\n  const sendSignal = useCallback((peerId: string, signal: any) => {\n    sendMessage({\n      type: 'signal',\n      peerId,\n      ...signal\n    });\n  }, [sendMessage]);\n\n  const updateMediaState = useCallback((audioEnabled: boolean, videoEnabled: boolean, screenSharing = false) => {\n    sendMessage({\n      type: 'media-state',\n      audioEnabled,\n      videoEnabled,\n      screenSharing\n    });\n  }, [sendMessage]);\n\n  return {\n    socket,\n    isConnected,\n    lastMessage,\n    sendMessage,\n    subscribeToMessage,\n    // Room management\n    joinRoom,\n    leaveRoom,\n    // Battle features\n    joinBattle,\n    castVote,\n    // Collaboration features\n    joinCollaboration,\n    updateCollaborationLayer,\n    // WebRTC features\n    sendSignal,\n    updateMediaState\n  };\n}","size_bytes":3940},"client/src/pages/admin.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { \n  Users, \n  Music, \n  Swords, \n  Headphones, \n  BarChart3, \n  Trash2, \n  UserCheck, \n  Shield,\n  Eye,\n  Clock\n} from 'lucide-react';\nimport type { User } from '@shared/schema';\n\nexport default function Admin() {\n  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);\n  const [newRole, setNewRole] = useState<string>('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Admin stats query\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/stats');\n      return await response.json();\n    },\n  });\n\n  // Users query\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/admin/users'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/users');\n      return await response.json();\n    },\n  });\n\n  // Update user role mutation\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      const response = await apiRequest('PATCH', `/api/admin/users/${userId}/role`, { role });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Role Updated',\n        description: 'User role has been updated successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setSelectedUserId(null);\n      setNewRole('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update user role.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest('DELETE', `/api/admin/users/${userId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'User Deleted',\n        description: 'User has been deleted successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Delete Failed',\n        description: error.message || 'Failed to delete user.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleRoleUpdate = (userId: string) => {\n    if (!newRole) return;\n    updateRoleMutation.mutate({ userId, role: newRole });\n  };\n\n  const handleDeleteUser = (userId: string, username: string) => {\n    if (window.confirm(`Are you sure you want to delete user \"${username}\"? This action cannot be undone.`)) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-500';\n      case 'artist': return 'bg-purple-500';\n      case 'producer': return 'bg-blue-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Shield className=\"h-8 w-8 text-red-500\" />\n          <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n        </div>\n        <p className=\"text-gray-400\">Manage your music platform</p>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n            <BarChart3 className=\"h-4 w-4 mr-2\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n            <Users className=\"h-4 w-4 mr-2\" />\n            Users\n          </TabsTrigger>\n          <TabsTrigger value=\"content\" data-testid=\"tab-content\">\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Content\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {statsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-16 bg-gray-300 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-400\">Total Users</p>\n                      <p className=\"text-3xl font-bold\">{stats?.totalUsers || 0}</p>\n                    </div>\n                    <Users className=\"h-8 w-8 text-blue-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-400\">Total Tracks</p>\n                      <p className=\"text-3xl font-bold\">{stats?.totalTracks || 0}</p>\n                    </div>\n                    <Music className=\"h-8 w-8 text-purple-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-400\">Total Battles</p>\n                      <p className=\"text-3xl font-bold\">{stats?.totalBattles || 0}</p>\n                    </div>\n                    <Swords className=\"h-8 w-8 text-orange-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-400\">Total Beats</p>\n                      <p className=\"text-3xl font-bold\">{stats?.totalBeats || 0}</p>\n                    </div>\n                    <Headphones className=\"h-8 w-8 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"h-5 w-5\" />\n                <span>Recent Activity</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {stats?.recentActivity?.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {stats.recentActivity.map((activity: any, index: number) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-dark-200 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        {activity.type === 'track' ? (\n                          <Music className=\"h-5 w-5 text-purple-500\" />\n                        ) : (\n                          <Swords className=\"h-5 w-5 text-orange-500\" />\n                        )}\n                        <div>\n                          <p className=\"font-medium\">{activity.data.title}</p>\n                          <p className=\"text-sm text-gray-400\">\n                            {activity.type === 'track' ? `By ${activity.data.artistName}` : \n                             `${activity.data.contestant1Name} vs ${activity.data.contestant2Name}`}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"secondary\">{activity.type}</Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-gray-400 text-center py-8\">No recent activity</p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>User Management</CardTitle>\n              <p className=\"text-sm text-gray-400\">Manage user accounts and permissions</p>\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"h-16 bg-gray-300 rounded animate-pulse\"></div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {users?.map((user) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <p className=\"font-medium\">{user.displayName}</p>\n                            <Badge className={getRoleBadgeColor(user.role)}>{user.role}</Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-400\">@{user.username} • {user.email}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        {selectedUserId === user.id ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <Select value={newRole} onValueChange={setNewRole}>\n                              <SelectTrigger className=\"w-32\">\n                                <SelectValue placeholder=\"Role\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"fan\">Fan</SelectItem>\n                                <SelectItem value=\"artist\">Artist</SelectItem>\n                                <SelectItem value=\"producer\">Producer</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleRoleUpdate(user.id)}\n                              disabled={updateRoleMutation.isPending || !newRole}\n                              data-testid={`button-save-role-${user.id}`}\n                            >\n                              <UserCheck className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setSelectedUserId(null);\n                                setNewRole('');\n                              }}\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setSelectedUserId(user.id);\n                                setNewRole(user.role);\n                              }}\n                              data-testid={`button-edit-role-${user.id}`}\n                            >\n                              Edit Role\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => handleDeleteUser(user.id, user.username || 'unknown')}\n                              disabled={deleteUserMutation.isPending}\n                              data-testid={`button-delete-user-${user.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"content\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Content Management</CardTitle>\n              <p className=\"text-sm text-gray-400\">Moderate platform content</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-gray-400\">\n                <Eye className=\"h-12 w-12 mx-auto mb-4\" />\n                <p>Content moderation tools coming soon</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13909},"client/src/pages/collaborations.tsx":{"content":"import CollaborationList from '@/components/collaborations/collaboration-list';\n\nexport default function Collaborations() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <CollaborationList />\n    </div>\n  );\n}","size_bytes":230},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Music, Trophy, Users, Music4, TrendingUp, Play, Plus } from 'lucide-react';\nimport { Link } from 'wouter';\nimport TrackList from '@/components/tracks/track-list';\nimport BattleList from '@/components/battles/battle-list';\nimport BeatList from '@/components/beats/beat-list';\nimport CollaborationList from '@/components/collaborations/collaboration-list';\n\nexport default function Dashboard() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-xl font-semibold text-white mb-4\">Please log in to access the dashboard</h2>\n        <Link href=\"/login\">\n          <Button>Go to Login</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-dark-100 text-white\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Welcome Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">\n                Welcome back, {user.displayName}!\n              </h1>\n              <p className=\"text-gray-400\">\n                Ready to create some viral music? Let's get started.\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Badge className=\"bg-purple-500 text-white\">\n                {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n              </Badge>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-400\">Followers</p>\n                <p className=\"font-semibold\">{user.followers?.toLocaleString() || 0}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Music className=\"w-8 h-8 text-purple-400\" />\n                  <div>\n                    <p className=\"text-sm text-gray-400\">Tracks</p>\n                    <p className=\"text-xl font-bold\">12</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Trophy className=\"w-8 h-8 text-gold-400\" />\n                  <div>\n                    <p className=\"text-sm text-gray-400\">Battles Won</p>\n                    <p className=\"text-xl font-bold\">8</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Users className=\"w-8 h-8 text-purple-400\" />\n                  <div>\n                    <p className=\"text-sm text-gray-400\">Collaborations</p>\n                    <p className=\"text-xl font-bold\">5</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-dark-200 border-dark-400\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"w-8 h-8 text-green-400\" />\n                  <div>\n                    <p className=\"text-sm text-gray-400\">Total Plays</p>\n                    <p className=\"text-xl font-bold\">2.5K</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n            {user.role === 'artist' && (\n              <>\n                <Card className=\"bg-gradient-to-br from-purple-500/20 to-electric-500/20 border-purple-400/30 hover:shadow-lg transition-all cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col items-center text-center space-y-3\">\n                      <Music className=\"w-8 h-8 text-purple-400\" />\n                      <h3 className=\"font-semibold\">Upload Track</h3>\n                      <p className=\"text-sm text-gray-400\">Share your latest creation</p>\n                      <Button size=\"sm\" className=\"bg-purple-500 hover:bg-purple-600\">\n                        <Plus className=\"w-3 h-3 mr-1\" />\n                        Upload\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-gradient-to-br from-gold-400/20 to-gold-600/20 border-gold-400/30 hover:shadow-lg transition-all cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col items-center text-center space-y-3\">\n                      <Trophy className=\"w-8 h-8 text-gold-400\" />\n                      <h3 className=\"font-semibold\">Start Battle</h3>\n                      <p className=\"text-sm text-gray-400\">Challenge another artist</p>\n                      <Button size=\"sm\" className=\"bg-gold-500 hover:bg-gold-600 text-black\">\n                        <Plus className=\"w-3 h-3 mr-1\" />\n                        Battle\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n\n            {user.role === 'producer' && (\n              <Card className=\"bg-gradient-to-br from-green-500/20 to-green-600/20 border-green-400/30 hover:shadow-lg transition-all cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col items-center text-center space-y-3\">\n                    <Music4 className=\"w-8 h-8 text-green-400\" />\n                    <h3 className=\"font-semibold\">List Beat</h3>\n                    <p className=\"text-sm text-gray-400\">Sell your beats to artists</p>\n                    <Button size=\"sm\" className=\"bg-green-500 hover:bg-green-600\">\n                      <Plus className=\"w-3 h-3 mr-1\" />\n                      List\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Card className=\"bg-gradient-to-br from-blue-500/20 to-blue-600/20 border-blue-400/30 hover:shadow-lg transition-all cursor-pointer\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col items-center text-center space-y-3\">\n                  <Users className=\"w-8 h-8 text-blue-400\" />\n                  <h3 className=\"font-semibold\">Collaborate</h3>\n                  <p className=\"text-sm text-gray-400\">Work with other artists</p>\n                  <Button size=\"sm\" className=\"bg-blue-500 hover:bg-blue-600\">\n                    <Plus className=\"w-3 h-3 mr-1\" />\n                    Invite\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Main Content Sections */}\n        <div className=\"space-y-12\">\n          {/* Tracks Section */}\n          <section>\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold flex items-center\">\n                <Music className=\"w-6 h-6 mr-3 text-purple-400\" />\n                Recent Tracks\n              </h2>\n              <Link href=\"/tracks\">\n                <Button variant=\"outline\">View All Tracks</Button>\n              </Link>\n            </div>\n            <TrackList />\n          </section>\n\n          {/* Active Battles Section */}\n          <section>\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold flex items-center\">\n                <Trophy className=\"w-6 h-6 mr-3 text-gold-400\" />\n                Live Battles\n              </h2>\n              <Link href=\"/battles\">\n                <Button variant=\"outline\">View All Battles</Button>\n              </Link>\n            </div>\n            <BattleList />\n          </section>\n\n          {/* Beat Marketplace Section */}\n          <section>\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold flex items-center\">\n                <Music4 className=\"w-6 h-6 mr-3 text-gold-400\" />\n                Beat Marketplace\n              </h2>\n              <Link href=\"/beats\">\n                <Button variant=\"outline\">Browse All Beats</Button>\n              </Link>\n            </div>\n            <BeatList />\n          </section>\n\n          {/* Collaborations Section */}\n          <section>\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold flex items-center\">\n                <Users className=\"w-6 h-6 mr-3 text-purple-400\" />\n                Your Collaborations\n              </h2>\n              <Link href=\"/collaborations\">\n                <Button variant=\"outline\">View All Collaborations</Button>\n              </Link>\n            </div>\n            <CollaborationList />\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9856},"client/src/pages/login.tsx":{"content":"import { useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Music, Shield, LogIn } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  const handleLogin = () => {\n    // Redirect to Replit authentication\n    window.location.href = '/api/login';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-gray-900 border-gray-800\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-600 rounded-full flex items-center justify-center\">\n              <Music className=\"w-6 h-6 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center text-white\">\n            Welcome Back\n          </CardTitle>\n          <p className=\"text-center text-muted-foreground\">\n            Sign in to your Viral Views account\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Replit Authentication */}\n          <div className=\"space-y-4\">\n            <Button\n              data-testid=\"button-login-replit\"\n              onClick={handleLogin}\n              className=\"w-full bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white font-medium py-3 rounded-lg transition-all duration-200\"\n              size=\"lg\"\n            >\n              <LogIn className=\"w-5 h-5 mr-2\" />\n              Sign in with Replit\n            </Button>\n            \n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-700\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-gray-900 px-2 text-muted-foreground\">Secure Authentication</span>\n              </div>\n            </div>\n            \n            <div className=\"text-center text-sm text-muted-foreground\">\n              <Shield className=\"inline w-4 h-4 mr-1\" />\n              Your account is secured by Replit's authentication system.\n            </div>\n          </div>\n\n          <div className=\"text-center text-sm\">\n            <span className=\"text-muted-foreground\">New to Viral Views? </span>\n            <Link href=\"/signup\">\n              <span data-testid=\"link-signup\" className=\"text-primary hover:underline font-medium\">\n                Get started\n              </span>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3373},"client/src/pages/signup.tsx":{"content":"import { useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Music, Shield, UserPlus } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (isAuthenticated) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, setLocation]);\n\n  const handleSignup = () => {\n    // Redirect to Replit authentication (same as login)\n    window.location.href = '/api/login';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated) {\n    return null; // Will redirect in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-gray-900 border-gray-800\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-600 rounded-full flex items-center justify-center\">\n              <Music className=\"w-6 h-6 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-center text-white\">\n            Join Viral Views\n          </CardTitle>\n          <p className=\"text-center text-muted-foreground\">\n            Start your music collaboration journey\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Replit Authentication */}\n          <div className=\"space-y-4\">\n            <Button\n              data-testid=\"button-signup-replit\"\n              onClick={handleSignup}\n              className=\"w-full bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white font-medium py-3 rounded-lg transition-all duration-200\"\n              size=\"lg\"\n            >\n              <UserPlus className=\"w-5 h-5 mr-2\" />\n              Get Started with Replit\n            </Button>\n            \n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-700\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-gray-900 px-2 text-muted-foreground\">Secure Registration</span>\n              </div>\n            </div>\n            \n            <div className=\"text-center text-sm text-muted-foreground\">\n              <Shield className=\"inline w-4 h-4 mr-1\" />\n              Your account is secured by Replit's authentication system.\n            </div>\n            \n            <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-4 space-y-2\">\n              <h4 className=\"text-white font-medium text-sm\">What's included:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Access to live rap battles and ciphers</li>\n                <li>• Beat marketplace and collaboration tools</li>\n                <li>• Real-time audio streaming features</li>\n                <li>• Community voting and engagement</li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"text-center text-sm\">\n            <span className=\"text-muted-foreground\">Already have an account? </span>\n            <Link href=\"/login\">\n              <span data-testid=\"link-login\" className=\"text-primary hover:underline font-medium\">\n                Sign in\n              </span>\n            </Link>\n          </div>\n          \n          <div className=\"text-center text-xs text-muted-foreground\">\n            By continuing, you agree to our terms and confirm you are 18+ years old.\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4149},"server/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\nimport type { User } from '@shared/schema';\n\n// Initialize SendGrid (will be configured when API key is provided)\nlet mailService: MailService | null = null;\n\nfunction initializeEmailService() {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.warn(\"SENDGRID_API_KEY not provided - email functionality disabled\");\n    return false;\n  }\n\n  try {\n    mailService = new MailService();\n    mailService.setApiKey(process.env.SENDGRID_API_KEY);\n    console.log(\"✅ SendGrid email service initialized\");\n    return true;\n  } catch (error) {\n    console.error(\"❌ Failed to initialize SendGrid:\", error);\n    return false;\n  }\n}\n\n// Initialize on startup\ninitializeEmailService();\n\nexport async function sendWelcomeEmail(user: User): Promise<boolean> {\n  if (!mailService || !process.env.SENDGRID_API_KEY) {\n    console.log(\"📧 Email service not available - skipping welcome email for\", user.username);\n    return false;\n  }\n\n  try {\n    const welcomeHtml = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <style>\n            body { \n              font-family: 'Segoe UI', Arial, sans-serif; \n              line-height: 1.6; \n              color: #333; \n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              margin: 0;\n              padding: 20px;\n            }\n            .container { \n              max-width: 600px; \n              margin: 0 auto; \n              background: white; \n              border-radius: 15px;\n              overflow: hidden;\n              box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            }\n            .header { \n              background: linear-gradient(135deg, #9333ea 0%, #ec4899 100%); \n              color: white; \n              padding: 40px 30px;\n              text-align: center;\n            }\n            .header h1 { \n              margin: 0; \n              font-size: 28px; \n              font-weight: bold;\n            }\n            .header p {\n              margin: 10px 0 0 0;\n              opacity: 0.9;\n              font-size: 18px;\n            }\n            .content { \n              padding: 40px 30px;\n            }\n            .welcome-box {\n              background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n              padding: 25px;\n              border-radius: 10px;\n              margin: 20px 0;\n              text-align: center;\n            }\n            .username {\n              font-size: 24px;\n              font-weight: bold;\n              color: #9333ea;\n              margin: 10px 0;\n            }\n            .features {\n              margin: 30px 0;\n            }\n            .feature {\n              display: flex;\n              align-items: center;\n              margin: 15px 0;\n              padding: 10px;\n            }\n            .feature-icon {\n              width: 40px;\n              height: 40px;\n              background: linear-gradient(135deg, #9333ea 0%, #ec4899 100%);\n              border-radius: 50%;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              margin-right: 15px;\n              color: white;\n              font-weight: bold;\n            }\n            .cta-button {\n              display: inline-block;\n              background: linear-gradient(135deg, #9333ea 0%, #ec4899 100%);\n              color: white;\n              padding: 15px 30px;\n              text-decoration: none;\n              border-radius: 10px;\n              font-weight: bold;\n              font-size: 16px;\n              margin: 20px 0;\n              transition: transform 0.2s;\n            }\n            .cta-button:hover {\n              transform: translateY(-2px);\n            }\n            .footer {\n              background: #1f2937;\n              color: #9ca3af;\n              padding: 30px;\n              text-align: center;\n              font-size: 14px;\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <h1>🎵 Welcome to Viral Views! 🎵</h1>\n              <p>Where Music Goes Viral</p>\n            </div>\n            \n            <div class=\"content\">\n              <h2>Hey there, music creator! 🎤</h2>\n              \n              <div class=\"welcome-box\">\n                <p>Your account has been successfully created!</p>\n                <div class=\"username\">@${user.username}</div>\n                <p>You're now part of the ultimate music collaboration platform!</p>\n              </div>\n\n              <p>Welcome to <strong>Viral Views</strong> - the premier platform for rap battles, beat production, and real-time music collaboration. You're about to join a community of talented ${user.role}s who are pushing the boundaries of music creation.</p>\n\n              <div class=\"features\">\n                <h3>🚀 What you can do now:</h3>\n                \n                <div class=\"feature\">\n                  <div class=\"feature-icon\">🎤</div>\n                  <div>\n                    <strong>Join Rap Battles</strong><br>\n                    Compete against other artists in live freestyle competitions\n                  </div>\n                </div>\n\n                <div class=\"feature\">\n                  <div class=\"feature-icon\">🎵</div>\n                  <div>\n                    <strong>Create & Share Beats</strong><br>\n                    Upload your productions and monetize through our marketplace\n                  </div>\n                </div>\n\n                <div class=\"feature\">\n                  <div class=\"feature-icon\">🤝</div>\n                  <div>\n                    <strong>Real-time Collaboration</strong><br>\n                    Work with other artists on tracks and remixes\n                  </div>\n                </div>\n\n                <div class=\"feature\">\n                  <div class=\"feature-icon\">📺</div>\n                  <div>\n                    <strong>Live Streaming</strong><br>\n                    Broadcast your sessions and build your fanbase\n                  </div>\n                </div>\n              </div>\n\n              <div style=\"text-align: center;\">\n                <a href=\"${process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}` : 'https://viralviews.com'}\" class=\"cta-button\">\n                  🎵 Start Creating Now! ✨\n                </a>\n              </div>\n\n              <p><strong>Your role:</strong> ${user.role.charAt(0).toUpperCase() + user.role.slice(1)} 🎯</p>\n              \n              <p>Need help getting started? Our platform is intuitive and designed for creators like you. Explore the different sections, connect with other artists, and let your creativity flow!</p>\n            </div>\n\n            <div class=\"footer\">\n              <p><strong>Viral Views</strong> - Where Music Goes Viral</p>\n              <p>© 2025 Viral Views. Ready to make your mark in the music world? 🌟</p>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    const welcomeText = `\n🎵 Welcome to Viral Views - Where Music Goes Viral! 🎵\n\nHey @${user.username}!\n\nYour account has been successfully created as a ${user.role}! You're now part of the ultimate music collaboration platform.\n\nWhat you can do now:\n🎤 Join Rap Battles - Compete in live freestyle competitions\n🎵 Create & Share Beats - Upload and monetize your productions  \n🤝 Real-time Collaboration - Work with other artists on tracks\n📺 Live Streaming - Broadcast sessions and build your fanbase\n\nReady to start creating? Log in now and explore all the features!\n\n- The Viral Views Team\nWhere Music Goes Viral ✨\n    `;\n\n    await mailService.send({\n      to: user.email!,\n      from: {\n        email: 'welcome@viralviews.com',\n        name: 'Viral Views Team'\n      },\n      subject: `🎵 Welcome to Viral Views, @${user.username}! Your music journey starts now 🎵`,\n      text: welcomeText,\n      html: welcomeHtml,\n    });\n\n    console.log(`✅ Welcome email sent to ${user.email} (@${user.username})`);\n    return true;\n\n  } catch (error) {\n    console.error(\"❌ Failed to send welcome email:\", error);\n    return false;\n  }\n}\n\nexport async function sendEmailVerification(user: User, verificationCode: string): Promise<boolean> {\n  if (!mailService || !process.env.SENDGRID_API_KEY) {\n    console.log(\"📧 Email service not available - skipping verification email\");\n    return false;\n  }\n\n  try {\n    const verificationHtml = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n            .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n            .header { background: linear-gradient(135deg, #9333ea 0%, #ec4899 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0; }\n            .content { padding: 30px; background: white; border-radius: 0 0 10px 10px; }\n            .verification-code { font-size: 32px; font-weight: bold; text-align: center; background: #f3f4f6; padding: 20px; border-radius: 10px; letter-spacing: 3px; margin: 20px 0; }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"header\">\n              <h1>🎵 Verify Your Viral Views Account</h1>\n            </div>\n            <div class=\"content\">\n              <h2>Hey @${user.username}!</h2>\n              <p>Please use this verification code to complete your account setup:</p>\n              <div class=\"verification-code\">${verificationCode}</div>\n              <p>This code expires in 10 minutes for security purposes.</p>\n              <p>If you didn't create this account, please ignore this email.</p>\n              <p>Welcome to the music community! 🎤</p>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    await mailService.send({\n      to: user.email!,\n      from: {\n        email: 'verify@viralviews.com', \n        name: 'Viral Views Verification'\n      },\n      subject: `🔐 Verify your Viral Views account @${user.username}`,\n      html: verificationHtml,\n      text: `Verify your Viral Views account @${user.username}\\n\\nVerification code: ${verificationCode}\\n\\nThis code expires in 10 minutes.`\n    });\n\n    console.log(`✅ Verification email sent to ${user.email}`);\n    return true;\n\n  } catch (error) {\n    console.error(\"❌ Failed to send verification email:\", error);\n    return false;\n  }\n}\n\n// Re-initialize email service when environment changes\nexport function reinitializeEmailService() {\n  return initializeEmailService();\n}","size_bytes":10708},"client/src/components/floating-login.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/card';\nimport { X, Music, Shield } from 'lucide-react';\n\ninterface FloatingLoginProps {\n  onSuccess?: () => void;\n}\n\nexport default function FloatingLogin({ onSuccess }: FloatingLoginProps) {\n  const handleLogin = () => {\n    // Redirect to Replit auth login\n    window.location.href = '/api/login';\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-gray-900 border-gray-800 text-white\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"flex items-center justify-center gap-2\">\n            <div className=\"p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg\">\n              <Music className=\"h-6 w-6 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Viral Views\n            </h1>\n          </div>\n          <div>\n            <CardTitle className=\"text-xl\">Welcome to Viral Views</CardTitle>\n            <CardDescription className=\"text-gray-400 mt-2\">\n              The ultimate music collaboration platform for rap battles, beat production, and real-time mixing\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-start gap-3 p-4 bg-blue-900/20 border border-blue-800 rounded-lg\">\n            <Shield className=\"h-5 w-5 text-blue-400 mt-0.5 flex-shrink-0\" />\n            <div className=\"text-sm\">\n              <p className=\"text-blue-300 font-medium\">Secure Authentication</p>\n              <p className=\"text-blue-200/80\">Sign in with your Replit account for secure access to all platform features.</p>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <Button \n              onClick={handleLogin}\n              className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-medium py-3\"\n              data-testid=\"button-login\"\n            >\n              Sign In with Replit\n            </Button>\n            \n            <p className=\"text-xs text-gray-500 text-center\">\n              By signing in, you agree to our Terms of Service and Privacy Policy. \n              You must be 18+ to use this platform.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2620},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Allow HTTP for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  try {\n    const userData = {\n      id: claims[\"sub\"],\n      email: claims[\"email\"],\n      firstName: claims[\"first_name\"],\n      lastName: claims[\"last_name\"],\n      profileImageUrl: claims[\"profile_image_url\"],\n      updatedAt: new Date(),\n    };\n    \n    console.log('Upserting user with Replit auth:', {\n      id: userData.id,\n      email: userData.email,\n      name: `${userData.firstName} ${userData.lastName}`.trim()\n    });\n    \n    const user = await storage.upsertUser(userData);\n    console.log('User upserted successfully:', {\n      id: user.id,\n      displayName: user.displayName,\n      role: user.role,\n      isNewUser: !user.updatedAt || user.createdAt === user.updatedAt\n    });\n    \n    return user;\n  } catch (error) {\n    console.error('Error upserting user during Replit auth:', error);\n    throw error;\n  }\n}\n\n// Create a mock user for development when Replit auth is not available\nasync function createMockUser() {\n  const mockUserData = {\n    id: process.env.REPL_OWNER || 'dev-user',\n    email: 'admin@viralviews.dev',\n    firstName: 'Admin',\n    lastName: 'User',\n    profileImageUrl: null,\n    updatedAt: new Date(),\n  };\n\n  try {\n    const user = await storage.upsertUser(mockUserData);\n    console.log('Mock user created for development:', user.displayName);\n    return user;\n  } catch (error) {\n    console.error('Error creating mock user:', error);\n    throw error;\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  try {\n    const config = await getOidcConfig();\n    console.log('OIDC configuration loaded successfully');\n\n    const verify: VerifyFunction = async (\n      tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n      verified: passport.AuthenticateCallback\n    ) => {\n      const user = {};\n      updateUserSession(user, tokens);\n      await upsertUser(tokens.claims());\n      verified(null, user);\n    };\n\n    for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n      const strategy = new Strategy(\n        {\n          name: `replitauth:${domain}`,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n    }\n\n    passport.serializeUser((user: Express.User, cb) => cb(null, user));\n    passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n    app.get(\"/api/login\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        prompt: \"login consent\",\n        scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n      })(req, res, next);\n    });\n\n    app.get(\"/api/callback\", (req, res, next) => {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/api/login\",\n      })(req, res, next);\n    });\n\n    app.get(\"/api/logout\", (req, res) => {\n      req.logout(() => {\n        res.redirect(\n          client.buildEndSessionUrl(config, {\n            client_id: process.env.REPL_ID!,\n            post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n          }).href\n        );\n      });\n    });\n\n  } catch (error) {\n    console.error('Error setting up Replit authentication:', error);\n    console.log('Setting up fallback authentication for development...');\n    \n    // Create mock user for development\n    await createMockUser();\n\n    // Fallback: Simple auth that creates a session with mock user\n    app.get(\"/api/login\", async (req, res) => {\n      try {\n        const user = await createMockUser();\n        (req as any).login({ claims: { sub: user.id } }, (err: any) => {\n          if (err) {\n            console.error('Login error:', err);\n            return res.status(500).json({ error: 'Login failed' });\n          }\n          res.redirect('/');\n        });\n      } catch (error) {\n        console.error('Login error:', error);\n        res.status(500).json({ error: 'Login failed' });\n      }\n    });\n    \n    app.get(\"/api/callback\", (req, res) => {\n      res.redirect('/');\n    });\n    \n    app.get(\"/api/logout\", (req, res) => {\n      req.logout(() => {\n        res.redirect('/');\n      });\n    });\n  }\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const user = req.user as any;\n  \n  // For development fallback, skip token expiration checks\n  if (!user.expires_at) {\n    return next();\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":6705}},"version":1}